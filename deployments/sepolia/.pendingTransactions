{
  "0x454d152b479e170dd113ecf6ea98a354bb4e550b906a779ef3fb5fedfd944210": {
    "name": "NFTPoolBurnAndMint",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "NFTPoolBurnAndMint",
      "sourceName": "contracts/NFTPoolBurnAndMint.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_link",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wnftAddr",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "name": "FailedToWithdrawEth",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            }
          ],
          "name": "InvalidRouter",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "currentBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "calculatedFees",
              "type": "uint256"
            }
          ],
          "name": "NotEnoughBalance",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "NothingToWithdraw",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferRequested",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "messageId",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "uint64",
              "name": "destinationChainSelector",
              "type": "uint64"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "text",
              "type": "bytes"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "fees",
              "type": "uint256"
            }
          ],
          "name": "TokenBurnedAndSent",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "acceptOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "_destinationChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "allowed",
              "type": "bool"
            }
          ],
          "name": "allowlistDestinationChain",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_sender",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "allowed",
              "type": "bool"
            }
          ],
          "name": "allowlistSender",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "_sourceChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "bool",
              "name": "allowed",
              "type": "bool"
            }
          ],
          "name": "allowlistSourceChain",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ],
          "name": "allowlistedDestinationChains",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "allowlistedSenders",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ],
          "name": "allowlistedSourceChains",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "destChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "name": "burnAndMint",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "messageId",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "sourceChainSelector",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes",
                  "name": "sender",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Client.EVMTokenAmount[]",
                  "name": "destTokenAmounts",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct Client.Any2EVMMessage",
              "name": "message",
              "type": "tuple"
            }
          ],
          "name": "ccipReceive",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getLastReceivedMessageDetails",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "messageId",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "text",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getRouter",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_beneficiary",
              "type": "address"
            }
          ],
          "name": "withdraw",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_beneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_token",
              "type": "address"
            }
          ],
          "name": "withdrawToken",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "wnft",
          "outputs": [
            {
              "internalType": "contract WrappedNFT",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "bytecode": "",
      "deployedBytecode": "0x6080604052600436106101025760003560e01c80637a6ee0cd116100955780639c046b1b116100645780639c046b1b1461033d578063b0f479a114610368578063db04fa4914610393578063eab5b02c146103bc578063f2fde38b146103e557610109565b80637a6ee0cd1461029757806385572ffb146102c05780638da5cb5b146102e957806396d3b83d1461031457610109565b806351cff8d9116100d157806351cff8d9146101dd5780636159ada11461020657806375c67c661461024357806379ba50971461028057610109565b806301ffc9a71461010e578063263596a51461014b5780633aeac4e1146101775780634030d521146101a057610109565b3661010957005b600080fd5b34801561011a57600080fd5b50610135600480360381019061013091906118db565b61040e565b6040516101429190611923565b60405180910390f35b34801561015757600080fd5b506101606104e0565b60405161016e9291906119e7565b60405180910390f35b34801561018357600080fd5b5061019e60048036038101906101999190611a75565b61057d565b005b3480156101ac57600080fd5b506101c760048036038101906101c29190611af5565b61066d565b6040516101d49190611923565b60405180910390f35b3480156101e957600080fd5b5061020460048036038101906101ff9190611b22565b61068d565b005b34801561021257600080fd5b5061022d60048036038101906102289190611b22565b61078b565b60405161023a9190611923565b60405180910390f35b34801561024f57600080fd5b5061026a60048036038101906102659190611af5565b6107ab565b6040516102779190611923565b60405180910390f35b34801561028c57600080fd5b506102956107cb565b005b3480156102a357600080fd5b506102be60048036038101906102b99190611b85565b610960565b005b3480156102cc57600080fd5b506102e760048036038101906102e29190611c10565b610ab7565b005b3480156102f557600080fd5b506102fe610b43565b60405161030b9190611c68565b60405180910390f35b34801561032057600080fd5b5061033b60048036038101906103369190611caf565b610b6c565b005b34801561034957600080fd5b50610352610bb7565b60405161035f9190611d4e565b60405180910390f35b34801561037457600080fd5b5061037d610bdd565b60405161038a9190611c68565b60405180910390f35b34801561039f57600080fd5b506103ba60048036038101906103b59190611caf565b610c05565b005b3480156103c857600080fd5b506103e360048036038101906103de9190611d69565b610c50565b005b3480156103f157600080fd5b5061040c60048036038101906104079190611b22565b610cb3565b005b60007f85572ffb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104d957507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6000606060025460038080546104f590611dd8565b80601f016020809104026020016040519081016040528092919081815260200182805461052190611dd8565b801561056e5780601f106105435761010080835404028352916020019161056e565b820191906000526020600020905b81548152906001019060200180831161055157829003601f168201915b50505050509050915091509091565b610585610cc7565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105c09190611c68565b602060405180830381865afa1580156105dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106019190611e1e565b90506000810361063d576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61066883828473ffffffffffffffffffffffffffffffffffffffff16610d579092919063ffffffff16565b505050565b60056020528060005260406000206000915054906101000a900460ff1681565b610695610cc7565b6000479050600081036106d4576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516106fa90611e7c565b60006040518083038185875af1925050503d8060008114610737576040519150601f19603f3d011682016040523d82523d6000602084013e61073c565b606091505b5050905080610786573383836040517f9d11f56300000000000000000000000000000000000000000000000000000000815260040161077d93929190611ea0565b60405180910390fd5b505050565b60066020528060005260406000206000915054906101000a900460ff1681565b60046020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461085b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085290611f23565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016109bf93929190611ea0565b600060405180830381600087803b1580156109d957600080fd5b505af11580156109ed573d6000803e3d6000fd5b50505050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68856040518263ffffffff1660e01b8152600401610a4c9190611f43565b600060405180830381600087803b158015610a6657600080fd5b505af1158015610a7a573d6000803e3d6000fd5b5050505060008484604051602001610a93929190611f5e565b6040516020818303038152906040529050610aaf838383610ddd565b505050505050565b610abf610bdd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b2e57336040517fd7f73334000000000000000000000000000000000000000000000000000000008152600401610b259190611c68565b60405180910390fd5b610b4081610b3b906122ea565b61121e565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610b74610cc7565b80600460008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610c0d610cc7565b80600560008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b610c58610cc7565b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b610cbb610cc7565b610cc4816112e1565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4c90612349565b60405180910390fd5b565b610dd88363a9059cbb60e01b8484604051602401610d76929190612369565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061140d565b505050565b6000610de7610cc7565b6000610e168484600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166114d4565b905060003073ffffffffffffffffffffffffffffffffffffffff1663b0f479a16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8991906123a7565b905060008173ffffffffffffffffffffffffffffffffffffffff166320487ded88856040518363ffffffff1660e01b8152600401610ec89291906125bf565b602060405180830381865afa158015610ee5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f099190611e1e565b9050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f669190611c68565b602060405180830381865afa158015610f83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa79190611e1e565b81111561108857600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110099190611c68565b602060405180830381865afa158015611026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104a9190611e1e565b816040517f8f0f420600000000000000000000000000000000000000000000000000000000815260040161107f9291906125ef565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b81526004016110e5929190612369565b6020604051808303816000875af1158015611104573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611128919061262d565b508173ffffffffffffffffffffffffffffffffffffffff166396f4e9f988856040518363ffffffff1660e01b81526004016111649291906125bf565b6020604051808303816000875af1158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a7919061266f565b93508667ffffffffffffffff16847fc152007fffdd6a8d0653f1b985d331733bbdcb8dbce0517251ca024a07ffdd908888600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660405161120c94939291906126e6565b60405180910390a35050509392505050565b600081606001518060200190518101906112389190612782565b9050600081602001519050600082600001519050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166330b2c59683836040518363ffffffff1660e01b81526004016112a9929190612369565b600060405180830381600087803b1580156112c357600080fd5b505af11580156112d7573d6000803e3d6000fd5b5050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361134f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611346906127fb565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600061146f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115ae9092919063ffffffff16565b90506000815111156114cf578080602001905181019061148f919061262d565b6114ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c59061288d565b60405180910390fd5b5b505050565b6114dc6117fa565b6040518060a00160405280856040516020016114f89190611c68565b6040516020818303038152906040528152602001848152602001600067ffffffffffffffff81111561152d5761152c611f8c565b5b60405190808252806020026020018201604052801561156657816020015b61155361183f565b81526020019060019003908161154b5790505b5081526020018373ffffffffffffffffffffffffffffffffffffffff1681526020016115a2604051806020016040528062030d408152506115c6565b81525090509392505050565b60606115bd8484600085611645565b90509392505050565b60606397a657c960e01b826040516024016115e191906128c9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b60608247101561168a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168190612956565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516116b391906129a7565b60006040518083038185875af1925050503d80600081146116f0576040519150601f19603f3d011682016040523d82523d6000602084013e6116f5565b606091505b509150915061170687838387611712565b92505050949350505050565b6060831561177457600083510361176c5761172c85611787565b61176b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176290612a0a565b60405180910390fd5b5b82905061177f565b61177e83836117aa565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156117bd5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f19190612a2a565b60405180910390fd5b6040518060a00160405280606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6118b881611883565b81146118c357600080fd5b50565b6000813590506118d5816118af565b92915050565b6000602082840312156118f1576118f0611879565b5b60006118ff848285016118c6565b91505092915050565b60008115159050919050565b61191d81611908565b82525050565b60006020820190506119386000830184611914565b92915050565b6000819050919050565b6119518161193e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611991578082015181840152602081019050611976565b60008484015250505050565b6000601f19601f8301169050919050565b60006119b982611957565b6119c38185611962565b93506119d3818560208601611973565b6119dc8161199d565b840191505092915050565b60006040820190506119fc6000830185611948565b8181036020830152611a0e81846119ae565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a4282611a17565b9050919050565b611a5281611a37565b8114611a5d57600080fd5b50565b600081359050611a6f81611a49565b92915050565b60008060408385031215611a8c57611a8b611879565b5b6000611a9a85828601611a60565b9250506020611aab85828601611a60565b9150509250929050565b600067ffffffffffffffff82169050919050565b611ad281611ab5565b8114611add57600080fd5b50565b600081359050611aef81611ac9565b92915050565b600060208284031215611b0b57611b0a611879565b5b6000611b1984828501611ae0565b91505092915050565b600060208284031215611b3857611b37611879565b5b6000611b4684828501611a60565b91505092915050565b6000819050919050565b611b6281611b4f565b8114611b6d57600080fd5b50565b600081359050611b7f81611b59565b92915050565b60008060008060808587031215611b9f57611b9e611879565b5b6000611bad87828801611b70565b9450506020611bbe87828801611a60565b9350506040611bcf87828801611ae0565b9250506060611be087828801611a60565b91505092959194509250565b600080fd5b600060a08284031215611c0757611c06611bec565b5b81905092915050565b600060208284031215611c2657611c25611879565b5b600082013567ffffffffffffffff811115611c4457611c4361187e565b5b611c5084828501611bf1565b91505092915050565b611c6281611a37565b82525050565b6000602082019050611c7d6000830184611c59565b92915050565b611c8c81611908565b8114611c9757600080fd5b50565b600081359050611ca981611c83565b92915050565b60008060408385031215611cc657611cc5611879565b5b6000611cd485828601611ae0565b9250506020611ce585828601611c9a565b9150509250929050565b6000819050919050565b6000611d14611d0f611d0a84611a17565b611cef565b611a17565b9050919050565b6000611d2682611cf9565b9050919050565b6000611d3882611d1b565b9050919050565b611d4881611d2d565b82525050565b6000602082019050611d636000830184611d3f565b92915050565b60008060408385031215611d8057611d7f611879565b5b6000611d8e85828601611a60565b9250506020611d9f85828601611c9a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611df057607f821691505b602082108103611e0357611e02611da9565b5b50919050565b600081519050611e1881611b59565b92915050565b600060208284031215611e3457611e33611879565b5b6000611e4284828501611e09565b91505092915050565b600081905092915050565b50565b6000611e66600083611e4b565b9150611e7182611e56565b600082019050919050565b6000611e8782611e59565b9150819050919050565b611e9a81611b4f565b82525050565b6000606082019050611eb56000830186611c59565b611ec26020830185611c59565b611ecf6040830184611e91565b949350505050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b6000611f0d601683611962565b9150611f1882611ed7565b602082019050919050565b60006020820190508181036000830152611f3c81611f00565b9050919050565b6000602082019050611f586000830184611e91565b92915050565b6000604082019050611f736000830185611e91565b611f806020830184611c59565b9392505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611fc48261199d565b810181811067ffffffffffffffff82111715611fe357611fe2611f8c565b5b80604052505050565b6000611ff661186f565b90506120028282611fbb565b919050565b600080fd5b6120158161193e565b811461202057600080fd5b50565b6000813590506120328161200c565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff82111561205d5761205c611f8c565b5b6120668261199d565b9050602081019050919050565b82818337600083830152505050565b600061209561209084612042565b611fec565b9050828152602081018484840111156120b1576120b061203d565b5b6120bc848285612073565b509392505050565b600082601f8301126120d9576120d8612038565b5b81356120e9848260208601612082565b91505092915050565b600067ffffffffffffffff82111561210d5761210c611f8c565b5b602082029050602081019050919050565b600080fd5b60006040828403121561213957612138611f87565b5b6121436040611fec565b9050600061215384828501611a60565b600083015250602061216784828501611b70565b60208301525092915050565b6000612186612181846120f2565b611fec565b905080838252602082019050604084028301858111156121a9576121a861211e565b5b835b818110156121d257806121be8882612123565b8452602084019350506040810190506121ab565b5050509392505050565b600082601f8301126121f1576121f0612038565b5b8135612201848260208601612173565b91505092915050565b600060a082840312156122205761221f611f87565b5b61222a60a0611fec565b9050600061223a84828501612023565b600083015250602061224e84828501611ae0565b602083015250604082013567ffffffffffffffff81111561227257612271612007565b5b61227e848285016120c4565b604083015250606082013567ffffffffffffffff8111156122a2576122a1612007565b5b6122ae848285016120c4565b606083015250608082013567ffffffffffffffff8111156122d2576122d1612007565b5b6122de848285016121dc565b60808301525092915050565b60006122f6368361220a565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000612333601683611962565b915061233e826122fd565b602082019050919050565b6000602082019050818103600083015261236281612326565b9050919050565b600060408201905061237e6000830185611c59565b61238b6020830184611e91565b9392505050565b6000815190506123a181611a49565b92915050565b6000602082840312156123bd576123bc611879565b5b60006123cb84828501612392565b91505092915050565b6123dd81611ab5565b82525050565b600081519050919050565b600082825260208201905092915050565b600061240a826123e3565b61241481856123ee565b9350612424818560208601611973565b61242d8161199d565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61246d81611a37565b82525050565b61247c81611b4f565b82525050565b6040820160008201516124986000850182612464565b5060208201516124ab6020850182612473565b50505050565b60006124bd8383612482565b60408301905092915050565b6000602082019050919050565b60006124e182612438565b6124eb8185612443565b93506124f683612454565b8060005b8381101561252757815161250e88826124b1565b9750612519836124c9565b9250506001810190506124fa565b5085935050505092915050565b600060a083016000830151848203600086015261255182826123ff565b9150506020830151848203602086015261256b82826123ff565b9150506040830151848203604086015261258582826124d6565b915050606083015161259a6060860182612464565b50608083015184820360808601526125b282826123ff565b9150508091505092915050565b60006040820190506125d460008301856123d4565b81810360208301526125e68184612534565b90509392505050565b60006040820190506126046000830185611e91565b6126116020830184611e91565b9392505050565b60008151905061262781611c83565b92915050565b60006020828403121561264357612642611879565b5b600061265184828501612618565b91505092915050565b6000815190506126698161200c565b92915050565b60006020828403121561268557612684611879565b5b60006126938482850161265a565b91505092915050565b600082825260208201905092915050565b60006126b8826123e3565b6126c2818561269c565b93506126d2818560208601611973565b6126db8161199d565b840191505092915050565b60006080820190506126fb6000830187611c59565b818103602083015261270d81866126ad565b905061271c6040830185611c59565b6127296060830184611e91565b95945050505050565b60006040828403121561274857612747611f87565b5b6127526040611fec565b9050600061276284828501611e09565b600083015250602061277684828501612392565b60208301525092915050565b60006040828403121561279857612797611879565b5b60006127a684828501612732565b91505092915050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006127e5601783611962565b91506127f0826127af565b602082019050919050565b60006020820190508181036000830152612814816127d8565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612877602a83611962565b91506128828261281b565b604082019050919050565b600060208201905081810360008301526128a68161286a565b9050919050565b6020820160008201516128c36000850182612473565b50505050565b60006020820190506128de60008301846128ad565b92915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612940602683611962565b915061294b826128e4565b604082019050919050565b6000602082019050818103600083015261296f81612933565b9050919050565b6000612981826123e3565b61298b8185611e4b565b935061299b818560208601611973565b80840191505092915050565b60006129b38284612976565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006129f4601d83611962565b91506129ff826129be565b602082019050919050565b60006020820190508181036000830152612a23816129e7565b9050919050565b60006020820190508181036000830152612a4481846119ae565b90509291505056fea2646970667358221220b728ef5a64499b0f2726b26a689af14a2d9a04d1133a08817dd9e83b85223bf864736f6c634300081c0033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "allowlistDestinationChain(uint64,bool)": {
            "details": "Updates the allowlist status of a destination chain for transactions."
          },
          "allowlistSender(address,bool)": {
            "details": "Updates the allowlist status of a sender for transactions."
          },
          "allowlistSourceChain(uint64,bool)": {
            "details": "Updates the allowlist status of a source chain for transactions."
          },
          "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
            "details": "Note ensure you check the msg.sender is the OffRampRouter",
            "params": {
              "message": "CCIP Message"
            }
          },
          "constructor": {
            "params": {
              "_link": "The address of the link contract.",
              "_router": "The address of the router contract."
            }
          },
          "getLastReceivedMessageDetails()": {
            "returns": {
              "messageId": "The ID of the last received message.",
              "text": "The last received text."
            }
          },
          "getRouter()": {
            "returns": {
              "_0": "CCIP router address"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.",
            "params": {
              "interfaceId": "The interfaceId to check"
            },
            "returns": {
              "_0": "true if the interfaceId is supported"
            }
          },
          "withdraw(address)": {
            "details": "This function reverts if there are no funds to withdraw or if the transfer fails. It should only be callable by the owner of the contract.",
            "params": {
              "_beneficiary": "The address to which the Ether should be sent."
            }
          },
          "withdrawToken(address,address)": {
            "details": "This function reverts with a 'NothingToWithdraw' error if there are no tokens to withdraw.",
            "params": {
              "_beneficiary": "The address to which the tokens will be sent.",
              "_token": "The contract address of the ERC20 token to be withdrawn."
            }
          }
        },
        "title": "- A simple messenger contract for sending/receiving string data across chains.",
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_273": {
              "entryPoint": null,
              "id": 273,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_331": {
              "entryPoint": null,
              "id": 331,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_38": {
              "entryPoint": null,
              "id": 38,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_452": {
              "entryPoint": null,
              "id": 452,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_7492": {
              "entryPoint": null,
              "id": 7492,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_transferOwnership_415": {
              "entryPoint": 606,
              "id": 415,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "abi_decode_t_address_fromMemory": {
              "entryPoint": 984,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_addresst_address_fromMemory": {
              "entryPoint": 1005,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_encode_t_address_to_t_address_fromStack": {
              "entryPoint": 1088,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 1188,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 1296,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": 1103,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 1223,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 1331,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "allocate_unbounded": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
              "entryPoint": 1130,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "cleanup_t_address": {
              "entryPoint": 943,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint160": {
              "entryPoint": 911,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
              "entryPoint": 906,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2": {
              "entryPoint": 1147,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2": {
              "entryPoint": 1255,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_address": {
              "entryPoint": 961,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nativeSrc": "0:3991:38",
                "nodeType": "YulBlock",
                "src": "0:3991:38",
                "statements": [
                  {
                    "body": {
                      "nativeSrc": "47:35:38",
                      "nodeType": "YulBlock",
                      "src": "47:35:38",
                      "statements": [
                        {
                          "nativeSrc": "57:19:38",
                          "nodeType": "YulAssignment",
                          "src": "57:19:38",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "73:2:38",
                                "nodeType": "YulLiteral",
                                "src": "73:2:38",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "67:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "67:5:38"
                            },
                            "nativeSrc": "67:9:38",
                            "nodeType": "YulFunctionCall",
                            "src": "67:9:38"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nativeSrc": "57:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "57:6:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "allocate_unbounded",
                    "nativeSrc": "7:75:38",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "40:6:38",
                        "nodeType": "YulTypedName",
                        "src": "40:6:38",
                        "type": ""
                      }
                    ],
                    "src": "7:75:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "177:28:38",
                      "nodeType": "YulBlock",
                      "src": "177:28:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "194:1:38",
                                "nodeType": "YulLiteral",
                                "src": "194:1:38",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "197:1:38",
                                "nodeType": "YulLiteral",
                                "src": "197:1:38",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "187:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "187:6:38"
                            },
                            "nativeSrc": "187:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "187:12:38"
                          },
                          "nativeSrc": "187:12:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "187:12:38"
                        }
                      ]
                    },
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nativeSrc": "88:117:38",
                    "nodeType": "YulFunctionDefinition",
                    "src": "88:117:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "300:28:38",
                      "nodeType": "YulBlock",
                      "src": "300:28:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "317:1:38",
                                "nodeType": "YulLiteral",
                                "src": "317:1:38",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "320:1:38",
                                "nodeType": "YulLiteral",
                                "src": "320:1:38",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "310:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "310:6:38"
                            },
                            "nativeSrc": "310:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "310:12:38"
                          },
                          "nativeSrc": "310:12:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "310:12:38"
                        }
                      ]
                    },
                    "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                    "nativeSrc": "211:117:38",
                    "nodeType": "YulFunctionDefinition",
                    "src": "211:117:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "379:81:38",
                      "nodeType": "YulBlock",
                      "src": "379:81:38",
                      "statements": [
                        {
                          "nativeSrc": "389:65:38",
                          "nodeType": "YulAssignment",
                          "src": "389:65:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "404:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "404:5:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "411:42:38",
                                "nodeType": "YulLiteral",
                                "src": "411:42:38",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "400:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "400:3:38"
                            },
                            "nativeSrc": "400:54:38",
                            "nodeType": "YulFunctionCall",
                            "src": "400:54:38"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "389:7:38",
                              "nodeType": "YulIdentifier",
                              "src": "389:7:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint160",
                    "nativeSrc": "334:126:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "361:5:38",
                        "nodeType": "YulTypedName",
                        "src": "361:5:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "371:7:38",
                        "nodeType": "YulTypedName",
                        "src": "371:7:38",
                        "type": ""
                      }
                    ],
                    "src": "334:126:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "511:51:38",
                      "nodeType": "YulBlock",
                      "src": "511:51:38",
                      "statements": [
                        {
                          "nativeSrc": "521:35:38",
                          "nodeType": "YulAssignment",
                          "src": "521:35:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "550:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "550:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint160",
                              "nativeSrc": "532:17:38",
                              "nodeType": "YulIdentifier",
                              "src": "532:17:38"
                            },
                            "nativeSrc": "532:24:38",
                            "nodeType": "YulFunctionCall",
                            "src": "532:24:38"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "521:7:38",
                              "nodeType": "YulIdentifier",
                              "src": "521:7:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_address",
                    "nativeSrc": "466:96:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "493:5:38",
                        "nodeType": "YulTypedName",
                        "src": "493:5:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "503:7:38",
                        "nodeType": "YulTypedName",
                        "src": "503:7:38",
                        "type": ""
                      }
                    ],
                    "src": "466:96:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "611:79:38",
                      "nodeType": "YulBlock",
                      "src": "611:79:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "668:16:38",
                            "nodeType": "YulBlock",
                            "src": "668:16:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "677:1:38",
                                      "nodeType": "YulLiteral",
                                      "src": "677:1:38",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "680:1:38",
                                      "nodeType": "YulLiteral",
                                      "src": "680:1:38",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "670:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "670:6:38"
                                  },
                                  "nativeSrc": "670:12:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "670:12:38"
                                },
                                "nativeSrc": "670:12:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "670:12:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "634:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "634:5:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "659:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "659:5:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_address",
                                      "nativeSrc": "641:17:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "641:17:38"
                                    },
                                    "nativeSrc": "641:24:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "641:24:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "631:2:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "631:2:38"
                                },
                                "nativeSrc": "631:35:38",
                                "nodeType": "YulFunctionCall",
                                "src": "631:35:38"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "624:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "624:6:38"
                            },
                            "nativeSrc": "624:43:38",
                            "nodeType": "YulFunctionCall",
                            "src": "624:43:38"
                          },
                          "nativeSrc": "621:63:38",
                          "nodeType": "YulIf",
                          "src": "621:63:38"
                        }
                      ]
                    },
                    "name": "validator_revert_t_address",
                    "nativeSrc": "568:122:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "604:5:38",
                        "nodeType": "YulTypedName",
                        "src": "604:5:38",
                        "type": ""
                      }
                    ],
                    "src": "568:122:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "759:80:38",
                      "nodeType": "YulBlock",
                      "src": "759:80:38",
                      "statements": [
                        {
                          "nativeSrc": "769:22:38",
                          "nodeType": "YulAssignment",
                          "src": "769:22:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "784:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "784:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "778:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "778:5:38"
                            },
                            "nativeSrc": "778:13:38",
                            "nodeType": "YulFunctionCall",
                            "src": "778:13:38"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "769:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "769:5:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "827:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "827:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nativeSrc": "800:26:38",
                              "nodeType": "YulIdentifier",
                              "src": "800:26:38"
                            },
                            "nativeSrc": "800:33:38",
                            "nodeType": "YulFunctionCall",
                            "src": "800:33:38"
                          },
                          "nativeSrc": "800:33:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "800:33:38"
                        }
                      ]
                    },
                    "name": "abi_decode_t_address_fromMemory",
                    "nativeSrc": "696:143:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "737:6:38",
                        "nodeType": "YulTypedName",
                        "src": "737:6:38",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "745:3:38",
                        "nodeType": "YulTypedName",
                        "src": "745:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "753:5:38",
                        "nodeType": "YulTypedName",
                        "src": "753:5:38",
                        "type": ""
                      }
                    ],
                    "src": "696:143:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "956:552:38",
                      "nodeType": "YulBlock",
                      "src": "956:552:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "1002:83:38",
                            "nodeType": "YulBlock",
                            "src": "1002:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "1004:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "1004:77:38"
                                  },
                                  "nativeSrc": "1004:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1004:79:38"
                                },
                                "nativeSrc": "1004:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "1004:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "977:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "977:7:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "986:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "986:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "973:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "973:3:38"
                                },
                                "nativeSrc": "973:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "973:23:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "998:2:38",
                                "nodeType": "YulLiteral",
                                "src": "998:2:38",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "969:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "969:3:38"
                            },
                            "nativeSrc": "969:32:38",
                            "nodeType": "YulFunctionCall",
                            "src": "969:32:38"
                          },
                          "nativeSrc": "966:119:38",
                          "nodeType": "YulIf",
                          "src": "966:119:38"
                        },
                        {
                          "nativeSrc": "1095:128:38",
                          "nodeType": "YulBlock",
                          "src": "1095:128:38",
                          "statements": [
                            {
                              "nativeSrc": "1110:15:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "1110:15:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "1124:1:38",
                                "nodeType": "YulLiteral",
                                "src": "1124:1:38",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "1114:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "1114:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "1139:74:38",
                              "nodeType": "YulAssignment",
                              "src": "1139:74:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "1185:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "1185:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "1196:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "1196:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1181:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "1181:3:38"
                                    },
                                    "nativeSrc": "1181:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1181:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "1205:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "1205:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address_fromMemory",
                                  "nativeSrc": "1149:31:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "1149:31:38"
                                },
                                "nativeSrc": "1149:64:38",
                                "nodeType": "YulFunctionCall",
                                "src": "1149:64:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "1139:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "1139:6:38"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1233:129:38",
                          "nodeType": "YulBlock",
                          "src": "1233:129:38",
                          "statements": [
                            {
                              "nativeSrc": "1248:16:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "1248:16:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "1262:2:38",
                                "nodeType": "YulLiteral",
                                "src": "1262:2:38",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "1252:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "1252:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "1278:74:38",
                              "nodeType": "YulAssignment",
                              "src": "1278:74:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "1324:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "1324:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "1335:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "1335:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1320:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "1320:3:38"
                                    },
                                    "nativeSrc": "1320:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1320:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "1344:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "1344:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address_fromMemory",
                                  "nativeSrc": "1288:31:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "1288:31:38"
                                },
                                "nativeSrc": "1288:64:38",
                                "nodeType": "YulFunctionCall",
                                "src": "1288:64:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nativeSrc": "1278:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "1278:6:38"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1372:129:38",
                          "nodeType": "YulBlock",
                          "src": "1372:129:38",
                          "statements": [
                            {
                              "nativeSrc": "1387:16:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "1387:16:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "1401:2:38",
                                "nodeType": "YulLiteral",
                                "src": "1401:2:38",
                                "type": "",
                                "value": "64"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "1391:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "1391:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "1417:74:38",
                              "nodeType": "YulAssignment",
                              "src": "1417:74:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "1463:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "1463:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "1474:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "1474:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1459:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "1459:3:38"
                                    },
                                    "nativeSrc": "1459:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1459:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "1483:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "1483:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address_fromMemory",
                                  "nativeSrc": "1427:31:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "1427:31:38"
                                },
                                "nativeSrc": "1427:64:38",
                                "nodeType": "YulFunctionCall",
                                "src": "1427:64:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nativeSrc": "1417:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "1417:6:38"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_address_fromMemory",
                    "nativeSrc": "845:663:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "910:9:38",
                        "nodeType": "YulTypedName",
                        "src": "910:9:38",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "921:7:38",
                        "nodeType": "YulTypedName",
                        "src": "921:7:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "933:6:38",
                        "nodeType": "YulTypedName",
                        "src": "933:6:38",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "941:6:38",
                        "nodeType": "YulTypedName",
                        "src": "941:6:38",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "949:6:38",
                        "nodeType": "YulTypedName",
                        "src": "949:6:38",
                        "type": ""
                      }
                    ],
                    "src": "845:663:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "1579:53:38",
                      "nodeType": "YulBlock",
                      "src": "1579:53:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "1596:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "1596:3:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "1619:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "1619:5:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_address",
                                  "nativeSrc": "1601:17:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "1601:17:38"
                                },
                                "nativeSrc": "1601:24:38",
                                "nodeType": "YulFunctionCall",
                                "src": "1601:24:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1589:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "1589:6:38"
                            },
                            "nativeSrc": "1589:37:38",
                            "nodeType": "YulFunctionCall",
                            "src": "1589:37:38"
                          },
                          "nativeSrc": "1589:37:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "1589:37:38"
                        }
                      ]
                    },
                    "name": "abi_encode_t_address_to_t_address_fromStack",
                    "nativeSrc": "1514:118:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "1567:5:38",
                        "nodeType": "YulTypedName",
                        "src": "1567:5:38",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "1574:3:38",
                        "nodeType": "YulTypedName",
                        "src": "1574:3:38",
                        "type": ""
                      }
                    ],
                    "src": "1514:118:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "1736:124:38",
                      "nodeType": "YulBlock",
                      "src": "1736:124:38",
                      "statements": [
                        {
                          "nativeSrc": "1746:26:38",
                          "nodeType": "YulAssignment",
                          "src": "1746:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1758:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "1758:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1769:2:38",
                                "nodeType": "YulLiteral",
                                "src": "1769:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "1754:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "1754:3:38"
                            },
                            "nativeSrc": "1754:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "1754:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "1746:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "1746:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "1826:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "1826:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1839:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "1839:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1850:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "1850:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1835:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "1835:3:38"
                                },
                                "nativeSrc": "1835:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "1835:17:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nativeSrc": "1782:43:38",
                              "nodeType": "YulIdentifier",
                              "src": "1782:43:38"
                            },
                            "nativeSrc": "1782:71:38",
                            "nodeType": "YulFunctionCall",
                            "src": "1782:71:38"
                          },
                          "nativeSrc": "1782:71:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "1782:71:38"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nativeSrc": "1638:222:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "1708:9:38",
                        "nodeType": "YulTypedName",
                        "src": "1708:9:38",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "1720:6:38",
                        "nodeType": "YulTypedName",
                        "src": "1720:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "1731:4:38",
                        "nodeType": "YulTypedName",
                        "src": "1731:4:38",
                        "type": ""
                      }
                    ],
                    "src": "1638:222:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "1962:73:38",
                      "nodeType": "YulBlock",
                      "src": "1962:73:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "1979:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "1979:3:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "1984:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "1984:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1972:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "1972:6:38"
                            },
                            "nativeSrc": "1972:19:38",
                            "nodeType": "YulFunctionCall",
                            "src": "1972:19:38"
                          },
                          "nativeSrc": "1972:19:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "1972:19:38"
                        },
                        {
                          "nativeSrc": "2000:29:38",
                          "nodeType": "YulAssignment",
                          "src": "2000:29:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "2019:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "2019:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2024:4:38",
                                "nodeType": "YulLiteral",
                                "src": "2024:4:38",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2015:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "2015:3:38"
                            },
                            "nativeSrc": "2015:14:38",
                            "nodeType": "YulFunctionCall",
                            "src": "2015:14:38"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nativeSrc": "2000:11:38",
                              "nodeType": "YulIdentifier",
                              "src": "2000:11:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                    "nativeSrc": "1866:169:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "1934:3:38",
                        "nodeType": "YulTypedName",
                        "src": "1934:3:38",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "1939:6:38",
                        "nodeType": "YulTypedName",
                        "src": "1939:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nativeSrc": "1950:11:38",
                        "nodeType": "YulTypedName",
                        "src": "1950:11:38",
                        "type": ""
                      }
                    ],
                    "src": "1866:169:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "2147:68:38",
                      "nodeType": "YulBlock",
                      "src": "2147:68:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "2169:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "2169:6:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2177:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "2177:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2165:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "2165:3:38"
                                },
                                "nativeSrc": "2165:14:38",
                                "nodeType": "YulFunctionCall",
                                "src": "2165:14:38"
                              },
                              {
                                "hexValue": "43616e6e6f7420736574206f776e657220746f207a65726f",
                                "kind": "string",
                                "nativeSrc": "2181:26:38",
                                "nodeType": "YulLiteral",
                                "src": "2181:26:38",
                                "type": "",
                                "value": "Cannot set owner to zero"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2158:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "2158:6:38"
                            },
                            "nativeSrc": "2158:50:38",
                            "nodeType": "YulFunctionCall",
                            "src": "2158:50:38"
                          },
                          "nativeSrc": "2158:50:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "2158:50:38"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2",
                    "nativeSrc": "2041:174:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "2139:6:38",
                        "nodeType": "YulTypedName",
                        "src": "2139:6:38",
                        "type": ""
                      }
                    ],
                    "src": "2041:174:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "2367:220:38",
                      "nodeType": "YulBlock",
                      "src": "2367:220:38",
                      "statements": [
                        {
                          "nativeSrc": "2377:74:38",
                          "nodeType": "YulAssignment",
                          "src": "2377:74:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "2443:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "2443:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2448:2:38",
                                "nodeType": "YulLiteral",
                                "src": "2448:2:38",
                                "type": "",
                                "value": "24"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nativeSrc": "2384:58:38",
                              "nodeType": "YulIdentifier",
                              "src": "2384:58:38"
                            },
                            "nativeSrc": "2384:67:38",
                            "nodeType": "YulFunctionCall",
                            "src": "2384:67:38"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "2377:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "2377:3:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "2549:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "2549:3:38"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2",
                              "nativeSrc": "2460:88:38",
                              "nodeType": "YulIdentifier",
                              "src": "2460:88:38"
                            },
                            "nativeSrc": "2460:93:38",
                            "nodeType": "YulFunctionCall",
                            "src": "2460:93:38"
                          },
                          "nativeSrc": "2460:93:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "2460:93:38"
                        },
                        {
                          "nativeSrc": "2562:19:38",
                          "nodeType": "YulAssignment",
                          "src": "2562:19:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "2573:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "2573:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2578:2:38",
                                "nodeType": "YulLiteral",
                                "src": "2578:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2569:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "2569:3:38"
                            },
                            "nativeSrc": "2569:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "2569:12:38"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "2562:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "2562:3:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack",
                    "nativeSrc": "2221:366:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "2355:3:38",
                        "nodeType": "YulTypedName",
                        "src": "2355:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "2363:3:38",
                        "nodeType": "YulTypedName",
                        "src": "2363:3:38",
                        "type": ""
                      }
                    ],
                    "src": "2221:366:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "2764:248:38",
                      "nodeType": "YulBlock",
                      "src": "2764:248:38",
                      "statements": [
                        {
                          "nativeSrc": "2774:26:38",
                          "nodeType": "YulAssignment",
                          "src": "2774:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2786:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "2786:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2797:2:38",
                                "nodeType": "YulLiteral",
                                "src": "2797:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2782:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "2782:3:38"
                            },
                            "nativeSrc": "2782:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "2782:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "2774:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "2774:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2821:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "2821:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2832:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "2832:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2817:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "2817:3:38"
                                },
                                "nativeSrc": "2817:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "2817:17:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nativeSrc": "2840:4:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "2840:4:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2846:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "2846:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "2836:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "2836:3:38"
                                },
                                "nativeSrc": "2836:20:38",
                                "nodeType": "YulFunctionCall",
                                "src": "2836:20:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2810:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "2810:6:38"
                            },
                            "nativeSrc": "2810:47:38",
                            "nodeType": "YulFunctionCall",
                            "src": "2810:47:38"
                          },
                          "nativeSrc": "2810:47:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "2810:47:38"
                        },
                        {
                          "nativeSrc": "2866:139:38",
                          "nodeType": "YulAssignment",
                          "src": "2866:139:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nativeSrc": "3000:4:38",
                                "nodeType": "YulIdentifier",
                                "src": "3000:4:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack",
                              "nativeSrc": "2874:124:38",
                              "nodeType": "YulIdentifier",
                              "src": "2874:124:38"
                            },
                            "nativeSrc": "2874:131:38",
                            "nodeType": "YulFunctionCall",
                            "src": "2874:131:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "2866:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "2866:4:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed",
                    "nativeSrc": "2593:419:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "2744:9:38",
                        "nodeType": "YulTypedName",
                        "src": "2744:9:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "2759:4:38",
                        "nodeType": "YulTypedName",
                        "src": "2759:4:38",
                        "type": ""
                      }
                    ],
                    "src": "2593:419:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "3124:67:38",
                      "nodeType": "YulBlock",
                      "src": "3124:67:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "3146:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "3146:6:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3154:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "3154:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3142:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "3142:3:38"
                                },
                                "nativeSrc": "3142:14:38",
                                "nodeType": "YulFunctionCall",
                                "src": "3142:14:38"
                              },
                              {
                                "hexValue": "43616e6e6f74207472616e7366657220746f2073656c66",
                                "kind": "string",
                                "nativeSrc": "3158:25:38",
                                "nodeType": "YulLiteral",
                                "src": "3158:25:38",
                                "type": "",
                                "value": "Cannot transfer to self"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3135:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "3135:6:38"
                            },
                            "nativeSrc": "3135:49:38",
                            "nodeType": "YulFunctionCall",
                            "src": "3135:49:38"
                          },
                          "nativeSrc": "3135:49:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "3135:49:38"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2",
                    "nativeSrc": "3018:173:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "3116:6:38",
                        "nodeType": "YulTypedName",
                        "src": "3116:6:38",
                        "type": ""
                      }
                    ],
                    "src": "3018:173:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "3343:220:38",
                      "nodeType": "YulBlock",
                      "src": "3343:220:38",
                      "statements": [
                        {
                          "nativeSrc": "3353:74:38",
                          "nodeType": "YulAssignment",
                          "src": "3353:74:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "3419:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "3419:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3424:2:38",
                                "nodeType": "YulLiteral",
                                "src": "3424:2:38",
                                "type": "",
                                "value": "23"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nativeSrc": "3360:58:38",
                              "nodeType": "YulIdentifier",
                              "src": "3360:58:38"
                            },
                            "nativeSrc": "3360:67:38",
                            "nodeType": "YulFunctionCall",
                            "src": "3360:67:38"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "3353:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "3353:3:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "3525:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "3525:3:38"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2",
                              "nativeSrc": "3436:88:38",
                              "nodeType": "YulIdentifier",
                              "src": "3436:88:38"
                            },
                            "nativeSrc": "3436:93:38",
                            "nodeType": "YulFunctionCall",
                            "src": "3436:93:38"
                          },
                          "nativeSrc": "3436:93:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "3436:93:38"
                        },
                        {
                          "nativeSrc": "3538:19:38",
                          "nodeType": "YulAssignment",
                          "src": "3538:19:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "3549:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "3549:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3554:2:38",
                                "nodeType": "YulLiteral",
                                "src": "3554:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "3545:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "3545:3:38"
                            },
                            "nativeSrc": "3545:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "3545:12:38"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "3538:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "3538:3:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack",
                    "nativeSrc": "3197:366:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "3331:3:38",
                        "nodeType": "YulTypedName",
                        "src": "3331:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "3339:3:38",
                        "nodeType": "YulTypedName",
                        "src": "3339:3:38",
                        "type": ""
                      }
                    ],
                    "src": "3197:366:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "3740:248:38",
                      "nodeType": "YulBlock",
                      "src": "3740:248:38",
                      "statements": [
                        {
                          "nativeSrc": "3750:26:38",
                          "nodeType": "YulAssignment",
                          "src": "3750:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "3762:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "3762:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3773:2:38",
                                "nodeType": "YulLiteral",
                                "src": "3773:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "3758:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "3758:3:38"
                            },
                            "nativeSrc": "3758:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "3758:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "3750:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "3750:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3797:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "3797:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3808:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "3808:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3793:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "3793:3:38"
                                },
                                "nativeSrc": "3793:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "3793:17:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nativeSrc": "3816:4:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "3816:4:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3822:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "3822:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "3812:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "3812:3:38"
                                },
                                "nativeSrc": "3812:20:38",
                                "nodeType": "YulFunctionCall",
                                "src": "3812:20:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3786:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "3786:6:38"
                            },
                            "nativeSrc": "3786:47:38",
                            "nodeType": "YulFunctionCall",
                            "src": "3786:47:38"
                          },
                          "nativeSrc": "3786:47:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "3786:47:38"
                        },
                        {
                          "nativeSrc": "3842:139:38",
                          "nodeType": "YulAssignment",
                          "src": "3842:139:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nativeSrc": "3976:4:38",
                                "nodeType": "YulIdentifier",
                                "src": "3976:4:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack",
                              "nativeSrc": "3850:124:38",
                              "nodeType": "YulIdentifier",
                              "src": "3850:124:38"
                            },
                            "nativeSrc": "3850:131:38",
                            "nodeType": "YulFunctionCall",
                            "src": "3850:131:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "3842:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "3842:4:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed",
                    "nativeSrc": "3569:419:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "3720:9:38",
                        "nodeType": "YulTypedName",
                        "src": "3720:9:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "3735:4:38",
                        "nodeType": "YulTypedName",
                        "src": "3735:4:38",
                        "type": ""
                      }
                    ],
                    "src": "3569:419:38"
                  }
                ]
              },
              "contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot set owner to zero\")\n\n    }\n\n    function abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7dca76038b520c88e70cf97566ce5d47f70366a14444d2decb0ce7bf6a19e7c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot transfer to self\")\n\n    }\n\n    function abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n",
              "id": 38,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x2FF0 CODESIZE SUB DUP1 PUSH2 0x2FF0 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x3ED JUMP JUMPDEST CALLER DUP1 PUSH1 0x0 DUP6 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xA9 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0xD7F7333400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA0 SWAP2 SWAP1 PUSH2 0x44F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x14D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x144 SWAP1 PUSH2 0x4C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1D1 JUMPI PUSH2 0x1D0 DUP2 PUSH2 0x25E PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST JUMPDEST POP POP POP DUP1 PUSH1 0x8 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 0x7 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP PUSH2 0x553 JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x2CC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2C3 SWAP1 PUSH2 0x533 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3BA DUP3 PUSH2 0x38F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3CA DUP2 PUSH2 0x3AF JUMP JUMPDEST DUP2 EQ PUSH2 0x3D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3E7 DUP2 PUSH2 0x3C1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x406 JUMPI PUSH2 0x405 PUSH2 0x38A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x414 DUP7 DUP3 DUP8 ADD PUSH2 0x3D8 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x425 DUP7 DUP3 DUP8 ADD PUSH2 0x3D8 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x436 DUP7 DUP3 DUP8 ADD PUSH2 0x3D8 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x449 DUP2 PUSH2 0x3AF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x464 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x440 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x43616E6E6F7420736574206F776E657220746F207A65726F0000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B1 PUSH1 0x18 DUP4 PUSH2 0x46A JUMP JUMPDEST SWAP2 POP PUSH2 0x4BC DUP3 PUSH2 0x47B JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x4E0 DUP2 PUSH2 0x4A4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x51D PUSH1 0x17 DUP4 PUSH2 0x46A JUMP JUMPDEST SWAP2 POP PUSH2 0x528 DUP3 PUSH2 0x4E7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x54C DUP2 PUSH2 0x510 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x2A82 PUSH2 0x56E PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0xBE1 ADD MSTORE PUSH2 0x2A82 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x102 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7A6EE0CD GT PUSH2 0x95 JUMPI DUP1 PUSH4 0x9C046B1B GT PUSH2 0x64 JUMPI DUP1 PUSH4 0x9C046B1B EQ PUSH2 0x33D JUMPI DUP1 PUSH4 0xB0F479A1 EQ PUSH2 0x368 JUMPI DUP1 PUSH4 0xDB04FA49 EQ PUSH2 0x393 JUMPI DUP1 PUSH4 0xEAB5B02C EQ PUSH2 0x3BC JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3E5 JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x7A6EE0CD EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x85572FFB EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0x96D3B83D EQ PUSH2 0x314 JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x51CFF8D9 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x51CFF8D9 EQ PUSH2 0x1DD JUMPI DUP1 PUSH4 0x6159ADA1 EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x75C67C66 EQ PUSH2 0x243 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x280 JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x263596A5 EQ PUSH2 0x14B JUMPI DUP1 PUSH4 0x3AEAC4E1 EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x4030D521 EQ PUSH2 0x1A0 JUMPI PUSH2 0x109 JUMP JUMPDEST CALLDATASIZE PUSH2 0x109 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x135 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x130 SWAP2 SWAP1 PUSH2 0x18DB JUMP JUMPDEST PUSH2 0x40E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x142 SWAP2 SWAP1 PUSH2 0x1923 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x157 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x4E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16E SWAP3 SWAP2 SWAP1 PUSH2 0x19E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x183 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x199 SWAP2 SWAP1 PUSH2 0x1A75 JUMP JUMPDEST PUSH2 0x57D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C2 SWAP2 SWAP1 PUSH2 0x1AF5 JUMP JUMPDEST PUSH2 0x66D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D4 SWAP2 SWAP1 PUSH2 0x1923 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FF SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST PUSH2 0x68D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x228 SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST PUSH2 0x78B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23A SWAP2 SWAP1 PUSH2 0x1923 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x265 SWAP2 SWAP1 PUSH2 0x1AF5 JUMP JUMPDEST PUSH2 0x7AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x277 SWAP2 SWAP1 PUSH2 0x1923 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x295 PUSH2 0x7CB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B9 SWAP2 SWAP1 PUSH2 0x1B85 JUMP JUMPDEST PUSH2 0x960 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E2 SWAP2 SWAP1 PUSH2 0x1C10 JUMP JUMPDEST PUSH2 0xAB7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x336 SWAP2 SWAP1 PUSH2 0x1CAF JUMP JUMPDEST PUSH2 0xB6C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x352 PUSH2 0xBB7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x35F SWAP2 SWAP1 PUSH2 0x1D4E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x374 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37D PUSH2 0xBDD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x38A SWAP2 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3B5 SWAP2 SWAP1 PUSH2 0x1CAF JUMP JUMPDEST PUSH2 0xC05 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3DE SWAP2 SWAP1 PUSH2 0x1D69 JUMP JUMPDEST PUSH2 0xC50 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x40C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x407 SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST PUSH2 0xCB3 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x85572FFB00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x4D9 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x2 SLOAD PUSH1 0x3 DUP1 DUP1 SLOAD PUSH2 0x4F5 SWAP1 PUSH2 0x1DD8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x521 SWAP1 PUSH2 0x1DD8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x56E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x543 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x56E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x551 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x585 PUSH2 0xCC7 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5C0 SWAP2 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x601 SWAP2 SWAP1 PUSH2 0x1E1E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SUB PUSH2 0x63D JUMPI PUSH1 0x40 MLOAD PUSH32 0xD0D04F6000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x668 DUP4 DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD57 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x695 PUSH2 0xCC7 JUMP JUMPDEST PUSH1 0x0 SELFBALANCE SWAP1 POP PUSH1 0x0 DUP2 SUB PUSH2 0x6D4 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD0D04F6000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0x6FA SWAP1 PUSH2 0x1E7C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x737 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x73C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x786 JUMPI CALLER DUP4 DUP4 PUSH1 0x40 MLOAD PUSH32 0x9D11F56300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x77D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1EA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x85B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x852 SWAP1 PUSH2 0x1F23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP8 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9BF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1EA0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42966C68 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA4C SWAP2 SWAP1 PUSH2 0x1F43 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA7A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA93 SWAP3 SWAP2 SWAP1 PUSH2 0x1F5E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0xAAF DUP4 DUP4 DUP4 PUSH2 0xDDD JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xABF PUSH2 0xBDD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB2E JUMPI CALLER PUSH1 0x40 MLOAD PUSH32 0xD7F7333400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB25 SWAP2 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB40 DUP2 PUSH2 0xB3B SWAP1 PUSH2 0x22EA JUMP JUMPDEST PUSH2 0x121E JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB74 PUSH2 0xCC7 JUMP JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC0D PUSH2 0xCC7 JUMP JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0xC58 PUSH2 0xCC7 JUMP JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0xCBB PUSH2 0xCC7 JUMP JUMPDEST PUSH2 0xCC4 DUP2 PUSH2 0x12E1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD55 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD4C SWAP1 PUSH2 0x2349 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0xDD8 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xD76 SWAP3 SWAP2 SWAP1 PUSH2 0x2369 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x140D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDE7 PUSH2 0xCC7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE16 DUP5 DUP5 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x14D4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB0F479A1 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE65 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE89 SWAP2 SWAP1 PUSH2 0x23A7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x20487DED DUP9 DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEC8 SWAP3 SWAP2 SWAP1 PUSH2 0x25BF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEE5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF09 SWAP2 SWAP1 PUSH2 0x1E1E JUMP JUMPDEST SWAP1 POP PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF66 SWAP2 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF83 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFA7 SWAP2 SWAP1 PUSH2 0x1E1E JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x1088 JUMPI PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1009 SWAP2 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1026 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x104A SWAP2 SWAP1 PUSH2 0x1E1E JUMP JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8F0F420600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x107F SWAP3 SWAP2 SWAP1 PUSH2 0x25EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x95EA7B3 DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10E5 SWAP3 SWAP2 SWAP1 PUSH2 0x2369 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1104 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1128 SWAP2 SWAP1 PUSH2 0x262D JUMP JUMPDEST POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x96F4E9F9 DUP9 DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1164 SWAP3 SWAP2 SWAP1 PUSH2 0x25BF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1183 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11A7 SWAP2 SWAP1 PUSH2 0x266F JUMP JUMPDEST SWAP4 POP DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP5 PUSH32 0xC152007FFFDD6A8D0653F1B985D331733BBDCB8DBCE0517251CA024A07FFDD90 DUP9 DUP9 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x40 MLOAD PUSH2 0x120C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1238 SWAP2 SWAP1 PUSH2 0x2782 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x30B2C596 DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A9 SWAP3 SWAP2 SWAP1 PUSH2 0x2369 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12D7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x134F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1346 SWAP1 PUSH2 0x27FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x146F DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x15AE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x14CF JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x148F SWAP2 SWAP1 PUSH2 0x262D JUMP JUMPDEST PUSH2 0x14CE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14C5 SWAP1 PUSH2 0x288D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x14DC PUSH2 0x17FA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x14F8 SWAP2 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x152D JUMPI PUSH2 0x152C PUSH2 0x1F8C JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1566 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x1553 PUSH2 0x183F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x154B JUMPI SWAP1 POP JUMPDEST POP DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15A2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH3 0x30D40 DUP2 MSTORE POP PUSH2 0x15C6 JUMP JUMPDEST DUP2 MSTORE POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x15BD DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1645 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x97A657C9 PUSH1 0xE0 SHL DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x15E1 SWAP2 SWAP1 PUSH2 0x28C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x168A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1681 SWAP1 PUSH2 0x2956 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x16B3 SWAP2 SWAP1 PUSH2 0x29A7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x16F0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x16F5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1706 DUP8 DUP4 DUP4 DUP8 PUSH2 0x1712 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1774 JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x176C JUMPI PUSH2 0x172C DUP6 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x176B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1762 SWAP1 PUSH2 0x2A0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x177F JUMP JUMPDEST PUSH2 0x177E DUP4 DUP4 PUSH2 0x17AA JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x17BD JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17F1 SWAP2 SWAP1 PUSH2 0x2A2A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18B8 DUP2 PUSH2 0x1883 JUMP JUMPDEST DUP2 EQ PUSH2 0x18C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x18D5 DUP2 PUSH2 0x18AF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18F1 JUMPI PUSH2 0x18F0 PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18FF DUP5 DUP3 DUP6 ADD PUSH2 0x18C6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x191D DUP2 PUSH2 0x1908 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1938 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1914 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1951 DUP2 PUSH2 0x193E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1991 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1976 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B9 DUP3 PUSH2 0x1957 JUMP JUMPDEST PUSH2 0x19C3 DUP2 DUP6 PUSH2 0x1962 JUMP JUMPDEST SWAP4 POP PUSH2 0x19D3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1973 JUMP JUMPDEST PUSH2 0x19DC DUP2 PUSH2 0x199D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x19FC PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1948 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1A0E DUP2 DUP5 PUSH2 0x19AE JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A42 DUP3 PUSH2 0x1A17 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A52 DUP2 PUSH2 0x1A37 JUMP JUMPDEST DUP2 EQ PUSH2 0x1A5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1A6F DUP2 PUSH2 0x1A49 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A8C JUMPI PUSH2 0x1A8B PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A9A DUP6 DUP3 DUP7 ADD PUSH2 0x1A60 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1AAB DUP6 DUP3 DUP7 ADD PUSH2 0x1A60 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AD2 DUP2 PUSH2 0x1AB5 JUMP JUMPDEST DUP2 EQ PUSH2 0x1ADD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1AEF DUP2 PUSH2 0x1AC9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B0B JUMPI PUSH2 0x1B0A PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B19 DUP5 DUP3 DUP6 ADD PUSH2 0x1AE0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B38 JUMPI PUSH2 0x1B37 PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B46 DUP5 DUP3 DUP6 ADD PUSH2 0x1A60 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B62 DUP2 PUSH2 0x1B4F JUMP JUMPDEST DUP2 EQ PUSH2 0x1B6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1B7F DUP2 PUSH2 0x1B59 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1B9F JUMPI PUSH2 0x1B9E PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1BAD DUP8 DUP3 DUP9 ADD PUSH2 0x1B70 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1BBE DUP8 DUP3 DUP9 ADD PUSH2 0x1A60 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1BCF DUP8 DUP3 DUP9 ADD PUSH2 0x1AE0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x1BE0 DUP8 DUP3 DUP9 ADD PUSH2 0x1A60 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C07 JUMPI PUSH2 0x1C06 PUSH2 0x1BEC JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C26 JUMPI PUSH2 0x1C25 PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C44 JUMPI PUSH2 0x1C43 PUSH2 0x187E JUMP JUMPDEST JUMPDEST PUSH2 0x1C50 DUP5 DUP3 DUP6 ADD PUSH2 0x1BF1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1C62 DUP2 PUSH2 0x1A37 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1C7D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1C59 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1C8C DUP2 PUSH2 0x1908 JUMP JUMPDEST DUP2 EQ PUSH2 0x1C97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1CA9 DUP2 PUSH2 0x1C83 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CC6 JUMPI PUSH2 0x1CC5 PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1CD4 DUP6 DUP3 DUP7 ADD PUSH2 0x1AE0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1CE5 DUP6 DUP3 DUP7 ADD PUSH2 0x1C9A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D14 PUSH2 0x1D0F PUSH2 0x1D0A DUP5 PUSH2 0x1A17 JUMP JUMPDEST PUSH2 0x1CEF JUMP JUMPDEST PUSH2 0x1A17 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D26 DUP3 PUSH2 0x1CF9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D38 DUP3 PUSH2 0x1D1B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1D48 DUP2 PUSH2 0x1D2D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1D63 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1D3F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D80 JUMPI PUSH2 0x1D7F PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1D8E DUP6 DUP3 DUP7 ADD PUSH2 0x1A60 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1D9F DUP6 DUP3 DUP7 ADD PUSH2 0x1C9A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1DF0 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1E03 JUMPI PUSH2 0x1E02 PUSH2 0x1DA9 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1E18 DUP2 PUSH2 0x1B59 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E34 JUMPI PUSH2 0x1E33 PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1E42 DUP5 DUP3 DUP6 ADD PUSH2 0x1E09 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E66 PUSH1 0x0 DUP4 PUSH2 0x1E4B JUMP JUMPDEST SWAP2 POP PUSH2 0x1E71 DUP3 PUSH2 0x1E56 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E87 DUP3 PUSH2 0x1E59 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E9A DUP2 PUSH2 0x1B4F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1EB5 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1C59 JUMP JUMPDEST PUSH2 0x1EC2 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1C59 JUMP JUMPDEST PUSH2 0x1ECF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1E91 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F0D PUSH1 0x16 DUP4 PUSH2 0x1962 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F18 DUP3 PUSH2 0x1ED7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F3C DUP2 PUSH2 0x1F00 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1F58 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1E91 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1F73 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1E91 JUMP JUMPDEST PUSH2 0x1F80 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1C59 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1FC4 DUP3 PUSH2 0x199D JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1FE3 JUMPI PUSH2 0x1FE2 PUSH2 0x1F8C JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FF6 PUSH2 0x186F JUMP JUMPDEST SWAP1 POP PUSH2 0x2002 DUP3 DUP3 PUSH2 0x1FBB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2015 DUP2 PUSH2 0x193E JUMP JUMPDEST DUP2 EQ PUSH2 0x2020 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2032 DUP2 PUSH2 0x200C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x205D JUMPI PUSH2 0x205C PUSH2 0x1F8C JUMP JUMPDEST JUMPDEST PUSH2 0x2066 DUP3 PUSH2 0x199D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2095 PUSH2 0x2090 DUP5 PUSH2 0x2042 JUMP JUMPDEST PUSH2 0x1FEC JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x20B1 JUMPI PUSH2 0x20B0 PUSH2 0x203D JUMP JUMPDEST JUMPDEST PUSH2 0x20BC DUP5 DUP3 DUP6 PUSH2 0x2073 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x20D9 JUMPI PUSH2 0x20D8 PUSH2 0x2038 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x20E9 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2082 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x210D JUMPI PUSH2 0x210C PUSH2 0x1F8C JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2139 JUMPI PUSH2 0x2138 PUSH2 0x1F87 JUMP JUMPDEST JUMPDEST PUSH2 0x2143 PUSH1 0x40 PUSH2 0x1FEC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2153 DUP5 DUP3 DUP6 ADD PUSH2 0x1A60 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x2167 DUP5 DUP3 DUP6 ADD PUSH2 0x1B70 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2186 PUSH2 0x2181 DUP5 PUSH2 0x20F2 JUMP JUMPDEST PUSH2 0x1FEC JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x21A9 JUMPI PUSH2 0x21A8 PUSH2 0x211E JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x21D2 JUMPI DUP1 PUSH2 0x21BE DUP9 DUP3 PUSH2 0x2123 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x21AB JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x21F1 JUMPI PUSH2 0x21F0 PUSH2 0x2038 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2201 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2173 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2220 JUMPI PUSH2 0x221F PUSH2 0x1F87 JUMP JUMPDEST JUMPDEST PUSH2 0x222A PUSH1 0xA0 PUSH2 0x1FEC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x223A DUP5 DUP3 DUP6 ADD PUSH2 0x2023 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x224E DUP5 DUP3 DUP6 ADD PUSH2 0x1AE0 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2272 JUMPI PUSH2 0x2271 PUSH2 0x2007 JUMP JUMPDEST JUMPDEST PUSH2 0x227E DUP5 DUP3 DUP6 ADD PUSH2 0x20C4 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x22A2 JUMPI PUSH2 0x22A1 PUSH2 0x2007 JUMP JUMPDEST JUMPDEST PUSH2 0x22AE DUP5 DUP3 DUP6 ADD PUSH2 0x20C4 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x22D2 JUMPI PUSH2 0x22D1 PUSH2 0x2007 JUMP JUMPDEST JUMPDEST PUSH2 0x22DE DUP5 DUP3 DUP6 ADD PUSH2 0x21DC JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22F6 CALLDATASIZE DUP4 PUSH2 0x220A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2333 PUSH1 0x16 DUP4 PUSH2 0x1962 JUMP JUMPDEST SWAP2 POP PUSH2 0x233E DUP3 PUSH2 0x22FD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2362 DUP2 PUSH2 0x2326 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x237E PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1C59 JUMP JUMPDEST PUSH2 0x238B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1E91 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x23A1 DUP2 PUSH2 0x1A49 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23BD JUMPI PUSH2 0x23BC PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x23CB DUP5 DUP3 DUP6 ADD PUSH2 0x2392 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x23DD DUP2 PUSH2 0x1AB5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x240A DUP3 PUSH2 0x23E3 JUMP JUMPDEST PUSH2 0x2414 DUP2 DUP6 PUSH2 0x23EE JUMP JUMPDEST SWAP4 POP PUSH2 0x2424 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1973 JUMP JUMPDEST PUSH2 0x242D DUP2 PUSH2 0x199D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x246D DUP2 PUSH2 0x1A37 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x247C DUP2 PUSH2 0x1B4F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2498 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2464 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x24AB PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2473 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24BD DUP4 DUP4 PUSH2 0x2482 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24E1 DUP3 PUSH2 0x2438 JUMP JUMPDEST PUSH2 0x24EB DUP2 DUP6 PUSH2 0x2443 JUMP JUMPDEST SWAP4 POP PUSH2 0x24F6 DUP4 PUSH2 0x2454 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2527 JUMPI DUP2 MLOAD PUSH2 0x250E DUP9 DUP3 PUSH2 0x24B1 JUMP JUMPDEST SWAP8 POP PUSH2 0x2519 DUP4 PUSH2 0x24C9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x24FA JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x0 DUP7 ADD MSTORE PUSH2 0x2551 DUP3 DUP3 PUSH2 0x23FF JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x256B DUP3 DUP3 PUSH2 0x23FF JUMP JUMPDEST SWAP2 POP POP PUSH1 0x40 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x2585 DUP3 DUP3 PUSH2 0x24D6 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x259A PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x2464 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x80 DUP7 ADD MSTORE PUSH2 0x25B2 DUP3 DUP3 PUSH2 0x23FF JUMP JUMPDEST SWAP2 POP POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x25D4 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x23D4 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x25E6 DUP2 DUP5 PUSH2 0x2534 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2604 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1E91 JUMP JUMPDEST PUSH2 0x2611 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1E91 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2627 DUP2 PUSH2 0x1C83 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2643 JUMPI PUSH2 0x2642 PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2651 DUP5 DUP3 DUP6 ADD PUSH2 0x2618 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2669 DUP2 PUSH2 0x200C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2685 JUMPI PUSH2 0x2684 PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2693 DUP5 DUP3 DUP6 ADD PUSH2 0x265A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26B8 DUP3 PUSH2 0x23E3 JUMP JUMPDEST PUSH2 0x26C2 DUP2 DUP6 PUSH2 0x269C JUMP JUMPDEST SWAP4 POP PUSH2 0x26D2 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1973 JUMP JUMPDEST PUSH2 0x26DB DUP2 PUSH2 0x199D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x26FB PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1C59 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x270D DUP2 DUP7 PUSH2 0x26AD JUMP JUMPDEST SWAP1 POP PUSH2 0x271C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1C59 JUMP JUMPDEST PUSH2 0x2729 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1E91 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2748 JUMPI PUSH2 0x2747 PUSH2 0x1F87 JUMP JUMPDEST JUMPDEST PUSH2 0x2752 PUSH1 0x40 PUSH2 0x1FEC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2762 DUP5 DUP3 DUP6 ADD PUSH2 0x1E09 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x2776 DUP5 DUP3 DUP6 ADD PUSH2 0x2392 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2798 JUMPI PUSH2 0x2797 PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x27A6 DUP5 DUP3 DUP6 ADD PUSH2 0x2732 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27E5 PUSH1 0x17 DUP4 PUSH2 0x1962 JUMP JUMPDEST SWAP2 POP PUSH2 0x27F0 DUP3 PUSH2 0x27AF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2814 DUP2 PUSH2 0x27D8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2877 PUSH1 0x2A DUP4 PUSH2 0x1962 JUMP JUMPDEST SWAP2 POP PUSH2 0x2882 DUP3 PUSH2 0x281B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x28A6 DUP2 PUSH2 0x286A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x28C3 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2473 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x28DE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x28AD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2940 PUSH1 0x26 DUP4 PUSH2 0x1962 JUMP JUMPDEST SWAP2 POP PUSH2 0x294B DUP3 PUSH2 0x28E4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x296F DUP2 PUSH2 0x2933 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2981 DUP3 PUSH2 0x23E3 JUMP JUMPDEST PUSH2 0x298B DUP2 DUP6 PUSH2 0x1E4B JUMP JUMPDEST SWAP4 POP PUSH2 0x299B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1973 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29B3 DUP3 DUP5 PUSH2 0x2976 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29F4 PUSH1 0x1D DUP4 PUSH2 0x1962 JUMP JUMPDEST SWAP2 POP PUSH2 0x29FF DUP3 PUSH2 0x29BE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A23 DUP2 PUSH2 0x29E7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A44 DUP2 DUP5 PUSH2 0x19AE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0x28 0xEF GAS PUSH5 0x499B0F2726 0xB2 PUSH11 0x689AF14A2D9A04D1133A08 DUP2 PUSH30 0xD9E83B85223BF864736F6C634300081C0033000000000000000000000000 ",
          "sourceMap": "1023:10491:36:-:0;;;3333:165;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;291:10:6;355:8:4;373:1;3408:7:36;560:1:0;542:20;;:6;:20;;;538:58;;593:1;571:25;;;;;;;;;;;:::i;:::-;;;;;;;;538:58;617:6;602:21;;;;;;;;;;504:124;618:1:5;598:22;;:8;:22;;;590:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;666:8;656:7;;:18;;;;;;;;;;;;;;;;;;708:1;684:26;;:12;:26;;;680:79;;720:32;739:12;720:18;;;:32;;:::i;:::-;680:79;481:282;;298:81:4;3445:8:36::1;3427:4;;:27;;;;;;;;;;;;;;;;;;3485:5;3464:11;;:27;;;;;;;;;;;;;;;;;;3333:165:::0;;;1023:10491;;1536:239:5;1655:10;1649:16;;:2;:16;;;1641:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;1717:2;1700:14;;:19;;;;;;;;;;;;;;;;;;1767:2;1731:39;;1758:7;;;;;;;;;;1731:39;;;;;;;;;;;;1536:239;:::o;88:117:38:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:663::-;933:6;941;949;998:2;986:9;977:7;973:23;969:32;966:119;;;1004:79;;:::i;:::-;966:119;1124:1;1149:64;1205:7;1196:6;1185:9;1181:22;1149:64;:::i;:::-;1139:74;;1095:128;1262:2;1288:64;1344:7;1335:6;1324:9;1320:22;1288:64;:::i;:::-;1278:74;;1233:129;1401:2;1427:64;1483:7;1474:6;1463:9;1459:22;1427:64;:::i;:::-;1417:74;;1372:129;845:663;;;;;:::o;1514:118::-;1601:24;1619:5;1601:24;:::i;:::-;1596:3;1589:37;1514:118;;:::o;1638:222::-;1731:4;1769:2;1758:9;1754:18;1746:26;;1782:71;1850:1;1839:9;1835:17;1826:6;1782:71;:::i;:::-;1638:222;;;;:::o;1866:169::-;1950:11;1984:6;1979:3;1972:19;2024:4;2019:3;2015:14;2000:29;;1866:169;;;;:::o;2041:174::-;2181:26;2177:1;2169:6;2165:14;2158:50;2041:174;:::o;2221:366::-;2363:3;2384:67;2448:2;2443:3;2384:67;:::i;:::-;2377:74;;2460:93;2549:3;2460:93;:::i;:::-;2578:2;2573:3;2569:12;2562:19;;2221:366;;;:::o;2593:419::-;2759:4;2797:2;2786:9;2782:18;2774:26;;2846:9;2840:4;2836:20;2832:1;2821:9;2817:17;2810:47;2874:131;3000:4;2874:131;:::i;:::-;2866:139;;2593:419;;;:::o;3018:173::-;3158:25;3154:1;3146:6;3142:14;3135:49;3018:173;:::o;3197:366::-;3339:3;3360:67;3424:2;3419:3;3360:67;:::i;:::-;3353:74;;3436:93;3525:3;3436:93;:::i;:::-;3554:2;3549:3;3545:12;3538:19;;3197:366;;;:::o;3569:419::-;3735:4;3773:2;3762:9;3758:18;3750:26;;3822:9;3816:4;3812:20;3808:1;3797:9;3793:17;3786:47;3850:131;3976:4;3850:131;:::i;:::-;3842:139;;3569:419;;;:::o;1023:10491:36:-;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@_7778": {
              "entryPoint": null,
              "id": 7778,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_argsToBytes_228": {
              "entryPoint": 5574,
              "id": 228,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_buildCCIPMessage_7760": {
              "entryPoint": 5332,
              "id": 7760,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_callOptionalReturn_863": {
              "entryPoint": 5133,
              "id": 863,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_ccipReceive_7723": {
              "entryPoint": 4638,
              "id": 7723,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_revert_1193": {
              "entryPoint": 6058,
              "id": 1193,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_transferOwnership_415": {
              "entryPoint": 4833,
              "id": 415,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_validateOwnership_428": {
              "entryPoint": 3271,
              "id": 428,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@acceptOwnership_381": {
              "entryPoint": 1995,
              "id": 381,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@allowlistDestinationChain_7509": {
              "entryPoint": 2924,
              "id": 7509,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@allowlistSender_7543": {
              "entryPoint": 3152,
              "id": 7543,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@allowlistSourceChain_7526": {
              "entryPoint": 3077,
              "id": 7526,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@allowlistedDestinationChains_7452": {
              "entryPoint": 1963,
              "id": 7452,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@allowlistedSenders_7460": {
              "entryPoint": 1931,
              "id": 7460,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@allowlistedSourceChains_7456": {
              "entryPoint": 1645,
              "id": 7456,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@burnAndMint_7587": {
              "entryPoint": 2400,
              "id": 7587,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@ccipReceive_77": {
              "entryPoint": 2743,
              "id": 77,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@functionCallWithValue_1018": {
              "entryPoint": 5701,
              "id": 1018,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@functionCall_954": {
              "entryPoint": 5550,
              "id": 954,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@getLastReceivedMessageDetails_7773": {
              "entryPoint": 1248,
              "id": 7773,
              "parameterSlots": 0,
              "returnSlots": 2
            },
            "@getRouter_96": {
              "entryPoint": 3037,
              "id": 96,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@isContract_882": {
              "entryPoint": 6023,
              "id": 882,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@owner_391": {
              "entryPoint": 2883,
              "id": 391,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@safeTransfer_615": {
              "entryPoint": 3415,
              "id": 615,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@sendMessagePayLINK_7686": {
              "entryPoint": 3549,
              "id": 7686,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@supportsInterface_62": {
              "entryPoint": 1038,
              "id": 62,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@transferOwnership_345": {
              "entryPoint": 3251,
              "id": 345,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@verifyCallResultFromTarget_1149": {
              "entryPoint": 5906,
              "id": 1149,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@withdrawToken_7859": {
              "entryPoint": 1405,
              "id": 7859,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@withdraw_7821": {
              "entryPoint": 1677,
              "id": 7821,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@wnft_7466": {
              "entryPoint": 2999,
              "id": 7466,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "abi_decode_available_length_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr": {
              "entryPoint": 8563,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_available_length_t_bytes_memory_ptr": {
              "entryPoint": 8322,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_t_address": {
              "entryPoint": 6752,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_address_fromMemory": {
              "entryPoint": 9106,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr": {
              "entryPoint": 8668,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_bool": {
              "entryPoint": 7322,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_bool_fromMemory": {
              "entryPoint": 9752,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_bytes32": {
              "entryPoint": 8227,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_bytes32_fromMemory": {
              "entryPoint": 9818,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_bytes4": {
              "entryPoint": 6342,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_bytes_memory_ptr": {
              "entryPoint": 8388,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_struct$_Any2EVMMessage_$194_calldata_ptr": {
              "entryPoint": 7153,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_struct$_Any2EVMMessage_$194_memory_ptr": {
              "entryPoint": 8714,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_struct$_EVMTokenAmount_$181_memory_ptr": {
              "entryPoint": 8483,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_struct$_RequestData_$7444_memory_ptr_fromMemory": {
              "entryPoint": 10034,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_uint256": {
              "entryPoint": 7024,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_uint256_fromMemory": {
              "entryPoint": 7689,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_uint64": {
              "entryPoint": 6880,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 6946,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address_fromMemory": {
              "entryPoint": 9127,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_address": {
              "entryPoint": 6773,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_bool": {
              "entryPoint": 7529,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bool_fromMemory": {
              "entryPoint": 9773,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes32_fromMemory": {
              "entryPoint": 9839,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes4": {
              "entryPoint": 6363,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_struct$_Any2EVMMessage_$194_calldata_ptr": {
              "entryPoint": 7184,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_struct$_RequestData_$7444_memory_ptr_fromMemory": {
              "entryPoint": 10114,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256_fromMemory": {
              "entryPoint": 7710,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256t_addresst_uint64t_address": {
              "entryPoint": 7045,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_uint64": {
              "entryPoint": 6901,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint64t_bool": {
              "entryPoint": 7343,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_encodeUpdatedPos_t_struct$_EVMTokenAmount_$181_memory_ptr_to_t_struct$_EVMTokenAmount_$181_memory_ptr": {
              "entryPoint": 9393,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_address_to_t_address": {
              "entryPoint": 9316,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_address_to_t_address_fromStack": {
              "entryPoint": 7257,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr": {
              "entryPoint": 9430,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_bool_to_t_bool_fromStack": {
              "entryPoint": 6420,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_bytes32_to_t_bytes32_fromStack": {
              "entryPoint": 6472,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr": {
              "entryPoint": 9215,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack": {
              "entryPoint": 9901,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
              "entryPoint": 10614,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_contract$_WrappedNFT_$7892_to_t_address_fromStack": {
              "entryPoint": 7487,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 6574,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 7936,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 8998,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10547,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
              "entryPoint": 7769,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10727,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10200,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 10346,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_struct$_EVM2AnyMessage_$207_memory_ptr_to_t_struct$_EVM2AnyMessage_$207_memory_ptr_fromStack": {
              "entryPoint": 9524,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_struct$_EVMExtraArgsV1_$213_memory_ptr_to_t_struct$_EVMExtraArgsV1_$213_memory_ptr_fromStack": {
              "entryPoint": 10413,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_struct$_EVMTokenAmount_$181_memory_ptr_to_t_struct$_EVMTokenAmount_$181_memory_ptr": {
              "entryPoint": 9346,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_uint256_to_t_uint256": {
              "entryPoint": 9331,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_uint256_to_t_uint256_fromStack": {
              "entryPoint": 7825,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_uint64_to_t_uint64_fromStack": {
              "entryPoint": 9172,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 10663,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 7804,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": 7272,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": 7840,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_bytes_memory_ptr_t_address_t_uint256__to_t_address_t_bytes_memory_ptr_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": 9958,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": 9065,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": 6435,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_string_memory_ptr__to_t_bytes32_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 6631,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_WrappedNFT_$7892__to_t_address__fromStack_reversed": {
              "entryPoint": 7502,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 10794,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 7971,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 9033,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 10582,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 10762,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 10235,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 10381,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_struct$_EVMExtraArgsV1_$213_memory_ptr__to_t_struct$_EVMExtraArgsV1_$213_memory_ptr__fromStack_reversed": {
              "entryPoint": 10441,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": 8003,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed": {
              "entryPoint": 8030,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": 9711,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint64_t_struct$_EVM2AnyMessage_$207_memory_ptr__to_t_uint64_t_struct$_EVM2AnyMessage_$207_memory_ptr__fromStack_reversed": {
              "entryPoint": 9663,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "allocate_memory": {
              "entryPoint": 8172,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "allocate_unbounded": {
              "entryPoint": 6255,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "array_allocation_size_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr": {
              "entryPoint": 8434,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_allocation_size_t_bytes_memory_ptr": {
              "entryPoint": 8258,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_dataslot_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr": {
              "entryPoint": 9300,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_length_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr": {
              "entryPoint": 9272,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_length_t_bytes_memory_ptr": {
              "entryPoint": 9187,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_length_t_string_memory_ptr": {
              "entryPoint": 6487,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_nextElement_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr": {
              "entryPoint": 9417,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr": {
              "entryPoint": 9283,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_bytes_memory_ptr": {
              "entryPoint": 9198,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack": {
              "entryPoint": 9884,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
              "entryPoint": 7755,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
              "entryPoint": 6498,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "cleanup_t_address": {
              "entryPoint": 6711,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_bool": {
              "entryPoint": 6408,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_bytes32": {
              "entryPoint": 6462,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_bytes4": {
              "entryPoint": 6275,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint160": {
              "entryPoint": 6679,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint256": {
              "entryPoint": 6991,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint64": {
              "entryPoint": 6837,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "convert_t_contract$_WrappedNFT_$7892_to_t_address": {
              "entryPoint": 7469,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "convert_t_struct$_Any2EVMMessage_$194_calldata_ptr_to_t_struct$_Any2EVMMessage_$194_memory_ptr": {
              "entryPoint": 8938,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "convert_t_uint160_to_t_address": {
              "entryPoint": 7451,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "convert_t_uint160_to_t_uint160": {
              "entryPoint": 7417,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_calldata_to_memory_with_cleanup": {
              "entryPoint": 8307,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "copy_memory_to_memory_with_cleanup": {
              "entryPoint": 6515,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 7640,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "finalize_allocation": {
              "entryPoint": 8123,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "identity": {
              "entryPoint": 7407,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x22": {
              "entryPoint": 7593,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 8076,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
              "entryPoint": 8248,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d": {
              "entryPoint": 7148,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f": {
              "entryPoint": 8071,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421": {
              "entryPoint": 8199,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef": {
              "entryPoint": 8478,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
              "entryPoint": 8253,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
              "entryPoint": 6270,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
              "entryPoint": 6265,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "round_up_to_mul_of_32": {
              "entryPoint": 6557,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c": {
              "entryPoint": 7895,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3": {
              "entryPoint": 8957,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c": {
              "entryPoint": 10468,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470": {
              "entryPoint": 7766,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
              "entryPoint": 10686,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2": {
              "entryPoint": 10159,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd": {
              "entryPoint": 10267,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_address": {
              "entryPoint": 6729,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_bool": {
              "entryPoint": 7299,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_bytes32": {
              "entryPoint": 8204,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_bytes4": {
              "entryPoint": 6319,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_uint256": {
              "entryPoint": 7001,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_uint64": {
              "entryPoint": 6857,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nativeSrc": "0:37813:38",
                "nodeType": "YulBlock",
                "src": "0:37813:38",
                "statements": [
                  {
                    "body": {
                      "nativeSrc": "47:35:38",
                      "nodeType": "YulBlock",
                      "src": "47:35:38",
                      "statements": [
                        {
                          "nativeSrc": "57:19:38",
                          "nodeType": "YulAssignment",
                          "src": "57:19:38",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "73:2:38",
                                "nodeType": "YulLiteral",
                                "src": "73:2:38",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "67:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "67:5:38"
                            },
                            "nativeSrc": "67:9:38",
                            "nodeType": "YulFunctionCall",
                            "src": "67:9:38"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nativeSrc": "57:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "57:6:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "allocate_unbounded",
                    "nativeSrc": "7:75:38",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "40:6:38",
                        "nodeType": "YulTypedName",
                        "src": "40:6:38",
                        "type": ""
                      }
                    ],
                    "src": "7:75:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "177:28:38",
                      "nodeType": "YulBlock",
                      "src": "177:28:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "194:1:38",
                                "nodeType": "YulLiteral",
                                "src": "194:1:38",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "197:1:38",
                                "nodeType": "YulLiteral",
                                "src": "197:1:38",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "187:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "187:6:38"
                            },
                            "nativeSrc": "187:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "187:12:38"
                          },
                          "nativeSrc": "187:12:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "187:12:38"
                        }
                      ]
                    },
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nativeSrc": "88:117:38",
                    "nodeType": "YulFunctionDefinition",
                    "src": "88:117:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "300:28:38",
                      "nodeType": "YulBlock",
                      "src": "300:28:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "317:1:38",
                                "nodeType": "YulLiteral",
                                "src": "317:1:38",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "320:1:38",
                                "nodeType": "YulLiteral",
                                "src": "320:1:38",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "310:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "310:6:38"
                            },
                            "nativeSrc": "310:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "310:12:38"
                          },
                          "nativeSrc": "310:12:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "310:12:38"
                        }
                      ]
                    },
                    "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                    "nativeSrc": "211:117:38",
                    "nodeType": "YulFunctionDefinition",
                    "src": "211:117:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "378:105:38",
                      "nodeType": "YulBlock",
                      "src": "378:105:38",
                      "statements": [
                        {
                          "nativeSrc": "388:89:38",
                          "nodeType": "YulAssignment",
                          "src": "388:89:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "403:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "403:5:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "410:66:38",
                                "nodeType": "YulLiteral",
                                "src": "410:66:38",
                                "type": "",
                                "value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "399:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "399:3:38"
                            },
                            "nativeSrc": "399:78:38",
                            "nodeType": "YulFunctionCall",
                            "src": "399:78:38"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "388:7:38",
                              "nodeType": "YulIdentifier",
                              "src": "388:7:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_bytes4",
                    "nativeSrc": "334:149:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "360:5:38",
                        "nodeType": "YulTypedName",
                        "src": "360:5:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "370:7:38",
                        "nodeType": "YulTypedName",
                        "src": "370:7:38",
                        "type": ""
                      }
                    ],
                    "src": "334:149:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "531:78:38",
                      "nodeType": "YulBlock",
                      "src": "531:78:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "587:16:38",
                            "nodeType": "YulBlock",
                            "src": "587:16:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "596:1:38",
                                      "nodeType": "YulLiteral",
                                      "src": "596:1:38",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "599:1:38",
                                      "nodeType": "YulLiteral",
                                      "src": "599:1:38",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "589:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "589:6:38"
                                  },
                                  "nativeSrc": "589:12:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "589:12:38"
                                },
                                "nativeSrc": "589:12:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "589:12:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "554:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "554:5:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "578:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "578:5:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_bytes4",
                                      "nativeSrc": "561:16:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "561:16:38"
                                    },
                                    "nativeSrc": "561:23:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "561:23:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "551:2:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "551:2:38"
                                },
                                "nativeSrc": "551:34:38",
                                "nodeType": "YulFunctionCall",
                                "src": "551:34:38"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "544:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "544:6:38"
                            },
                            "nativeSrc": "544:42:38",
                            "nodeType": "YulFunctionCall",
                            "src": "544:42:38"
                          },
                          "nativeSrc": "541:62:38",
                          "nodeType": "YulIf",
                          "src": "541:62:38"
                        }
                      ]
                    },
                    "name": "validator_revert_t_bytes4",
                    "nativeSrc": "489:120:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "524:5:38",
                        "nodeType": "YulTypedName",
                        "src": "524:5:38",
                        "type": ""
                      }
                    ],
                    "src": "489:120:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "666:86:38",
                      "nodeType": "YulBlock",
                      "src": "666:86:38",
                      "statements": [
                        {
                          "nativeSrc": "676:29:38",
                          "nodeType": "YulAssignment",
                          "src": "676:29:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "698:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "698:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "685:12:38",
                              "nodeType": "YulIdentifier",
                              "src": "685:12:38"
                            },
                            "nativeSrc": "685:20:38",
                            "nodeType": "YulFunctionCall",
                            "src": "685:20:38"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "676:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "676:5:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "740:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "740:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_bytes4",
                              "nativeSrc": "714:25:38",
                              "nodeType": "YulIdentifier",
                              "src": "714:25:38"
                            },
                            "nativeSrc": "714:32:38",
                            "nodeType": "YulFunctionCall",
                            "src": "714:32:38"
                          },
                          "nativeSrc": "714:32:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "714:32:38"
                        }
                      ]
                    },
                    "name": "abi_decode_t_bytes4",
                    "nativeSrc": "615:137:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "644:6:38",
                        "nodeType": "YulTypedName",
                        "src": "644:6:38",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "652:3:38",
                        "nodeType": "YulTypedName",
                        "src": "652:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "660:5:38",
                        "nodeType": "YulTypedName",
                        "src": "660:5:38",
                        "type": ""
                      }
                    ],
                    "src": "615:137:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "823:262:38",
                      "nodeType": "YulBlock",
                      "src": "823:262:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "869:83:38",
                            "nodeType": "YulBlock",
                            "src": "869:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "871:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "871:77:38"
                                  },
                                  "nativeSrc": "871:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "871:79:38"
                                },
                                "nativeSrc": "871:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "871:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "844:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "844:7:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "853:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "853:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "840:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "840:3:38"
                                },
                                "nativeSrc": "840:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "840:23:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "865:2:38",
                                "nodeType": "YulLiteral",
                                "src": "865:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "836:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "836:3:38"
                            },
                            "nativeSrc": "836:32:38",
                            "nodeType": "YulFunctionCall",
                            "src": "836:32:38"
                          },
                          "nativeSrc": "833:119:38",
                          "nodeType": "YulIf",
                          "src": "833:119:38"
                        },
                        {
                          "nativeSrc": "962:116:38",
                          "nodeType": "YulBlock",
                          "src": "962:116:38",
                          "statements": [
                            {
                              "nativeSrc": "977:15:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "977:15:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "991:1:38",
                                "nodeType": "YulLiteral",
                                "src": "991:1:38",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "981:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "981:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "1006:62:38",
                              "nodeType": "YulAssignment",
                              "src": "1006:62:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "1040:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "1040:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "1051:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "1051:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1036:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "1036:3:38"
                                    },
                                    "nativeSrc": "1036:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1036:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "1060:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "1060:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes4",
                                  "nativeSrc": "1016:19:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "1016:19:38"
                                },
                                "nativeSrc": "1016:52:38",
                                "nodeType": "YulFunctionCall",
                                "src": "1016:52:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "1006:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "1006:6:38"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4",
                    "nativeSrc": "758:327:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "793:9:38",
                        "nodeType": "YulTypedName",
                        "src": "793:9:38",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "804:7:38",
                        "nodeType": "YulTypedName",
                        "src": "804:7:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "816:6:38",
                        "nodeType": "YulTypedName",
                        "src": "816:6:38",
                        "type": ""
                      }
                    ],
                    "src": "758:327:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "1133:48:38",
                      "nodeType": "YulBlock",
                      "src": "1133:48:38",
                      "statements": [
                        {
                          "nativeSrc": "1143:32:38",
                          "nodeType": "YulAssignment",
                          "src": "1143:32:38",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "1168:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "1168:5:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "1161:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "1161:6:38"
                                },
                                "nativeSrc": "1161:13:38",
                                "nodeType": "YulFunctionCall",
                                "src": "1161:13:38"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "1154:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "1154:6:38"
                            },
                            "nativeSrc": "1154:21:38",
                            "nodeType": "YulFunctionCall",
                            "src": "1154:21:38"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "1143:7:38",
                              "nodeType": "YulIdentifier",
                              "src": "1143:7:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_bool",
                    "nativeSrc": "1091:90:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "1115:5:38",
                        "nodeType": "YulTypedName",
                        "src": "1115:5:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "1125:7:38",
                        "nodeType": "YulTypedName",
                        "src": "1125:7:38",
                        "type": ""
                      }
                    ],
                    "src": "1091:90:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "1246:50:38",
                      "nodeType": "YulBlock",
                      "src": "1246:50:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "1263:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "1263:3:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "1283:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "1283:5:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_bool",
                                  "nativeSrc": "1268:14:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "1268:14:38"
                                },
                                "nativeSrc": "1268:21:38",
                                "nodeType": "YulFunctionCall",
                                "src": "1268:21:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1256:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "1256:6:38"
                            },
                            "nativeSrc": "1256:34:38",
                            "nodeType": "YulFunctionCall",
                            "src": "1256:34:38"
                          },
                          "nativeSrc": "1256:34:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "1256:34:38"
                        }
                      ]
                    },
                    "name": "abi_encode_t_bool_to_t_bool_fromStack",
                    "nativeSrc": "1187:109:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "1234:5:38",
                        "nodeType": "YulTypedName",
                        "src": "1234:5:38",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "1241:3:38",
                        "nodeType": "YulTypedName",
                        "src": "1241:3:38",
                        "type": ""
                      }
                    ],
                    "src": "1187:109:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "1394:118:38",
                      "nodeType": "YulBlock",
                      "src": "1394:118:38",
                      "statements": [
                        {
                          "nativeSrc": "1404:26:38",
                          "nodeType": "YulAssignment",
                          "src": "1404:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1416:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "1416:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1427:2:38",
                                "nodeType": "YulLiteral",
                                "src": "1427:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "1412:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "1412:3:38"
                            },
                            "nativeSrc": "1412:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "1412:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "1404:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "1404:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "1478:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "1478:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1491:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "1491:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1502:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "1502:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1487:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "1487:3:38"
                                },
                                "nativeSrc": "1487:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "1487:17:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bool_to_t_bool_fromStack",
                              "nativeSrc": "1440:37:38",
                              "nodeType": "YulIdentifier",
                              "src": "1440:37:38"
                            },
                            "nativeSrc": "1440:65:38",
                            "nodeType": "YulFunctionCall",
                            "src": "1440:65:38"
                          },
                          "nativeSrc": "1440:65:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "1440:65:38"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nativeSrc": "1302:210:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "1366:9:38",
                        "nodeType": "YulTypedName",
                        "src": "1366:9:38",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "1378:6:38",
                        "nodeType": "YulTypedName",
                        "src": "1378:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "1389:4:38",
                        "nodeType": "YulTypedName",
                        "src": "1389:4:38",
                        "type": ""
                      }
                    ],
                    "src": "1302:210:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "1563:32:38",
                      "nodeType": "YulBlock",
                      "src": "1563:32:38",
                      "statements": [
                        {
                          "nativeSrc": "1573:16:38",
                          "nodeType": "YulAssignment",
                          "src": "1573:16:38",
                          "value": {
                            "name": "value",
                            "nativeSrc": "1584:5:38",
                            "nodeType": "YulIdentifier",
                            "src": "1584:5:38"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "1573:7:38",
                              "nodeType": "YulIdentifier",
                              "src": "1573:7:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_bytes32",
                    "nativeSrc": "1518:77:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "1545:5:38",
                        "nodeType": "YulTypedName",
                        "src": "1545:5:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "1555:7:38",
                        "nodeType": "YulTypedName",
                        "src": "1555:7:38",
                        "type": ""
                      }
                    ],
                    "src": "1518:77:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "1666:53:38",
                      "nodeType": "YulBlock",
                      "src": "1666:53:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "1683:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "1683:3:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "1706:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "1706:5:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_bytes32",
                                  "nativeSrc": "1688:17:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "1688:17:38"
                                },
                                "nativeSrc": "1688:24:38",
                                "nodeType": "YulFunctionCall",
                                "src": "1688:24:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1676:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "1676:6:38"
                            },
                            "nativeSrc": "1676:37:38",
                            "nodeType": "YulFunctionCall",
                            "src": "1676:37:38"
                          },
                          "nativeSrc": "1676:37:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "1676:37:38"
                        }
                      ]
                    },
                    "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                    "nativeSrc": "1601:118:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "1654:5:38",
                        "nodeType": "YulTypedName",
                        "src": "1654:5:38",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "1661:3:38",
                        "nodeType": "YulTypedName",
                        "src": "1661:3:38",
                        "type": ""
                      }
                    ],
                    "src": "1601:118:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "1784:40:38",
                      "nodeType": "YulBlock",
                      "src": "1784:40:38",
                      "statements": [
                        {
                          "nativeSrc": "1795:22:38",
                          "nodeType": "YulAssignment",
                          "src": "1795:22:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "1811:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "1811:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "1805:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "1805:5:38"
                            },
                            "nativeSrc": "1805:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "1805:12:38"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nativeSrc": "1795:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "1795:6:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_length_t_string_memory_ptr",
                    "nativeSrc": "1725:99:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "1767:5:38",
                        "nodeType": "YulTypedName",
                        "src": "1767:5:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nativeSrc": "1777:6:38",
                        "nodeType": "YulTypedName",
                        "src": "1777:6:38",
                        "type": ""
                      }
                    ],
                    "src": "1725:99:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "1926:73:38",
                      "nodeType": "YulBlock",
                      "src": "1926:73:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "1943:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "1943:3:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "1948:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "1948:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1936:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "1936:6:38"
                            },
                            "nativeSrc": "1936:19:38",
                            "nodeType": "YulFunctionCall",
                            "src": "1936:19:38"
                          },
                          "nativeSrc": "1936:19:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "1936:19:38"
                        },
                        {
                          "nativeSrc": "1964:29:38",
                          "nodeType": "YulAssignment",
                          "src": "1964:29:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "1983:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "1983:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1988:4:38",
                                "nodeType": "YulLiteral",
                                "src": "1988:4:38",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "1979:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "1979:3:38"
                            },
                            "nativeSrc": "1979:14:38",
                            "nodeType": "YulFunctionCall",
                            "src": "1979:14:38"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nativeSrc": "1964:11:38",
                              "nodeType": "YulIdentifier",
                              "src": "1964:11:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                    "nativeSrc": "1830:169:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "1898:3:38",
                        "nodeType": "YulTypedName",
                        "src": "1898:3:38",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "1903:6:38",
                        "nodeType": "YulTypedName",
                        "src": "1903:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nativeSrc": "1914:11:38",
                        "nodeType": "YulTypedName",
                        "src": "1914:11:38",
                        "type": ""
                      }
                    ],
                    "src": "1830:169:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "2067:186:38",
                      "nodeType": "YulBlock",
                      "src": "2067:186:38",
                      "statements": [
                        {
                          "nativeSrc": "2078:10:38",
                          "nodeType": "YulVariableDeclaration",
                          "src": "2078:10:38",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "2087:1:38",
                            "nodeType": "YulLiteral",
                            "src": "2087:1:38",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nativeSrc": "2082:1:38",
                              "nodeType": "YulTypedName",
                              "src": "2082:1:38",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "2147:63:38",
                            "nodeType": "YulBlock",
                            "src": "2147:63:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nativeSrc": "2172:3:38",
                                          "nodeType": "YulIdentifier",
                                          "src": "2172:3:38"
                                        },
                                        {
                                          "name": "i",
                                          "nativeSrc": "2177:1:38",
                                          "nodeType": "YulIdentifier",
                                          "src": "2177:1:38"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "2168:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "2168:3:38"
                                      },
                                      "nativeSrc": "2168:11:38",
                                      "nodeType": "YulFunctionCall",
                                      "src": "2168:11:38"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nativeSrc": "2191:3:38",
                                              "nodeType": "YulIdentifier",
                                              "src": "2191:3:38"
                                            },
                                            {
                                              "name": "i",
                                              "nativeSrc": "2196:1:38",
                                              "nodeType": "YulIdentifier",
                                              "src": "2196:1:38"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "2187:3:38",
                                            "nodeType": "YulIdentifier",
                                            "src": "2187:3:38"
                                          },
                                          "nativeSrc": "2187:11:38",
                                          "nodeType": "YulFunctionCall",
                                          "src": "2187:11:38"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nativeSrc": "2181:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "2181:5:38"
                                      },
                                      "nativeSrc": "2181:18:38",
                                      "nodeType": "YulFunctionCall",
                                      "src": "2181:18:38"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "2161:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "2161:6:38"
                                  },
                                  "nativeSrc": "2161:39:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2161:39:38"
                                },
                                "nativeSrc": "2161:39:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "2161:39:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nativeSrc": "2108:1:38",
                                "nodeType": "YulIdentifier",
                                "src": "2108:1:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "2111:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "2111:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nativeSrc": "2105:2:38",
                              "nodeType": "YulIdentifier",
                              "src": "2105:2:38"
                            },
                            "nativeSrc": "2105:13:38",
                            "nodeType": "YulFunctionCall",
                            "src": "2105:13:38"
                          },
                          "nativeSrc": "2097:113:38",
                          "nodeType": "YulForLoop",
                          "post": {
                            "nativeSrc": "2119:19:38",
                            "nodeType": "YulBlock",
                            "src": "2119:19:38",
                            "statements": [
                              {
                                "nativeSrc": "2121:15:38",
                                "nodeType": "YulAssignment",
                                "src": "2121:15:38",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nativeSrc": "2130:1:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "2130:1:38"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "2133:2:38",
                                      "nodeType": "YulLiteral",
                                      "src": "2133:2:38",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "2126:3:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "2126:3:38"
                                  },
                                  "nativeSrc": "2126:10:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2126:10:38"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nativeSrc": "2121:1:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "2121:1:38"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nativeSrc": "2101:3:38",
                            "nodeType": "YulBlock",
                            "src": "2101:3:38",
                            "statements": []
                          },
                          "src": "2097:113:38"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nativeSrc": "2230:3:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "2230:3:38"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "2235:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "2235:6:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2226:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "2226:3:38"
                                },
                                "nativeSrc": "2226:16:38",
                                "nodeType": "YulFunctionCall",
                                "src": "2226:16:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2244:1:38",
                                "nodeType": "YulLiteral",
                                "src": "2244:1:38",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2219:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "2219:6:38"
                            },
                            "nativeSrc": "2219:27:38",
                            "nodeType": "YulFunctionCall",
                            "src": "2219:27:38"
                          },
                          "nativeSrc": "2219:27:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "2219:27:38"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory_with_cleanup",
                    "nativeSrc": "2005:248:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nativeSrc": "2049:3:38",
                        "nodeType": "YulTypedName",
                        "src": "2049:3:38",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nativeSrc": "2054:3:38",
                        "nodeType": "YulTypedName",
                        "src": "2054:3:38",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "2059:6:38",
                        "nodeType": "YulTypedName",
                        "src": "2059:6:38",
                        "type": ""
                      }
                    ],
                    "src": "2005:248:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "2307:54:38",
                      "nodeType": "YulBlock",
                      "src": "2307:54:38",
                      "statements": [
                        {
                          "nativeSrc": "2317:38:38",
                          "nodeType": "YulAssignment",
                          "src": "2317:38:38",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "2335:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "2335:5:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2342:2:38",
                                    "nodeType": "YulLiteral",
                                    "src": "2342:2:38",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2331:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "2331:3:38"
                                },
                                "nativeSrc": "2331:14:38",
                                "nodeType": "YulFunctionCall",
                                "src": "2331:14:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2351:2:38",
                                    "nodeType": "YulLiteral",
                                    "src": "2351:2:38",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nativeSrc": "2347:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "2347:3:38"
                                },
                                "nativeSrc": "2347:7:38",
                                "nodeType": "YulFunctionCall",
                                "src": "2347:7:38"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "2327:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "2327:3:38"
                            },
                            "nativeSrc": "2327:28:38",
                            "nodeType": "YulFunctionCall",
                            "src": "2327:28:38"
                          },
                          "variableNames": [
                            {
                              "name": "result",
                              "nativeSrc": "2317:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "2317:6:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "round_up_to_mul_of_32",
                    "nativeSrc": "2259:102:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "2290:5:38",
                        "nodeType": "YulTypedName",
                        "src": "2290:5:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "result",
                        "nativeSrc": "2300:6:38",
                        "nodeType": "YulTypedName",
                        "src": "2300:6:38",
                        "type": ""
                      }
                    ],
                    "src": "2259:102:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "2459:285:38",
                      "nodeType": "YulBlock",
                      "src": "2459:285:38",
                      "statements": [
                        {
                          "nativeSrc": "2469:53:38",
                          "nodeType": "YulVariableDeclaration",
                          "src": "2469:53:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "2516:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "2516:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_string_memory_ptr",
                              "nativeSrc": "2483:32:38",
                              "nodeType": "YulIdentifier",
                              "src": "2483:32:38"
                            },
                            "nativeSrc": "2483:39:38",
                            "nodeType": "YulFunctionCall",
                            "src": "2483:39:38"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "2473:6:38",
                              "nodeType": "YulTypedName",
                              "src": "2473:6:38",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "2531:78:38",
                          "nodeType": "YulAssignment",
                          "src": "2531:78:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "2597:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "2597:3:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "2602:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "2602:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nativeSrc": "2538:58:38",
                              "nodeType": "YulIdentifier",
                              "src": "2538:58:38"
                            },
                            "nativeSrc": "2538:71:38",
                            "nodeType": "YulFunctionCall",
                            "src": "2538:71:38"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "2531:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "2531:3:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "2657:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "2657:5:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2664:4:38",
                                    "nodeType": "YulLiteral",
                                    "src": "2664:4:38",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2653:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "2653:3:38"
                                },
                                "nativeSrc": "2653:16:38",
                                "nodeType": "YulFunctionCall",
                                "src": "2653:16:38"
                              },
                              {
                                "name": "pos",
                                "nativeSrc": "2671:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "2671:3:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "2676:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "2676:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nativeSrc": "2618:34:38",
                              "nodeType": "YulIdentifier",
                              "src": "2618:34:38"
                            },
                            "nativeSrc": "2618:65:38",
                            "nodeType": "YulFunctionCall",
                            "src": "2618:65:38"
                          },
                          "nativeSrc": "2618:65:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "2618:65:38"
                        },
                        {
                          "nativeSrc": "2692:46:38",
                          "nodeType": "YulAssignment",
                          "src": "2692:46:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "2703:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "2703:3:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "2730:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "2730:6:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nativeSrc": "2708:21:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "2708:21:38"
                                },
                                "nativeSrc": "2708:29:38",
                                "nodeType": "YulFunctionCall",
                                "src": "2708:29:38"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2699:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "2699:3:38"
                            },
                            "nativeSrc": "2699:39:38",
                            "nodeType": "YulFunctionCall",
                            "src": "2699:39:38"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "2692:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "2692:3:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                    "nativeSrc": "2367:377:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "2440:5:38",
                        "nodeType": "YulTypedName",
                        "src": "2440:5:38",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "2447:3:38",
                        "nodeType": "YulTypedName",
                        "src": "2447:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "2455:3:38",
                        "nodeType": "YulTypedName",
                        "src": "2455:3:38",
                        "type": ""
                      }
                    ],
                    "src": "2367:377:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "2896:277:38",
                      "nodeType": "YulBlock",
                      "src": "2896:277:38",
                      "statements": [
                        {
                          "nativeSrc": "2906:26:38",
                          "nodeType": "YulAssignment",
                          "src": "2906:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2918:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "2918:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2929:2:38",
                                "nodeType": "YulLiteral",
                                "src": "2929:2:38",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2914:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "2914:3:38"
                            },
                            "nativeSrc": "2914:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "2914:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "2906:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "2906:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "2986:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "2986:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2999:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "2999:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3010:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "3010:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2995:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "2995:3:38"
                                },
                                "nativeSrc": "2995:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "2995:17:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nativeSrc": "2942:43:38",
                              "nodeType": "YulIdentifier",
                              "src": "2942:43:38"
                            },
                            "nativeSrc": "2942:71:38",
                            "nodeType": "YulFunctionCall",
                            "src": "2942:71:38"
                          },
                          "nativeSrc": "2942:71:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "2942:71:38"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3034:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "3034:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3045:2:38",
                                    "nodeType": "YulLiteral",
                                    "src": "3045:2:38",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "3030:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "3030:3:38"
                                },
                                "nativeSrc": "3030:18:38",
                                "nodeType": "YulFunctionCall",
                                "src": "3030:18:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nativeSrc": "3054:4:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "3054:4:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3060:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "3060:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "3050:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "3050:3:38"
                                },
                                "nativeSrc": "3050:20:38",
                                "nodeType": "YulFunctionCall",
                                "src": "3050:20:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3023:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "3023:6:38"
                            },
                            "nativeSrc": "3023:48:38",
                            "nodeType": "YulFunctionCall",
                            "src": "3023:48:38"
                          },
                          "nativeSrc": "3023:48:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "3023:48:38"
                        },
                        {
                          "nativeSrc": "3080:86:38",
                          "nodeType": "YulAssignment",
                          "src": "3080:86:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nativeSrc": "3152:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "3152:6:38"
                              },
                              {
                                "name": "tail",
                                "nativeSrc": "3161:4:38",
                                "nodeType": "YulIdentifier",
                                "src": "3161:4:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                              "nativeSrc": "3088:63:38",
                              "nodeType": "YulIdentifier",
                              "src": "3088:63:38"
                            },
                            "nativeSrc": "3088:78:38",
                            "nodeType": "YulFunctionCall",
                            "src": "3088:78:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "3080:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "3080:4:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_string_memory_ptr__to_t_bytes32_t_string_memory_ptr__fromStack_reversed",
                    "nativeSrc": "2750:423:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "2860:9:38",
                        "nodeType": "YulTypedName",
                        "src": "2860:9:38",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "2872:6:38",
                        "nodeType": "YulTypedName",
                        "src": "2872:6:38",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "2880:6:38",
                        "nodeType": "YulTypedName",
                        "src": "2880:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "2891:4:38",
                        "nodeType": "YulTypedName",
                        "src": "2891:4:38",
                        "type": ""
                      }
                    ],
                    "src": "2750:423:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "3224:81:38",
                      "nodeType": "YulBlock",
                      "src": "3224:81:38",
                      "statements": [
                        {
                          "nativeSrc": "3234:65:38",
                          "nodeType": "YulAssignment",
                          "src": "3234:65:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "3249:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "3249:5:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3256:42:38",
                                "nodeType": "YulLiteral",
                                "src": "3256:42:38",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "3245:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "3245:3:38"
                            },
                            "nativeSrc": "3245:54:38",
                            "nodeType": "YulFunctionCall",
                            "src": "3245:54:38"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "3234:7:38",
                              "nodeType": "YulIdentifier",
                              "src": "3234:7:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint160",
                    "nativeSrc": "3179:126:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "3206:5:38",
                        "nodeType": "YulTypedName",
                        "src": "3206:5:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "3216:7:38",
                        "nodeType": "YulTypedName",
                        "src": "3216:7:38",
                        "type": ""
                      }
                    ],
                    "src": "3179:126:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "3356:51:38",
                      "nodeType": "YulBlock",
                      "src": "3356:51:38",
                      "statements": [
                        {
                          "nativeSrc": "3366:35:38",
                          "nodeType": "YulAssignment",
                          "src": "3366:35:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "3395:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "3395:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint160",
                              "nativeSrc": "3377:17:38",
                              "nodeType": "YulIdentifier",
                              "src": "3377:17:38"
                            },
                            "nativeSrc": "3377:24:38",
                            "nodeType": "YulFunctionCall",
                            "src": "3377:24:38"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "3366:7:38",
                              "nodeType": "YulIdentifier",
                              "src": "3366:7:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_address",
                    "nativeSrc": "3311:96:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "3338:5:38",
                        "nodeType": "YulTypedName",
                        "src": "3338:5:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "3348:7:38",
                        "nodeType": "YulTypedName",
                        "src": "3348:7:38",
                        "type": ""
                      }
                    ],
                    "src": "3311:96:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "3456:79:38",
                      "nodeType": "YulBlock",
                      "src": "3456:79:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "3513:16:38",
                            "nodeType": "YulBlock",
                            "src": "3513:16:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3522:1:38",
                                      "nodeType": "YulLiteral",
                                      "src": "3522:1:38",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3525:1:38",
                                      "nodeType": "YulLiteral",
                                      "src": "3525:1:38",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "3515:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "3515:6:38"
                                  },
                                  "nativeSrc": "3515:12:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3515:12:38"
                                },
                                "nativeSrc": "3515:12:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "3515:12:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "3479:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "3479:5:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "3504:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "3504:5:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_address",
                                      "nativeSrc": "3486:17:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "3486:17:38"
                                    },
                                    "nativeSrc": "3486:24:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3486:24:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "3476:2:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "3476:2:38"
                                },
                                "nativeSrc": "3476:35:38",
                                "nodeType": "YulFunctionCall",
                                "src": "3476:35:38"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "3469:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "3469:6:38"
                            },
                            "nativeSrc": "3469:43:38",
                            "nodeType": "YulFunctionCall",
                            "src": "3469:43:38"
                          },
                          "nativeSrc": "3466:63:38",
                          "nodeType": "YulIf",
                          "src": "3466:63:38"
                        }
                      ]
                    },
                    "name": "validator_revert_t_address",
                    "nativeSrc": "3413:122:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "3449:5:38",
                        "nodeType": "YulTypedName",
                        "src": "3449:5:38",
                        "type": ""
                      }
                    ],
                    "src": "3413:122:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "3593:87:38",
                      "nodeType": "YulBlock",
                      "src": "3593:87:38",
                      "statements": [
                        {
                          "nativeSrc": "3603:29:38",
                          "nodeType": "YulAssignment",
                          "src": "3603:29:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "3625:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "3625:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "3612:12:38",
                              "nodeType": "YulIdentifier",
                              "src": "3612:12:38"
                            },
                            "nativeSrc": "3612:20:38",
                            "nodeType": "YulFunctionCall",
                            "src": "3612:20:38"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "3603:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "3603:5:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "3668:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "3668:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nativeSrc": "3641:26:38",
                              "nodeType": "YulIdentifier",
                              "src": "3641:26:38"
                            },
                            "nativeSrc": "3641:33:38",
                            "nodeType": "YulFunctionCall",
                            "src": "3641:33:38"
                          },
                          "nativeSrc": "3641:33:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "3641:33:38"
                        }
                      ]
                    },
                    "name": "abi_decode_t_address",
                    "nativeSrc": "3541:139:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "3571:6:38",
                        "nodeType": "YulTypedName",
                        "src": "3571:6:38",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "3579:3:38",
                        "nodeType": "YulTypedName",
                        "src": "3579:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "3587:5:38",
                        "nodeType": "YulTypedName",
                        "src": "3587:5:38",
                        "type": ""
                      }
                    ],
                    "src": "3541:139:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "3769:391:38",
                      "nodeType": "YulBlock",
                      "src": "3769:391:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "3815:83:38",
                            "nodeType": "YulBlock",
                            "src": "3815:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "3817:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "3817:77:38"
                                  },
                                  "nativeSrc": "3817:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3817:79:38"
                                },
                                "nativeSrc": "3817:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "3817:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "3790:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "3790:7:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3799:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "3799:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "3786:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "3786:3:38"
                                },
                                "nativeSrc": "3786:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "3786:23:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3811:2:38",
                                "nodeType": "YulLiteral",
                                "src": "3811:2:38",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "3782:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "3782:3:38"
                            },
                            "nativeSrc": "3782:32:38",
                            "nodeType": "YulFunctionCall",
                            "src": "3782:32:38"
                          },
                          "nativeSrc": "3779:119:38",
                          "nodeType": "YulIf",
                          "src": "3779:119:38"
                        },
                        {
                          "nativeSrc": "3908:117:38",
                          "nodeType": "YulBlock",
                          "src": "3908:117:38",
                          "statements": [
                            {
                              "nativeSrc": "3923:15:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "3923:15:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "3937:1:38",
                                "nodeType": "YulLiteral",
                                "src": "3937:1:38",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "3927:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "3927:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "3952:63:38",
                              "nodeType": "YulAssignment",
                              "src": "3952:63:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "3987:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "3987:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "3998:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "3998:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "3983:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "3983:3:38"
                                    },
                                    "nativeSrc": "3983:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3983:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "4007:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "4007:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "3962:20:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "3962:20:38"
                                },
                                "nativeSrc": "3962:53:38",
                                "nodeType": "YulFunctionCall",
                                "src": "3962:53:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "3952:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "3952:6:38"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "4035:118:38",
                          "nodeType": "YulBlock",
                          "src": "4035:118:38",
                          "statements": [
                            {
                              "nativeSrc": "4050:16:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "4050:16:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "4064:2:38",
                                "nodeType": "YulLiteral",
                                "src": "4064:2:38",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "4054:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "4054:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "4080:63:38",
                              "nodeType": "YulAssignment",
                              "src": "4080:63:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "4115:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "4115:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "4126:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "4126:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "4111:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "4111:3:38"
                                    },
                                    "nativeSrc": "4111:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4111:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "4135:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "4135:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "4090:20:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "4090:20:38"
                                },
                                "nativeSrc": "4090:53:38",
                                "nodeType": "YulFunctionCall",
                                "src": "4090:53:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nativeSrc": "4080:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "4080:6:38"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_address",
                    "nativeSrc": "3686:474:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "3731:9:38",
                        "nodeType": "YulTypedName",
                        "src": "3731:9:38",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "3742:7:38",
                        "nodeType": "YulTypedName",
                        "src": "3742:7:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "3754:6:38",
                        "nodeType": "YulTypedName",
                        "src": "3754:6:38",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "3762:6:38",
                        "nodeType": "YulTypedName",
                        "src": "3762:6:38",
                        "type": ""
                      }
                    ],
                    "src": "3686:474:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "4210:57:38",
                      "nodeType": "YulBlock",
                      "src": "4210:57:38",
                      "statements": [
                        {
                          "nativeSrc": "4220:41:38",
                          "nodeType": "YulAssignment",
                          "src": "4220:41:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "4235:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "4235:5:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "4242:18:38",
                                "nodeType": "YulLiteral",
                                "src": "4242:18:38",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "4231:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "4231:3:38"
                            },
                            "nativeSrc": "4231:30:38",
                            "nodeType": "YulFunctionCall",
                            "src": "4231:30:38"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "4220:7:38",
                              "nodeType": "YulIdentifier",
                              "src": "4220:7:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint64",
                    "nativeSrc": "4166:101:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "4192:5:38",
                        "nodeType": "YulTypedName",
                        "src": "4192:5:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "4202:7:38",
                        "nodeType": "YulTypedName",
                        "src": "4202:7:38",
                        "type": ""
                      }
                    ],
                    "src": "4166:101:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "4315:78:38",
                      "nodeType": "YulBlock",
                      "src": "4315:78:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "4371:16:38",
                            "nodeType": "YulBlock",
                            "src": "4371:16:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4380:1:38",
                                      "nodeType": "YulLiteral",
                                      "src": "4380:1:38",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4383:1:38",
                                      "nodeType": "YulLiteral",
                                      "src": "4383:1:38",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "4373:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "4373:6:38"
                                  },
                                  "nativeSrc": "4373:12:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4373:12:38"
                                },
                                "nativeSrc": "4373:12:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "4373:12:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "4338:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "4338:5:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "4362:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "4362:5:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint64",
                                      "nativeSrc": "4345:16:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "4345:16:38"
                                    },
                                    "nativeSrc": "4345:23:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4345:23:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "4335:2:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "4335:2:38"
                                },
                                "nativeSrc": "4335:34:38",
                                "nodeType": "YulFunctionCall",
                                "src": "4335:34:38"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "4328:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "4328:6:38"
                            },
                            "nativeSrc": "4328:42:38",
                            "nodeType": "YulFunctionCall",
                            "src": "4328:42:38"
                          },
                          "nativeSrc": "4325:62:38",
                          "nodeType": "YulIf",
                          "src": "4325:62:38"
                        }
                      ]
                    },
                    "name": "validator_revert_t_uint64",
                    "nativeSrc": "4273:120:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "4308:5:38",
                        "nodeType": "YulTypedName",
                        "src": "4308:5:38",
                        "type": ""
                      }
                    ],
                    "src": "4273:120:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "4450:86:38",
                      "nodeType": "YulBlock",
                      "src": "4450:86:38",
                      "statements": [
                        {
                          "nativeSrc": "4460:29:38",
                          "nodeType": "YulAssignment",
                          "src": "4460:29:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "4482:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "4482:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "4469:12:38",
                              "nodeType": "YulIdentifier",
                              "src": "4469:12:38"
                            },
                            "nativeSrc": "4469:20:38",
                            "nodeType": "YulFunctionCall",
                            "src": "4469:20:38"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "4460:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "4460:5:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "4524:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "4524:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_uint64",
                              "nativeSrc": "4498:25:38",
                              "nodeType": "YulIdentifier",
                              "src": "4498:25:38"
                            },
                            "nativeSrc": "4498:32:38",
                            "nodeType": "YulFunctionCall",
                            "src": "4498:32:38"
                          },
                          "nativeSrc": "4498:32:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "4498:32:38"
                        }
                      ]
                    },
                    "name": "abi_decode_t_uint64",
                    "nativeSrc": "4399:137:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "4428:6:38",
                        "nodeType": "YulTypedName",
                        "src": "4428:6:38",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "4436:3:38",
                        "nodeType": "YulTypedName",
                        "src": "4436:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "4444:5:38",
                        "nodeType": "YulTypedName",
                        "src": "4444:5:38",
                        "type": ""
                      }
                    ],
                    "src": "4399:137:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "4607:262:38",
                      "nodeType": "YulBlock",
                      "src": "4607:262:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "4653:83:38",
                            "nodeType": "YulBlock",
                            "src": "4653:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "4655:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "4655:77:38"
                                  },
                                  "nativeSrc": "4655:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4655:79:38"
                                },
                                "nativeSrc": "4655:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "4655:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "4628:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "4628:7:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "4637:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "4637:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "4624:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "4624:3:38"
                                },
                                "nativeSrc": "4624:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "4624:23:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "4649:2:38",
                                "nodeType": "YulLiteral",
                                "src": "4649:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "4620:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "4620:3:38"
                            },
                            "nativeSrc": "4620:32:38",
                            "nodeType": "YulFunctionCall",
                            "src": "4620:32:38"
                          },
                          "nativeSrc": "4617:119:38",
                          "nodeType": "YulIf",
                          "src": "4617:119:38"
                        },
                        {
                          "nativeSrc": "4746:116:38",
                          "nodeType": "YulBlock",
                          "src": "4746:116:38",
                          "statements": [
                            {
                              "nativeSrc": "4761:15:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "4761:15:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "4775:1:38",
                                "nodeType": "YulLiteral",
                                "src": "4775:1:38",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "4765:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "4765:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "4790:62:38",
                              "nodeType": "YulAssignment",
                              "src": "4790:62:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "4824:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "4824:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "4835:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "4835:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "4820:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "4820:3:38"
                                    },
                                    "nativeSrc": "4820:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4820:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "4844:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "4844:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint64",
                                  "nativeSrc": "4800:19:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "4800:19:38"
                                },
                                "nativeSrc": "4800:52:38",
                                "nodeType": "YulFunctionCall",
                                "src": "4800:52:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "4790:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "4790:6:38"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint64",
                    "nativeSrc": "4542:327:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "4577:9:38",
                        "nodeType": "YulTypedName",
                        "src": "4577:9:38",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "4588:7:38",
                        "nodeType": "YulTypedName",
                        "src": "4588:7:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "4600:6:38",
                        "nodeType": "YulTypedName",
                        "src": "4600:6:38",
                        "type": ""
                      }
                    ],
                    "src": "4542:327:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "4941:263:38",
                      "nodeType": "YulBlock",
                      "src": "4941:263:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "4987:83:38",
                            "nodeType": "YulBlock",
                            "src": "4987:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "4989:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "4989:77:38"
                                  },
                                  "nativeSrc": "4989:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4989:79:38"
                                },
                                "nativeSrc": "4989:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "4989:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "4962:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "4962:7:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "4971:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "4971:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "4958:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "4958:3:38"
                                },
                                "nativeSrc": "4958:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "4958:23:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "4983:2:38",
                                "nodeType": "YulLiteral",
                                "src": "4983:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "4954:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "4954:3:38"
                            },
                            "nativeSrc": "4954:32:38",
                            "nodeType": "YulFunctionCall",
                            "src": "4954:32:38"
                          },
                          "nativeSrc": "4951:119:38",
                          "nodeType": "YulIf",
                          "src": "4951:119:38"
                        },
                        {
                          "nativeSrc": "5080:117:38",
                          "nodeType": "YulBlock",
                          "src": "5080:117:38",
                          "statements": [
                            {
                              "nativeSrc": "5095:15:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "5095:15:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "5109:1:38",
                                "nodeType": "YulLiteral",
                                "src": "5109:1:38",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "5099:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "5099:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "5124:63:38",
                              "nodeType": "YulAssignment",
                              "src": "5124:63:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "5159:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "5159:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "5170:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "5170:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "5155:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "5155:3:38"
                                    },
                                    "nativeSrc": "5155:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5155:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "5179:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "5179:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "5134:20:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "5134:20:38"
                                },
                                "nativeSrc": "5134:53:38",
                                "nodeType": "YulFunctionCall",
                                "src": "5134:53:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "5124:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "5124:6:38"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nativeSrc": "4875:329:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "4911:9:38",
                        "nodeType": "YulTypedName",
                        "src": "4911:9:38",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "4922:7:38",
                        "nodeType": "YulTypedName",
                        "src": "4922:7:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "4934:6:38",
                        "nodeType": "YulTypedName",
                        "src": "4934:6:38",
                        "type": ""
                      }
                    ],
                    "src": "4875:329:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "5255:32:38",
                      "nodeType": "YulBlock",
                      "src": "5255:32:38",
                      "statements": [
                        {
                          "nativeSrc": "5265:16:38",
                          "nodeType": "YulAssignment",
                          "src": "5265:16:38",
                          "value": {
                            "name": "value",
                            "nativeSrc": "5276:5:38",
                            "nodeType": "YulIdentifier",
                            "src": "5276:5:38"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "5265:7:38",
                              "nodeType": "YulIdentifier",
                              "src": "5265:7:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint256",
                    "nativeSrc": "5210:77:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "5237:5:38",
                        "nodeType": "YulTypedName",
                        "src": "5237:5:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "5247:7:38",
                        "nodeType": "YulTypedName",
                        "src": "5247:7:38",
                        "type": ""
                      }
                    ],
                    "src": "5210:77:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "5336:79:38",
                      "nodeType": "YulBlock",
                      "src": "5336:79:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "5393:16:38",
                            "nodeType": "YulBlock",
                            "src": "5393:16:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "5402:1:38",
                                      "nodeType": "YulLiteral",
                                      "src": "5402:1:38",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "5405:1:38",
                                      "nodeType": "YulLiteral",
                                      "src": "5405:1:38",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "5395:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "5395:6:38"
                                  },
                                  "nativeSrc": "5395:12:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5395:12:38"
                                },
                                "nativeSrc": "5395:12:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "5395:12:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "5359:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "5359:5:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "5384:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "5384:5:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint256",
                                      "nativeSrc": "5366:17:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "5366:17:38"
                                    },
                                    "nativeSrc": "5366:24:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5366:24:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "5356:2:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "5356:2:38"
                                },
                                "nativeSrc": "5356:35:38",
                                "nodeType": "YulFunctionCall",
                                "src": "5356:35:38"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "5349:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "5349:6:38"
                            },
                            "nativeSrc": "5349:43:38",
                            "nodeType": "YulFunctionCall",
                            "src": "5349:43:38"
                          },
                          "nativeSrc": "5346:63:38",
                          "nodeType": "YulIf",
                          "src": "5346:63:38"
                        }
                      ]
                    },
                    "name": "validator_revert_t_uint256",
                    "nativeSrc": "5293:122:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "5329:5:38",
                        "nodeType": "YulTypedName",
                        "src": "5329:5:38",
                        "type": ""
                      }
                    ],
                    "src": "5293:122:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "5473:87:38",
                      "nodeType": "YulBlock",
                      "src": "5473:87:38",
                      "statements": [
                        {
                          "nativeSrc": "5483:29:38",
                          "nodeType": "YulAssignment",
                          "src": "5483:29:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "5505:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "5505:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "5492:12:38",
                              "nodeType": "YulIdentifier",
                              "src": "5492:12:38"
                            },
                            "nativeSrc": "5492:20:38",
                            "nodeType": "YulFunctionCall",
                            "src": "5492:20:38"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "5483:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "5483:5:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "5548:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "5548:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_uint256",
                              "nativeSrc": "5521:26:38",
                              "nodeType": "YulIdentifier",
                              "src": "5521:26:38"
                            },
                            "nativeSrc": "5521:33:38",
                            "nodeType": "YulFunctionCall",
                            "src": "5521:33:38"
                          },
                          "nativeSrc": "5521:33:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "5521:33:38"
                        }
                      ]
                    },
                    "name": "abi_decode_t_uint256",
                    "nativeSrc": "5421:139:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "5451:6:38",
                        "nodeType": "YulTypedName",
                        "src": "5451:6:38",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "5459:3:38",
                        "nodeType": "YulTypedName",
                        "src": "5459:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "5467:5:38",
                        "nodeType": "YulTypedName",
                        "src": "5467:5:38",
                        "type": ""
                      }
                    ],
                    "src": "5421:139:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "5682:647:38",
                      "nodeType": "YulBlock",
                      "src": "5682:647:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "5729:83:38",
                            "nodeType": "YulBlock",
                            "src": "5729:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "5731:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "5731:77:38"
                                  },
                                  "nativeSrc": "5731:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5731:79:38"
                                },
                                "nativeSrc": "5731:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "5731:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "5703:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "5703:7:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "5712:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "5712:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "5699:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "5699:3:38"
                                },
                                "nativeSrc": "5699:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "5699:23:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "5724:3:38",
                                "nodeType": "YulLiteral",
                                "src": "5724:3:38",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "5695:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "5695:3:38"
                            },
                            "nativeSrc": "5695:33:38",
                            "nodeType": "YulFunctionCall",
                            "src": "5695:33:38"
                          },
                          "nativeSrc": "5692:120:38",
                          "nodeType": "YulIf",
                          "src": "5692:120:38"
                        },
                        {
                          "nativeSrc": "5822:117:38",
                          "nodeType": "YulBlock",
                          "src": "5822:117:38",
                          "statements": [
                            {
                              "nativeSrc": "5837:15:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "5837:15:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "5851:1:38",
                                "nodeType": "YulLiteral",
                                "src": "5851:1:38",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "5841:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "5841:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "5866:63:38",
                              "nodeType": "YulAssignment",
                              "src": "5866:63:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "5901:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "5901:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "5912:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "5912:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "5897:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "5897:3:38"
                                    },
                                    "nativeSrc": "5897:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5897:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "5921:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "5921:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256",
                                  "nativeSrc": "5876:20:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "5876:20:38"
                                },
                                "nativeSrc": "5876:53:38",
                                "nodeType": "YulFunctionCall",
                                "src": "5876:53:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "5866:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "5866:6:38"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "5949:118:38",
                          "nodeType": "YulBlock",
                          "src": "5949:118:38",
                          "statements": [
                            {
                              "nativeSrc": "5964:16:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "5964:16:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "5978:2:38",
                                "nodeType": "YulLiteral",
                                "src": "5978:2:38",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "5968:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "5968:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "5994:63:38",
                              "nodeType": "YulAssignment",
                              "src": "5994:63:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "6029:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "6029:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "6040:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "6040:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "6025:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "6025:3:38"
                                    },
                                    "nativeSrc": "6025:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6025:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "6049:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "6049:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "6004:20:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "6004:20:38"
                                },
                                "nativeSrc": "6004:53:38",
                                "nodeType": "YulFunctionCall",
                                "src": "6004:53:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nativeSrc": "5994:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "5994:6:38"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "6077:117:38",
                          "nodeType": "YulBlock",
                          "src": "6077:117:38",
                          "statements": [
                            {
                              "nativeSrc": "6092:16:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "6092:16:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "6106:2:38",
                                "nodeType": "YulLiteral",
                                "src": "6106:2:38",
                                "type": "",
                                "value": "64"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "6096:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "6096:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "6122:62:38",
                              "nodeType": "YulAssignment",
                              "src": "6122:62:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "6156:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "6156:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "6167:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "6167:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "6152:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "6152:3:38"
                                    },
                                    "nativeSrc": "6152:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6152:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "6176:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "6176:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint64",
                                  "nativeSrc": "6132:19:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "6132:19:38"
                                },
                                "nativeSrc": "6132:52:38",
                                "nodeType": "YulFunctionCall",
                                "src": "6132:52:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nativeSrc": "6122:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "6122:6:38"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "6204:118:38",
                          "nodeType": "YulBlock",
                          "src": "6204:118:38",
                          "statements": [
                            {
                              "nativeSrc": "6219:16:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "6219:16:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "6233:2:38",
                                "nodeType": "YulLiteral",
                                "src": "6233:2:38",
                                "type": "",
                                "value": "96"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "6223:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "6223:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "6249:63:38",
                              "nodeType": "YulAssignment",
                              "src": "6249:63:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "6284:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "6284:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "6295:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "6295:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "6280:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "6280:3:38"
                                    },
                                    "nativeSrc": "6280:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6280:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "6304:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "6304:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "6259:20:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "6259:20:38"
                                },
                                "nativeSrc": "6259:53:38",
                                "nodeType": "YulFunctionCall",
                                "src": "6259:53:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value3",
                                  "nativeSrc": "6249:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "6249:6:38"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_addresst_uint64t_address",
                    "nativeSrc": "5566:763:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "5628:9:38",
                        "nodeType": "YulTypedName",
                        "src": "5628:9:38",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "5639:7:38",
                        "nodeType": "YulTypedName",
                        "src": "5639:7:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "5651:6:38",
                        "nodeType": "YulTypedName",
                        "src": "5651:6:38",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "5659:6:38",
                        "nodeType": "YulTypedName",
                        "src": "5659:6:38",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "5667:6:38",
                        "nodeType": "YulTypedName",
                        "src": "5667:6:38",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nativeSrc": "5675:6:38",
                        "nodeType": "YulTypedName",
                        "src": "5675:6:38",
                        "type": ""
                      }
                    ],
                    "src": "5566:763:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "6424:28:38",
                      "nodeType": "YulBlock",
                      "src": "6424:28:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "6441:1:38",
                                "nodeType": "YulLiteral",
                                "src": "6441:1:38",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6444:1:38",
                                "nodeType": "YulLiteral",
                                "src": "6444:1:38",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "6434:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "6434:6:38"
                            },
                            "nativeSrc": "6434:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "6434:12:38"
                          },
                          "nativeSrc": "6434:12:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "6434:12:38"
                        }
                      ]
                    },
                    "name": "revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d",
                    "nativeSrc": "6335:117:38",
                    "nodeType": "YulFunctionDefinition",
                    "src": "6335:117:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "6579:153:38",
                      "nodeType": "YulBlock",
                      "src": "6579:153:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "6619:83:38",
                            "nodeType": "YulBlock",
                            "src": "6619:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d",
                                    "nativeSrc": "6621:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "6621:77:38"
                                  },
                                  "nativeSrc": "6621:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6621:79:38"
                                },
                                "nativeSrc": "6621:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "6621:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "end",
                                    "nativeSrc": "6600:3:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "6600:3:38"
                                  },
                                  {
                                    "name": "offset",
                                    "nativeSrc": "6605:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "6605:6:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "6596:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "6596:3:38"
                                },
                                "nativeSrc": "6596:16:38",
                                "nodeType": "YulFunctionCall",
                                "src": "6596:16:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6614:3:38",
                                "nodeType": "YulLiteral",
                                "src": "6614:3:38",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "6592:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "6592:3:38"
                            },
                            "nativeSrc": "6592:26:38",
                            "nodeType": "YulFunctionCall",
                            "src": "6592:26:38"
                          },
                          "nativeSrc": "6589:113:38",
                          "nodeType": "YulIf",
                          "src": "6589:113:38"
                        },
                        {
                          "nativeSrc": "6711:15:38",
                          "nodeType": "YulAssignment",
                          "src": "6711:15:38",
                          "value": {
                            "name": "offset",
                            "nativeSrc": "6720:6:38",
                            "nodeType": "YulIdentifier",
                            "src": "6720:6:38"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "6711:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "6711:5:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_struct$_Any2EVMMessage_$194_calldata_ptr",
                    "nativeSrc": "6494:238:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "6557:6:38",
                        "nodeType": "YulTypedName",
                        "src": "6557:6:38",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "6565:3:38",
                        "nodeType": "YulTypedName",
                        "src": "6565:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "6573:5:38",
                        "nodeType": "YulTypedName",
                        "src": "6573:5:38",
                        "type": ""
                      }
                    ],
                    "src": "6494:238:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "6837:456:38",
                      "nodeType": "YulBlock",
                      "src": "6837:456:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "6883:83:38",
                            "nodeType": "YulBlock",
                            "src": "6883:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "6885:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "6885:77:38"
                                  },
                                  "nativeSrc": "6885:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6885:79:38"
                                },
                                "nativeSrc": "6885:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "6885:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "6858:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "6858:7:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "6867:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "6867:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "6854:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "6854:3:38"
                                },
                                "nativeSrc": "6854:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "6854:23:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6879:2:38",
                                "nodeType": "YulLiteral",
                                "src": "6879:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "6850:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "6850:3:38"
                            },
                            "nativeSrc": "6850:32:38",
                            "nodeType": "YulFunctionCall",
                            "src": "6850:32:38"
                          },
                          "nativeSrc": "6847:119:38",
                          "nodeType": "YulIf",
                          "src": "6847:119:38"
                        },
                        {
                          "nativeSrc": "6976:310:38",
                          "nodeType": "YulBlock",
                          "src": "6976:310:38",
                          "statements": [
                            {
                              "nativeSrc": "6991:45:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "6991:45:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "7022:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "7022:9:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "7033:1:38",
                                        "nodeType": "YulLiteral",
                                        "src": "7033:1:38",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "7018:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "7018:3:38"
                                    },
                                    "nativeSrc": "7018:17:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7018:17:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nativeSrc": "7005:12:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "7005:12:38"
                                },
                                "nativeSrc": "7005:31:38",
                                "nodeType": "YulFunctionCall",
                                "src": "7005:31:38"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "6995:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "6995:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "7083:83:38",
                                "nodeType": "YulBlock",
                                "src": "7083:83:38",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nativeSrc": "7085:77:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "7085:77:38"
                                      },
                                      "nativeSrc": "7085:79:38",
                                      "nodeType": "YulFunctionCall",
                                      "src": "7085:79:38"
                                    },
                                    "nativeSrc": "7085:79:38",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "7085:79:38"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "7055:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "7055:6:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "7063:18:38",
                                    "nodeType": "YulLiteral",
                                    "src": "7063:18:38",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "7052:2:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "7052:2:38"
                                },
                                "nativeSrc": "7052:30:38",
                                "nodeType": "YulFunctionCall",
                                "src": "7052:30:38"
                              },
                              "nativeSrc": "7049:117:38",
                              "nodeType": "YulIf",
                              "src": "7049:117:38"
                            },
                            {
                              "nativeSrc": "7180:96:38",
                              "nodeType": "YulAssignment",
                              "src": "7180:96:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "7248:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "7248:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "7259:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "7259:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "7244:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "7244:3:38"
                                    },
                                    "nativeSrc": "7244:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7244:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "7268:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "7268:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_struct$_Any2EVMMessage_$194_calldata_ptr",
                                  "nativeSrc": "7190:53:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "7190:53:38"
                                },
                                "nativeSrc": "7190:86:38",
                                "nodeType": "YulFunctionCall",
                                "src": "7190:86:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "7180:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "7180:6:38"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_Any2EVMMessage_$194_calldata_ptr",
                    "nativeSrc": "6738:555:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "6807:9:38",
                        "nodeType": "YulTypedName",
                        "src": "6807:9:38",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "6818:7:38",
                        "nodeType": "YulTypedName",
                        "src": "6818:7:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "6830:6:38",
                        "nodeType": "YulTypedName",
                        "src": "6830:6:38",
                        "type": ""
                      }
                    ],
                    "src": "6738:555:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "7364:53:38",
                      "nodeType": "YulBlock",
                      "src": "7364:53:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "7381:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "7381:3:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "7404:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "7404:5:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_address",
                                  "nativeSrc": "7386:17:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "7386:17:38"
                                },
                                "nativeSrc": "7386:24:38",
                                "nodeType": "YulFunctionCall",
                                "src": "7386:24:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "7374:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "7374:6:38"
                            },
                            "nativeSrc": "7374:37:38",
                            "nodeType": "YulFunctionCall",
                            "src": "7374:37:38"
                          },
                          "nativeSrc": "7374:37:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "7374:37:38"
                        }
                      ]
                    },
                    "name": "abi_encode_t_address_to_t_address_fromStack",
                    "nativeSrc": "7299:118:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "7352:5:38",
                        "nodeType": "YulTypedName",
                        "src": "7352:5:38",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "7359:3:38",
                        "nodeType": "YulTypedName",
                        "src": "7359:3:38",
                        "type": ""
                      }
                    ],
                    "src": "7299:118:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "7521:124:38",
                      "nodeType": "YulBlock",
                      "src": "7521:124:38",
                      "statements": [
                        {
                          "nativeSrc": "7531:26:38",
                          "nodeType": "YulAssignment",
                          "src": "7531:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "7543:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "7543:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "7554:2:38",
                                "nodeType": "YulLiteral",
                                "src": "7554:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "7539:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "7539:3:38"
                            },
                            "nativeSrc": "7539:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "7539:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "7531:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "7531:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "7611:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "7611:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "7624:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "7624:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "7635:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "7635:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "7620:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "7620:3:38"
                                },
                                "nativeSrc": "7620:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "7620:17:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nativeSrc": "7567:43:38",
                              "nodeType": "YulIdentifier",
                              "src": "7567:43:38"
                            },
                            "nativeSrc": "7567:71:38",
                            "nodeType": "YulFunctionCall",
                            "src": "7567:71:38"
                          },
                          "nativeSrc": "7567:71:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "7567:71:38"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nativeSrc": "7423:222:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "7493:9:38",
                        "nodeType": "YulTypedName",
                        "src": "7493:9:38",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "7505:6:38",
                        "nodeType": "YulTypedName",
                        "src": "7505:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "7516:4:38",
                        "nodeType": "YulTypedName",
                        "src": "7516:4:38",
                        "type": ""
                      }
                    ],
                    "src": "7423:222:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "7691:76:38",
                      "nodeType": "YulBlock",
                      "src": "7691:76:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "7745:16:38",
                            "nodeType": "YulBlock",
                            "src": "7745:16:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "7754:1:38",
                                      "nodeType": "YulLiteral",
                                      "src": "7754:1:38",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "7757:1:38",
                                      "nodeType": "YulLiteral",
                                      "src": "7757:1:38",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "7747:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "7747:6:38"
                                  },
                                  "nativeSrc": "7747:12:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7747:12:38"
                                },
                                "nativeSrc": "7747:12:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "7747:12:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "7714:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "7714:5:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "7736:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "7736:5:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_bool",
                                      "nativeSrc": "7721:14:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "7721:14:38"
                                    },
                                    "nativeSrc": "7721:21:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "7721:21:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "7711:2:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "7711:2:38"
                                },
                                "nativeSrc": "7711:32:38",
                                "nodeType": "YulFunctionCall",
                                "src": "7711:32:38"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "7704:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "7704:6:38"
                            },
                            "nativeSrc": "7704:40:38",
                            "nodeType": "YulFunctionCall",
                            "src": "7704:40:38"
                          },
                          "nativeSrc": "7701:60:38",
                          "nodeType": "YulIf",
                          "src": "7701:60:38"
                        }
                      ]
                    },
                    "name": "validator_revert_t_bool",
                    "nativeSrc": "7651:116:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "7684:5:38",
                        "nodeType": "YulTypedName",
                        "src": "7684:5:38",
                        "type": ""
                      }
                    ],
                    "src": "7651:116:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "7822:84:38",
                      "nodeType": "YulBlock",
                      "src": "7822:84:38",
                      "statements": [
                        {
                          "nativeSrc": "7832:29:38",
                          "nodeType": "YulAssignment",
                          "src": "7832:29:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "7854:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "7854:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "7841:12:38",
                              "nodeType": "YulIdentifier",
                              "src": "7841:12:38"
                            },
                            "nativeSrc": "7841:20:38",
                            "nodeType": "YulFunctionCall",
                            "src": "7841:20:38"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "7832:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "7832:5:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "7894:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "7894:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_bool",
                              "nativeSrc": "7870:23:38",
                              "nodeType": "YulIdentifier",
                              "src": "7870:23:38"
                            },
                            "nativeSrc": "7870:30:38",
                            "nodeType": "YulFunctionCall",
                            "src": "7870:30:38"
                          },
                          "nativeSrc": "7870:30:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "7870:30:38"
                        }
                      ]
                    },
                    "name": "abi_decode_t_bool",
                    "nativeSrc": "7773:133:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "7800:6:38",
                        "nodeType": "YulTypedName",
                        "src": "7800:6:38",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "7808:3:38",
                        "nodeType": "YulTypedName",
                        "src": "7808:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "7816:5:38",
                        "nodeType": "YulTypedName",
                        "src": "7816:5:38",
                        "type": ""
                      }
                    ],
                    "src": "7773:133:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "7991:387:38",
                      "nodeType": "YulBlock",
                      "src": "7991:387:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "8037:83:38",
                            "nodeType": "YulBlock",
                            "src": "8037:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "8039:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "8039:77:38"
                                  },
                                  "nativeSrc": "8039:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "8039:79:38"
                                },
                                "nativeSrc": "8039:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "8039:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "8012:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "8012:7:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "8021:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "8021:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "8008:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "8008:3:38"
                                },
                                "nativeSrc": "8008:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "8008:23:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "8033:2:38",
                                "nodeType": "YulLiteral",
                                "src": "8033:2:38",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "8004:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "8004:3:38"
                            },
                            "nativeSrc": "8004:32:38",
                            "nodeType": "YulFunctionCall",
                            "src": "8004:32:38"
                          },
                          "nativeSrc": "8001:119:38",
                          "nodeType": "YulIf",
                          "src": "8001:119:38"
                        },
                        {
                          "nativeSrc": "8130:116:38",
                          "nodeType": "YulBlock",
                          "src": "8130:116:38",
                          "statements": [
                            {
                              "nativeSrc": "8145:15:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "8145:15:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "8159:1:38",
                                "nodeType": "YulLiteral",
                                "src": "8159:1:38",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "8149:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "8149:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "8174:62:38",
                              "nodeType": "YulAssignment",
                              "src": "8174:62:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "8208:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "8208:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "8219:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "8219:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "8204:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "8204:3:38"
                                    },
                                    "nativeSrc": "8204:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8204:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "8228:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "8228:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint64",
                                  "nativeSrc": "8184:19:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "8184:19:38"
                                },
                                "nativeSrc": "8184:52:38",
                                "nodeType": "YulFunctionCall",
                                "src": "8184:52:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "8174:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "8174:6:38"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "8256:115:38",
                          "nodeType": "YulBlock",
                          "src": "8256:115:38",
                          "statements": [
                            {
                              "nativeSrc": "8271:16:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "8271:16:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "8285:2:38",
                                "nodeType": "YulLiteral",
                                "src": "8285:2:38",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "8275:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "8275:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "8301:60:38",
                              "nodeType": "YulAssignment",
                              "src": "8301:60:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "8333:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "8333:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "8344:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "8344:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "8329:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "8329:3:38"
                                    },
                                    "nativeSrc": "8329:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8329:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "8353:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "8353:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bool",
                                  "nativeSrc": "8311:17:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "8311:17:38"
                                },
                                "nativeSrc": "8311:50:38",
                                "nodeType": "YulFunctionCall",
                                "src": "8311:50:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nativeSrc": "8301:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "8301:6:38"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint64t_bool",
                    "nativeSrc": "7912:466:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "7953:9:38",
                        "nodeType": "YulTypedName",
                        "src": "7953:9:38",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "7964:7:38",
                        "nodeType": "YulTypedName",
                        "src": "7964:7:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "7976:6:38",
                        "nodeType": "YulTypedName",
                        "src": "7976:6:38",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "7984:6:38",
                        "nodeType": "YulTypedName",
                        "src": "7984:6:38",
                        "type": ""
                      }
                    ],
                    "src": "7912:466:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "8416:28:38",
                      "nodeType": "YulBlock",
                      "src": "8416:28:38",
                      "statements": [
                        {
                          "nativeSrc": "8426:12:38",
                          "nodeType": "YulAssignment",
                          "src": "8426:12:38",
                          "value": {
                            "name": "value",
                            "nativeSrc": "8433:5:38",
                            "nodeType": "YulIdentifier",
                            "src": "8433:5:38"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nativeSrc": "8426:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "8426:3:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "identity",
                    "nativeSrc": "8384:60:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "8402:5:38",
                        "nodeType": "YulTypedName",
                        "src": "8402:5:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nativeSrc": "8412:3:38",
                        "nodeType": "YulTypedName",
                        "src": "8412:3:38",
                        "type": ""
                      }
                    ],
                    "src": "8384:60:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "8510:82:38",
                      "nodeType": "YulBlock",
                      "src": "8510:82:38",
                      "statements": [
                        {
                          "nativeSrc": "8520:66:38",
                          "nodeType": "YulAssignment",
                          "src": "8520:66:38",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "8578:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "8578:5:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint160",
                                      "nativeSrc": "8560:17:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "8560:17:38"
                                    },
                                    "nativeSrc": "8560:24:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8560:24:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "identity",
                                  "nativeSrc": "8551:8:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "8551:8:38"
                                },
                                "nativeSrc": "8551:34:38",
                                "nodeType": "YulFunctionCall",
                                "src": "8551:34:38"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint160",
                              "nativeSrc": "8533:17:38",
                              "nodeType": "YulIdentifier",
                              "src": "8533:17:38"
                            },
                            "nativeSrc": "8533:53:38",
                            "nodeType": "YulFunctionCall",
                            "src": "8533:53:38"
                          },
                          "variableNames": [
                            {
                              "name": "converted",
                              "nativeSrc": "8520:9:38",
                              "nodeType": "YulIdentifier",
                              "src": "8520:9:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "convert_t_uint160_to_t_uint160",
                    "nativeSrc": "8450:142:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "8490:5:38",
                        "nodeType": "YulTypedName",
                        "src": "8490:5:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "converted",
                        "nativeSrc": "8500:9:38",
                        "nodeType": "YulTypedName",
                        "src": "8500:9:38",
                        "type": ""
                      }
                    ],
                    "src": "8450:142:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "8658:66:38",
                      "nodeType": "YulBlock",
                      "src": "8658:66:38",
                      "statements": [
                        {
                          "nativeSrc": "8668:50:38",
                          "nodeType": "YulAssignment",
                          "src": "8668:50:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "8712:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "8712:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "convert_t_uint160_to_t_uint160",
                              "nativeSrc": "8681:30:38",
                              "nodeType": "YulIdentifier",
                              "src": "8681:30:38"
                            },
                            "nativeSrc": "8681:37:38",
                            "nodeType": "YulFunctionCall",
                            "src": "8681:37:38"
                          },
                          "variableNames": [
                            {
                              "name": "converted",
                              "nativeSrc": "8668:9:38",
                              "nodeType": "YulIdentifier",
                              "src": "8668:9:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "convert_t_uint160_to_t_address",
                    "nativeSrc": "8598:126:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "8638:5:38",
                        "nodeType": "YulTypedName",
                        "src": "8638:5:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "converted",
                        "nativeSrc": "8648:9:38",
                        "nodeType": "YulTypedName",
                        "src": "8648:9:38",
                        "type": ""
                      }
                    ],
                    "src": "8598:126:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "8809:66:38",
                      "nodeType": "YulBlock",
                      "src": "8809:66:38",
                      "statements": [
                        {
                          "nativeSrc": "8819:50:38",
                          "nodeType": "YulAssignment",
                          "src": "8819:50:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "8863:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "8863:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "convert_t_uint160_to_t_address",
                              "nativeSrc": "8832:30:38",
                              "nodeType": "YulIdentifier",
                              "src": "8832:30:38"
                            },
                            "nativeSrc": "8832:37:38",
                            "nodeType": "YulFunctionCall",
                            "src": "8832:37:38"
                          },
                          "variableNames": [
                            {
                              "name": "converted",
                              "nativeSrc": "8819:9:38",
                              "nodeType": "YulIdentifier",
                              "src": "8819:9:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "convert_t_contract$_WrappedNFT_$7892_to_t_address",
                    "nativeSrc": "8730:145:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "8789:5:38",
                        "nodeType": "YulTypedName",
                        "src": "8789:5:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "converted",
                        "nativeSrc": "8799:9:38",
                        "nodeType": "YulTypedName",
                        "src": "8799:9:38",
                        "type": ""
                      }
                    ],
                    "src": "8730:145:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "8965:85:38",
                      "nodeType": "YulBlock",
                      "src": "8965:85:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "8982:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "8982:3:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "9037:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "9037:5:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "convert_t_contract$_WrappedNFT_$7892_to_t_address",
                                  "nativeSrc": "8987:49:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "8987:49:38"
                                },
                                "nativeSrc": "8987:56:38",
                                "nodeType": "YulFunctionCall",
                                "src": "8987:56:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "8975:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "8975:6:38"
                            },
                            "nativeSrc": "8975:69:38",
                            "nodeType": "YulFunctionCall",
                            "src": "8975:69:38"
                          },
                          "nativeSrc": "8975:69:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "8975:69:38"
                        }
                      ]
                    },
                    "name": "abi_encode_t_contract$_WrappedNFT_$7892_to_t_address_fromStack",
                    "nativeSrc": "8881:169:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "8953:5:38",
                        "nodeType": "YulTypedName",
                        "src": "8953:5:38",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "8960:3:38",
                        "nodeType": "YulTypedName",
                        "src": "8960:3:38",
                        "type": ""
                      }
                    ],
                    "src": "8881:169:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "9173:143:38",
                      "nodeType": "YulBlock",
                      "src": "9173:143:38",
                      "statements": [
                        {
                          "nativeSrc": "9183:26:38",
                          "nodeType": "YulAssignment",
                          "src": "9183:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "9195:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "9195:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "9206:2:38",
                                "nodeType": "YulLiteral",
                                "src": "9206:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "9191:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "9191:3:38"
                            },
                            "nativeSrc": "9191:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "9191:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "9183:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "9183:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "9282:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "9282:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "9295:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "9295:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "9306:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "9306:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "9291:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "9291:3:38"
                                },
                                "nativeSrc": "9291:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "9291:17:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_contract$_WrappedNFT_$7892_to_t_address_fromStack",
                              "nativeSrc": "9219:62:38",
                              "nodeType": "YulIdentifier",
                              "src": "9219:62:38"
                            },
                            "nativeSrc": "9219:90:38",
                            "nodeType": "YulFunctionCall",
                            "src": "9219:90:38"
                          },
                          "nativeSrc": "9219:90:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "9219:90:38"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_WrappedNFT_$7892__to_t_address__fromStack_reversed",
                    "nativeSrc": "9056:260:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "9145:9:38",
                        "nodeType": "YulTypedName",
                        "src": "9145:9:38",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "9157:6:38",
                        "nodeType": "YulTypedName",
                        "src": "9157:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "9168:4:38",
                        "nodeType": "YulTypedName",
                        "src": "9168:4:38",
                        "type": ""
                      }
                    ],
                    "src": "9056:260:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "9402:388:38",
                      "nodeType": "YulBlock",
                      "src": "9402:388:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "9448:83:38",
                            "nodeType": "YulBlock",
                            "src": "9448:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "9450:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "9450:77:38"
                                  },
                                  "nativeSrc": "9450:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "9450:79:38"
                                },
                                "nativeSrc": "9450:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "9450:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "9423:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "9423:7:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "9432:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "9432:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "9419:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "9419:3:38"
                                },
                                "nativeSrc": "9419:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "9419:23:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "9444:2:38",
                                "nodeType": "YulLiteral",
                                "src": "9444:2:38",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "9415:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "9415:3:38"
                            },
                            "nativeSrc": "9415:32:38",
                            "nodeType": "YulFunctionCall",
                            "src": "9415:32:38"
                          },
                          "nativeSrc": "9412:119:38",
                          "nodeType": "YulIf",
                          "src": "9412:119:38"
                        },
                        {
                          "nativeSrc": "9541:117:38",
                          "nodeType": "YulBlock",
                          "src": "9541:117:38",
                          "statements": [
                            {
                              "nativeSrc": "9556:15:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "9556:15:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "9570:1:38",
                                "nodeType": "YulLiteral",
                                "src": "9570:1:38",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "9560:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "9560:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "9585:63:38",
                              "nodeType": "YulAssignment",
                              "src": "9585:63:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "9620:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "9620:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "9631:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "9631:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9616:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "9616:3:38"
                                    },
                                    "nativeSrc": "9616:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9616:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "9640:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "9640:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "9595:20:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "9595:20:38"
                                },
                                "nativeSrc": "9595:53:38",
                                "nodeType": "YulFunctionCall",
                                "src": "9595:53:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "9585:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "9585:6:38"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "9668:115:38",
                          "nodeType": "YulBlock",
                          "src": "9668:115:38",
                          "statements": [
                            {
                              "nativeSrc": "9683:16:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "9683:16:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "9697:2:38",
                                "nodeType": "YulLiteral",
                                "src": "9697:2:38",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "9687:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "9687:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "9713:60:38",
                              "nodeType": "YulAssignment",
                              "src": "9713:60:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "9745:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "9745:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "9756:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "9756:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9741:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "9741:3:38"
                                    },
                                    "nativeSrc": "9741:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9741:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "9765:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "9765:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bool",
                                  "nativeSrc": "9723:17:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "9723:17:38"
                                },
                                "nativeSrc": "9723:50:38",
                                "nodeType": "YulFunctionCall",
                                "src": "9723:50:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nativeSrc": "9713:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "9713:6:38"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_bool",
                    "nativeSrc": "9322:468:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "9364:9:38",
                        "nodeType": "YulTypedName",
                        "src": "9364:9:38",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "9375:7:38",
                        "nodeType": "YulTypedName",
                        "src": "9375:7:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "9387:6:38",
                        "nodeType": "YulTypedName",
                        "src": "9387:6:38",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "9395:6:38",
                        "nodeType": "YulTypedName",
                        "src": "9395:6:38",
                        "type": ""
                      }
                    ],
                    "src": "9322:468:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "9824:152:38",
                      "nodeType": "YulBlock",
                      "src": "9824:152:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "9841:1:38",
                                "nodeType": "YulLiteral",
                                "src": "9841:1:38",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "9844:77:38",
                                "nodeType": "YulLiteral",
                                "src": "9844:77:38",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "9834:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "9834:6:38"
                            },
                            "nativeSrc": "9834:88:38",
                            "nodeType": "YulFunctionCall",
                            "src": "9834:88:38"
                          },
                          "nativeSrc": "9834:88:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "9834:88:38"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "9938:1:38",
                                "nodeType": "YulLiteral",
                                "src": "9938:1:38",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "9941:4:38",
                                "nodeType": "YulLiteral",
                                "src": "9941:4:38",
                                "type": "",
                                "value": "0x22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "9931:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "9931:6:38"
                            },
                            "nativeSrc": "9931:15:38",
                            "nodeType": "YulFunctionCall",
                            "src": "9931:15:38"
                          },
                          "nativeSrc": "9931:15:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "9931:15:38"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "9962:1:38",
                                "nodeType": "YulLiteral",
                                "src": "9962:1:38",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "9965:4:38",
                                "nodeType": "YulLiteral",
                                "src": "9965:4:38",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "9955:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "9955:6:38"
                            },
                            "nativeSrc": "9955:15:38",
                            "nodeType": "YulFunctionCall",
                            "src": "9955:15:38"
                          },
                          "nativeSrc": "9955:15:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "9955:15:38"
                        }
                      ]
                    },
                    "name": "panic_error_0x22",
                    "nativeSrc": "9796:180:38",
                    "nodeType": "YulFunctionDefinition",
                    "src": "9796:180:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "10033:269:38",
                      "nodeType": "YulBlock",
                      "src": "10033:269:38",
                      "statements": [
                        {
                          "nativeSrc": "10043:22:38",
                          "nodeType": "YulAssignment",
                          "src": "10043:22:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "10057:4:38",
                                "nodeType": "YulIdentifier",
                                "src": "10057:4:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "10063:1:38",
                                "nodeType": "YulLiteral",
                                "src": "10063:1:38",
                                "type": "",
                                "value": "2"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nativeSrc": "10053:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "10053:3:38"
                            },
                            "nativeSrc": "10053:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "10053:12:38"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nativeSrc": "10043:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "10043:6:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "10074:38:38",
                          "nodeType": "YulVariableDeclaration",
                          "src": "10074:38:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "10104:4:38",
                                "nodeType": "YulIdentifier",
                                "src": "10104:4:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "10110:1:38",
                                "nodeType": "YulLiteral",
                                "src": "10110:1:38",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "10100:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "10100:3:38"
                            },
                            "nativeSrc": "10100:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "10100:12:38"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nativeSrc": "10078:18:38",
                              "nodeType": "YulTypedName",
                              "src": "10078:18:38",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "10151:51:38",
                            "nodeType": "YulBlock",
                            "src": "10151:51:38",
                            "statements": [
                              {
                                "nativeSrc": "10165:27:38",
                                "nodeType": "YulAssignment",
                                "src": "10165:27:38",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nativeSrc": "10179:6:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "10179:6:38"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "10187:4:38",
                                      "nodeType": "YulLiteral",
                                      "src": "10187:4:38",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "10175:3:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "10175:3:38"
                                  },
                                  "nativeSrc": "10175:17:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "10175:17:38"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "10165:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "10165:6:38"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "10131:18:38",
                                "nodeType": "YulIdentifier",
                                "src": "10131:18:38"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "10124:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "10124:6:38"
                            },
                            "nativeSrc": "10124:26:38",
                            "nodeType": "YulFunctionCall",
                            "src": "10124:26:38"
                          },
                          "nativeSrc": "10121:81:38",
                          "nodeType": "YulIf",
                          "src": "10121:81:38"
                        },
                        {
                          "body": {
                            "nativeSrc": "10254:42:38",
                            "nodeType": "YulBlock",
                            "src": "10254:42:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x22",
                                    "nativeSrc": "10268:16:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "10268:16:38"
                                  },
                                  "nativeSrc": "10268:18:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "10268:18:38"
                                },
                                "nativeSrc": "10268:18:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "10268:18:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "10218:18:38",
                                "nodeType": "YulIdentifier",
                                "src": "10218:18:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "10241:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "10241:6:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10249:2:38",
                                    "nodeType": "YulLiteral",
                                    "src": "10249:2:38",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "10238:2:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "10238:2:38"
                                },
                                "nativeSrc": "10238:14:38",
                                "nodeType": "YulFunctionCall",
                                "src": "10238:14:38"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nativeSrc": "10215:2:38",
                              "nodeType": "YulIdentifier",
                              "src": "10215:2:38"
                            },
                            "nativeSrc": "10215:38:38",
                            "nodeType": "YulFunctionCall",
                            "src": "10215:38:38"
                          },
                          "nativeSrc": "10212:84:38",
                          "nodeType": "YulIf",
                          "src": "10212:84:38"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nativeSrc": "9982:320:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nativeSrc": "10017:4:38",
                        "nodeType": "YulTypedName",
                        "src": "10017:4:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nativeSrc": "10026:6:38",
                        "nodeType": "YulTypedName",
                        "src": "10026:6:38",
                        "type": ""
                      }
                    ],
                    "src": "9982:320:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "10371:80:38",
                      "nodeType": "YulBlock",
                      "src": "10371:80:38",
                      "statements": [
                        {
                          "nativeSrc": "10381:22:38",
                          "nodeType": "YulAssignment",
                          "src": "10381:22:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "10396:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "10396:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "10390:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "10390:5:38"
                            },
                            "nativeSrc": "10390:13:38",
                            "nodeType": "YulFunctionCall",
                            "src": "10390:13:38"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "10381:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "10381:5:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "10439:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "10439:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_uint256",
                              "nativeSrc": "10412:26:38",
                              "nodeType": "YulIdentifier",
                              "src": "10412:26:38"
                            },
                            "nativeSrc": "10412:33:38",
                            "nodeType": "YulFunctionCall",
                            "src": "10412:33:38"
                          },
                          "nativeSrc": "10412:33:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "10412:33:38"
                        }
                      ]
                    },
                    "name": "abi_decode_t_uint256_fromMemory",
                    "nativeSrc": "10308:143:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "10349:6:38",
                        "nodeType": "YulTypedName",
                        "src": "10349:6:38",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "10357:3:38",
                        "nodeType": "YulTypedName",
                        "src": "10357:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "10365:5:38",
                        "nodeType": "YulTypedName",
                        "src": "10365:5:38",
                        "type": ""
                      }
                    ],
                    "src": "10308:143:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "10534:274:38",
                      "nodeType": "YulBlock",
                      "src": "10534:274:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "10580:83:38",
                            "nodeType": "YulBlock",
                            "src": "10580:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "10582:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "10582:77:38"
                                  },
                                  "nativeSrc": "10582:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "10582:79:38"
                                },
                                "nativeSrc": "10582:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "10582:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "10555:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "10555:7:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "10564:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "10564:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "10551:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "10551:3:38"
                                },
                                "nativeSrc": "10551:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "10551:23:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "10576:2:38",
                                "nodeType": "YulLiteral",
                                "src": "10576:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "10547:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "10547:3:38"
                            },
                            "nativeSrc": "10547:32:38",
                            "nodeType": "YulFunctionCall",
                            "src": "10547:32:38"
                          },
                          "nativeSrc": "10544:119:38",
                          "nodeType": "YulIf",
                          "src": "10544:119:38"
                        },
                        {
                          "nativeSrc": "10673:128:38",
                          "nodeType": "YulBlock",
                          "src": "10673:128:38",
                          "statements": [
                            {
                              "nativeSrc": "10688:15:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "10688:15:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "10702:1:38",
                                "nodeType": "YulLiteral",
                                "src": "10702:1:38",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "10692:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "10692:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "10717:74:38",
                              "nodeType": "YulAssignment",
                              "src": "10717:74:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "10763:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "10763:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "10774:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "10774:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "10759:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "10759:3:38"
                                    },
                                    "nativeSrc": "10759:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10759:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "10783:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "10783:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256_fromMemory",
                                  "nativeSrc": "10727:31:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "10727:31:38"
                                },
                                "nativeSrc": "10727:64:38",
                                "nodeType": "YulFunctionCall",
                                "src": "10727:64:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "10717:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "10717:6:38"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nativeSrc": "10457:351:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "10504:9:38",
                        "nodeType": "YulTypedName",
                        "src": "10504:9:38",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "10515:7:38",
                        "nodeType": "YulTypedName",
                        "src": "10515:7:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "10527:6:38",
                        "nodeType": "YulTypedName",
                        "src": "10527:6:38",
                        "type": ""
                      }
                    ],
                    "src": "10457:351:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "10927:34:38",
                      "nodeType": "YulBlock",
                      "src": "10927:34:38",
                      "statements": [
                        {
                          "nativeSrc": "10937:18:38",
                          "nodeType": "YulAssignment",
                          "src": "10937:18:38",
                          "value": {
                            "name": "pos",
                            "nativeSrc": "10952:3:38",
                            "nodeType": "YulIdentifier",
                            "src": "10952:3:38"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nativeSrc": "10937:11:38",
                              "nodeType": "YulIdentifier",
                              "src": "10937:11:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
                    "nativeSrc": "10814:147:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "10899:3:38",
                        "nodeType": "YulTypedName",
                        "src": "10899:3:38",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "10904:6:38",
                        "nodeType": "YulTypedName",
                        "src": "10904:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nativeSrc": "10915:11:38",
                        "nodeType": "YulTypedName",
                        "src": "10915:11:38",
                        "type": ""
                      }
                    ],
                    "src": "10814:147:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "11073:8:38",
                      "nodeType": "YulBlock",
                      "src": "11073:8:38",
                      "statements": []
                    },
                    "name": "store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                    "nativeSrc": "10967:114:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "11065:6:38",
                        "nodeType": "YulTypedName",
                        "src": "11065:6:38",
                        "type": ""
                      }
                    ],
                    "src": "10967:114:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "11250:235:38",
                      "nodeType": "YulBlock",
                      "src": "11250:235:38",
                      "statements": [
                        {
                          "nativeSrc": "11260:90:38",
                          "nodeType": "YulAssignment",
                          "src": "11260:90:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "11343:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "11343:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "11348:1:38",
                                "nodeType": "YulLiteral",
                                "src": "11348:1:38",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
                              "nativeSrc": "11267:75:38",
                              "nodeType": "YulIdentifier",
                              "src": "11267:75:38"
                            },
                            "nativeSrc": "11267:83:38",
                            "nodeType": "YulFunctionCall",
                            "src": "11267:83:38"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "11260:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "11260:3:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "11448:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "11448:3:38"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "nativeSrc": "11359:88:38",
                              "nodeType": "YulIdentifier",
                              "src": "11359:88:38"
                            },
                            "nativeSrc": "11359:93:38",
                            "nodeType": "YulFunctionCall",
                            "src": "11359:93:38"
                          },
                          "nativeSrc": "11359:93:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "11359:93:38"
                        },
                        {
                          "nativeSrc": "11461:18:38",
                          "nodeType": "YulAssignment",
                          "src": "11461:18:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "11472:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "11472:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "11477:1:38",
                                "nodeType": "YulLiteral",
                                "src": "11477:1:38",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "11468:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "11468:3:38"
                            },
                            "nativeSrc": "11468:11:38",
                            "nodeType": "YulFunctionCall",
                            "src": "11468:11:38"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "11461:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "11461:3:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
                    "nativeSrc": "11087:398:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "11238:3:38",
                        "nodeType": "YulTypedName",
                        "src": "11238:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "11246:3:38",
                        "nodeType": "YulTypedName",
                        "src": "11246:3:38",
                        "type": ""
                      }
                    ],
                    "src": "11087:398:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "11679:191:38",
                      "nodeType": "YulBlock",
                      "src": "11679:191:38",
                      "statements": [
                        {
                          "nativeSrc": "11690:154:38",
                          "nodeType": "YulAssignment",
                          "src": "11690:154:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "11840:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "11840:3:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
                              "nativeSrc": "11697:141:38",
                              "nodeType": "YulIdentifier",
                              "src": "11697:141:38"
                            },
                            "nativeSrc": "11697:147:38",
                            "nodeType": "YulFunctionCall",
                            "src": "11697:147:38"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "11690:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "11690:3:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "11854:10:38",
                          "nodeType": "YulAssignment",
                          "src": "11854:10:38",
                          "value": {
                            "name": "pos",
                            "nativeSrc": "11861:3:38",
                            "nodeType": "YulIdentifier",
                            "src": "11861:3:38"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "11854:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "11854:3:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nativeSrc": "11491:379:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "11666:3:38",
                        "nodeType": "YulTypedName",
                        "src": "11666:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "11675:3:38",
                        "nodeType": "YulTypedName",
                        "src": "11675:3:38",
                        "type": ""
                      }
                    ],
                    "src": "11491:379:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "11941:53:38",
                      "nodeType": "YulBlock",
                      "src": "11941:53:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "11958:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "11958:3:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "11981:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "11981:5:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint256",
                                  "nativeSrc": "11963:17:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "11963:17:38"
                                },
                                "nativeSrc": "11963:24:38",
                                "nodeType": "YulFunctionCall",
                                "src": "11963:24:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "11951:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "11951:6:38"
                            },
                            "nativeSrc": "11951:37:38",
                            "nodeType": "YulFunctionCall",
                            "src": "11951:37:38"
                          },
                          "nativeSrc": "11951:37:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "11951:37:38"
                        }
                      ]
                    },
                    "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                    "nativeSrc": "11876:118:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "11929:5:38",
                        "nodeType": "YulTypedName",
                        "src": "11929:5:38",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "11936:3:38",
                        "nodeType": "YulTypedName",
                        "src": "11936:3:38",
                        "type": ""
                      }
                    ],
                    "src": "11876:118:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "12154:288:38",
                      "nodeType": "YulBlock",
                      "src": "12154:288:38",
                      "statements": [
                        {
                          "nativeSrc": "12164:26:38",
                          "nodeType": "YulAssignment",
                          "src": "12164:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "12176:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "12176:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "12187:2:38",
                                "nodeType": "YulLiteral",
                                "src": "12187:2:38",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "12172:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "12172:3:38"
                            },
                            "nativeSrc": "12172:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "12172:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "12164:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "12164:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "12244:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "12244:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "12257:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "12257:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "12268:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "12268:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "12253:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "12253:3:38"
                                },
                                "nativeSrc": "12253:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "12253:17:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nativeSrc": "12200:43:38",
                              "nodeType": "YulIdentifier",
                              "src": "12200:43:38"
                            },
                            "nativeSrc": "12200:71:38",
                            "nodeType": "YulFunctionCall",
                            "src": "12200:71:38"
                          },
                          "nativeSrc": "12200:71:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "12200:71:38"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nativeSrc": "12325:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "12325:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "12338:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "12338:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "12349:2:38",
                                    "nodeType": "YulLiteral",
                                    "src": "12349:2:38",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "12334:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "12334:3:38"
                                },
                                "nativeSrc": "12334:18:38",
                                "nodeType": "YulFunctionCall",
                                "src": "12334:18:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nativeSrc": "12281:43:38",
                              "nodeType": "YulIdentifier",
                              "src": "12281:43:38"
                            },
                            "nativeSrc": "12281:72:38",
                            "nodeType": "YulFunctionCall",
                            "src": "12281:72:38"
                          },
                          "nativeSrc": "12281:72:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "12281:72:38"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nativeSrc": "12407:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "12407:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "12420:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "12420:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "12431:2:38",
                                    "nodeType": "YulLiteral",
                                    "src": "12431:2:38",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "12416:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "12416:3:38"
                                },
                                "nativeSrc": "12416:18:38",
                                "nodeType": "YulFunctionCall",
                                "src": "12416:18:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nativeSrc": "12363:43:38",
                              "nodeType": "YulIdentifier",
                              "src": "12363:43:38"
                            },
                            "nativeSrc": "12363:72:38",
                            "nodeType": "YulFunctionCall",
                            "src": "12363:72:38"
                          },
                          "nativeSrc": "12363:72:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "12363:72:38"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                    "nativeSrc": "12000:442:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "12110:9:38",
                        "nodeType": "YulTypedName",
                        "src": "12110:9:38",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "12122:6:38",
                        "nodeType": "YulTypedName",
                        "src": "12122:6:38",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "12130:6:38",
                        "nodeType": "YulTypedName",
                        "src": "12130:6:38",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "12138:6:38",
                        "nodeType": "YulTypedName",
                        "src": "12138:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "12149:4:38",
                        "nodeType": "YulTypedName",
                        "src": "12149:4:38",
                        "type": ""
                      }
                    ],
                    "src": "12000:442:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "12554:66:38",
                      "nodeType": "YulBlock",
                      "src": "12554:66:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "12576:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "12576:6:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "12584:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "12584:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "12572:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "12572:3:38"
                                },
                                "nativeSrc": "12572:14:38",
                                "nodeType": "YulFunctionCall",
                                "src": "12572:14:38"
                              },
                              {
                                "hexValue": "4d7573742062652070726f706f736564206f776e6572",
                                "kind": "string",
                                "nativeSrc": "12588:24:38",
                                "nodeType": "YulLiteral",
                                "src": "12588:24:38",
                                "type": "",
                                "value": "Must be proposed owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "12565:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "12565:6:38"
                            },
                            "nativeSrc": "12565:48:38",
                            "nodeType": "YulFunctionCall",
                            "src": "12565:48:38"
                          },
                          "nativeSrc": "12565:48:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "12565:48:38"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c",
                    "nativeSrc": "12448:172:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "12546:6:38",
                        "nodeType": "YulTypedName",
                        "src": "12546:6:38",
                        "type": ""
                      }
                    ],
                    "src": "12448:172:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "12772:220:38",
                      "nodeType": "YulBlock",
                      "src": "12772:220:38",
                      "statements": [
                        {
                          "nativeSrc": "12782:74:38",
                          "nodeType": "YulAssignment",
                          "src": "12782:74:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "12848:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "12848:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "12853:2:38",
                                "nodeType": "YulLiteral",
                                "src": "12853:2:38",
                                "type": "",
                                "value": "22"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nativeSrc": "12789:58:38",
                              "nodeType": "YulIdentifier",
                              "src": "12789:58:38"
                            },
                            "nativeSrc": "12789:67:38",
                            "nodeType": "YulFunctionCall",
                            "src": "12789:67:38"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "12782:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "12782:3:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "12954:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "12954:3:38"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c",
                              "nativeSrc": "12865:88:38",
                              "nodeType": "YulIdentifier",
                              "src": "12865:88:38"
                            },
                            "nativeSrc": "12865:93:38",
                            "nodeType": "YulFunctionCall",
                            "src": "12865:93:38"
                          },
                          "nativeSrc": "12865:93:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "12865:93:38"
                        },
                        {
                          "nativeSrc": "12967:19:38",
                          "nodeType": "YulAssignment",
                          "src": "12967:19:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "12978:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "12978:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "12983:2:38",
                                "nodeType": "YulLiteral",
                                "src": "12983:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "12974:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "12974:3:38"
                            },
                            "nativeSrc": "12974:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "12974:12:38"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "12967:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "12967:3:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack",
                    "nativeSrc": "12626:366:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "12760:3:38",
                        "nodeType": "YulTypedName",
                        "src": "12760:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "12768:3:38",
                        "nodeType": "YulTypedName",
                        "src": "12768:3:38",
                        "type": ""
                      }
                    ],
                    "src": "12626:366:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "13169:248:38",
                      "nodeType": "YulBlock",
                      "src": "13169:248:38",
                      "statements": [
                        {
                          "nativeSrc": "13179:26:38",
                          "nodeType": "YulAssignment",
                          "src": "13179:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "13191:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "13191:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "13202:2:38",
                                "nodeType": "YulLiteral",
                                "src": "13202:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "13187:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "13187:3:38"
                            },
                            "nativeSrc": "13187:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "13187:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "13179:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "13179:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "13226:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "13226:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "13237:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "13237:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "13222:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "13222:3:38"
                                },
                                "nativeSrc": "13222:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "13222:17:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nativeSrc": "13245:4:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "13245:4:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "13251:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "13251:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "13241:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "13241:3:38"
                                },
                                "nativeSrc": "13241:20:38",
                                "nodeType": "YulFunctionCall",
                                "src": "13241:20:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "13215:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "13215:6:38"
                            },
                            "nativeSrc": "13215:47:38",
                            "nodeType": "YulFunctionCall",
                            "src": "13215:47:38"
                          },
                          "nativeSrc": "13215:47:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "13215:47:38"
                        },
                        {
                          "nativeSrc": "13271:139:38",
                          "nodeType": "YulAssignment",
                          "src": "13271:139:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nativeSrc": "13405:4:38",
                                "nodeType": "YulIdentifier",
                                "src": "13405:4:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack",
                              "nativeSrc": "13279:124:38",
                              "nodeType": "YulIdentifier",
                              "src": "13279:124:38"
                            },
                            "nativeSrc": "13279:131:38",
                            "nodeType": "YulFunctionCall",
                            "src": "13279:131:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "13271:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "13271:4:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed",
                    "nativeSrc": "12998:419:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "13149:9:38",
                        "nodeType": "YulTypedName",
                        "src": "13149:9:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "13164:4:38",
                        "nodeType": "YulTypedName",
                        "src": "13164:4:38",
                        "type": ""
                      }
                    ],
                    "src": "12998:419:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "13521:124:38",
                      "nodeType": "YulBlock",
                      "src": "13521:124:38",
                      "statements": [
                        {
                          "nativeSrc": "13531:26:38",
                          "nodeType": "YulAssignment",
                          "src": "13531:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "13543:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "13543:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "13554:2:38",
                                "nodeType": "YulLiteral",
                                "src": "13554:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "13539:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "13539:3:38"
                            },
                            "nativeSrc": "13539:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "13539:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "13531:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "13531:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "13611:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "13611:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "13624:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "13624:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "13635:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "13635:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "13620:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "13620:3:38"
                                },
                                "nativeSrc": "13620:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "13620:17:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nativeSrc": "13567:43:38",
                              "nodeType": "YulIdentifier",
                              "src": "13567:43:38"
                            },
                            "nativeSrc": "13567:71:38",
                            "nodeType": "YulFunctionCall",
                            "src": "13567:71:38"
                          },
                          "nativeSrc": "13567:71:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "13567:71:38"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nativeSrc": "13423:222:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "13493:9:38",
                        "nodeType": "YulTypedName",
                        "src": "13493:9:38",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "13505:6:38",
                        "nodeType": "YulTypedName",
                        "src": "13505:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "13516:4:38",
                        "nodeType": "YulTypedName",
                        "src": "13516:4:38",
                        "type": ""
                      }
                    ],
                    "src": "13423:222:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "13777:206:38",
                      "nodeType": "YulBlock",
                      "src": "13777:206:38",
                      "statements": [
                        {
                          "nativeSrc": "13787:26:38",
                          "nodeType": "YulAssignment",
                          "src": "13787:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "13799:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "13799:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "13810:2:38",
                                "nodeType": "YulLiteral",
                                "src": "13810:2:38",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "13795:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "13795:3:38"
                            },
                            "nativeSrc": "13795:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "13795:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "13787:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "13787:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "13867:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "13867:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "13880:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "13880:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "13891:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "13891:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "13876:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "13876:3:38"
                                },
                                "nativeSrc": "13876:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "13876:17:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nativeSrc": "13823:43:38",
                              "nodeType": "YulIdentifier",
                              "src": "13823:43:38"
                            },
                            "nativeSrc": "13823:71:38",
                            "nodeType": "YulFunctionCall",
                            "src": "13823:71:38"
                          },
                          "nativeSrc": "13823:71:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "13823:71:38"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nativeSrc": "13948:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "13948:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "13961:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "13961:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "13972:2:38",
                                    "nodeType": "YulLiteral",
                                    "src": "13972:2:38",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "13957:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "13957:3:38"
                                },
                                "nativeSrc": "13957:18:38",
                                "nodeType": "YulFunctionCall",
                                "src": "13957:18:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nativeSrc": "13904:43:38",
                              "nodeType": "YulIdentifier",
                              "src": "13904:43:38"
                            },
                            "nativeSrc": "13904:72:38",
                            "nodeType": "YulFunctionCall",
                            "src": "13904:72:38"
                          },
                          "nativeSrc": "13904:72:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "13904:72:38"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed",
                    "nativeSrc": "13651:332:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "13741:9:38",
                        "nodeType": "YulTypedName",
                        "src": "13741:9:38",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "13753:6:38",
                        "nodeType": "YulTypedName",
                        "src": "13753:6:38",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "13761:6:38",
                        "nodeType": "YulTypedName",
                        "src": "13761:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "13772:4:38",
                        "nodeType": "YulTypedName",
                        "src": "13772:4:38",
                        "type": ""
                      }
                    ],
                    "src": "13651:332:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "14078:28:38",
                      "nodeType": "YulBlock",
                      "src": "14078:28:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "14095:1:38",
                                "nodeType": "YulLiteral",
                                "src": "14095:1:38",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "14098:1:38",
                                "nodeType": "YulLiteral",
                                "src": "14098:1:38",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "14088:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "14088:6:38"
                            },
                            "nativeSrc": "14088:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "14088:12:38"
                          },
                          "nativeSrc": "14088:12:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "14088:12:38"
                        }
                      ]
                    },
                    "name": "revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f",
                    "nativeSrc": "13989:117:38",
                    "nodeType": "YulFunctionDefinition",
                    "src": "13989:117:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "14140:152:38",
                      "nodeType": "YulBlock",
                      "src": "14140:152:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "14157:1:38",
                                "nodeType": "YulLiteral",
                                "src": "14157:1:38",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "14160:77:38",
                                "nodeType": "YulLiteral",
                                "src": "14160:77:38",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "14150:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "14150:6:38"
                            },
                            "nativeSrc": "14150:88:38",
                            "nodeType": "YulFunctionCall",
                            "src": "14150:88:38"
                          },
                          "nativeSrc": "14150:88:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "14150:88:38"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "14254:1:38",
                                "nodeType": "YulLiteral",
                                "src": "14254:1:38",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "14257:4:38",
                                "nodeType": "YulLiteral",
                                "src": "14257:4:38",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "14247:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "14247:6:38"
                            },
                            "nativeSrc": "14247:15:38",
                            "nodeType": "YulFunctionCall",
                            "src": "14247:15:38"
                          },
                          "nativeSrc": "14247:15:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "14247:15:38"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "14278:1:38",
                                "nodeType": "YulLiteral",
                                "src": "14278:1:38",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "14281:4:38",
                                "nodeType": "YulLiteral",
                                "src": "14281:4:38",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "14271:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "14271:6:38"
                            },
                            "nativeSrc": "14271:15:38",
                            "nodeType": "YulFunctionCall",
                            "src": "14271:15:38"
                          },
                          "nativeSrc": "14271:15:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "14271:15:38"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nativeSrc": "14112:180:38",
                    "nodeType": "YulFunctionDefinition",
                    "src": "14112:180:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "14341:238:38",
                      "nodeType": "YulBlock",
                      "src": "14341:238:38",
                      "statements": [
                        {
                          "nativeSrc": "14351:58:38",
                          "nodeType": "YulVariableDeclaration",
                          "src": "14351:58:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nativeSrc": "14373:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "14373:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "size",
                                    "nativeSrc": "14403:4:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "14403:4:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nativeSrc": "14381:21:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "14381:21:38"
                                },
                                "nativeSrc": "14381:27:38",
                                "nodeType": "YulFunctionCall",
                                "src": "14381:27:38"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "14369:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "14369:3:38"
                            },
                            "nativeSrc": "14369:40:38",
                            "nodeType": "YulFunctionCall",
                            "src": "14369:40:38"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nativeSrc": "14355:10:38",
                              "nodeType": "YulTypedName",
                              "src": "14355:10:38",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "14520:22:38",
                            "nodeType": "YulBlock",
                            "src": "14520:22:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nativeSrc": "14522:16:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "14522:16:38"
                                  },
                                  "nativeSrc": "14522:18:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "14522:18:38"
                                },
                                "nativeSrc": "14522:18:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "14522:18:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nativeSrc": "14463:10:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "14463:10:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "14475:18:38",
                                    "nodeType": "YulLiteral",
                                    "src": "14475:18:38",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "14460:2:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "14460:2:38"
                                },
                                "nativeSrc": "14460:34:38",
                                "nodeType": "YulFunctionCall",
                                "src": "14460:34:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nativeSrc": "14499:10:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "14499:10:38"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "14511:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "14511:6:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "14496:2:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "14496:2:38"
                                },
                                "nativeSrc": "14496:22:38",
                                "nodeType": "YulFunctionCall",
                                "src": "14496:22:38"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nativeSrc": "14457:2:38",
                              "nodeType": "YulIdentifier",
                              "src": "14457:2:38"
                            },
                            "nativeSrc": "14457:62:38",
                            "nodeType": "YulFunctionCall",
                            "src": "14457:62:38"
                          },
                          "nativeSrc": "14454:88:38",
                          "nodeType": "YulIf",
                          "src": "14454:88:38"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "14558:2:38",
                                "nodeType": "YulLiteral",
                                "src": "14558:2:38",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nativeSrc": "14562:10:38",
                                "nodeType": "YulIdentifier",
                                "src": "14562:10:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "14551:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "14551:6:38"
                            },
                            "nativeSrc": "14551:22:38",
                            "nodeType": "YulFunctionCall",
                            "src": "14551:22:38"
                          },
                          "nativeSrc": "14551:22:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "14551:22:38"
                        }
                      ]
                    },
                    "name": "finalize_allocation",
                    "nativeSrc": "14298:281:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "14327:6:38",
                        "nodeType": "YulTypedName",
                        "src": "14327:6:38",
                        "type": ""
                      },
                      {
                        "name": "size",
                        "nativeSrc": "14335:4:38",
                        "nodeType": "YulTypedName",
                        "src": "14335:4:38",
                        "type": ""
                      }
                    ],
                    "src": "14298:281:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "14626:88:38",
                      "nodeType": "YulBlock",
                      "src": "14626:88:38",
                      "statements": [
                        {
                          "nativeSrc": "14636:30:38",
                          "nodeType": "YulAssignment",
                          "src": "14636:30:38",
                          "value": {
                            "arguments": [],
                            "functionName": {
                              "name": "allocate_unbounded",
                              "nativeSrc": "14646:18:38",
                              "nodeType": "YulIdentifier",
                              "src": "14646:18:38"
                            },
                            "nativeSrc": "14646:20:38",
                            "nodeType": "YulFunctionCall",
                            "src": "14646:20:38"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nativeSrc": "14636:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "14636:6:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nativeSrc": "14695:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "14695:6:38"
                              },
                              {
                                "name": "size",
                                "nativeSrc": "14703:4:38",
                                "nodeType": "YulIdentifier",
                                "src": "14703:4:38"
                              }
                            ],
                            "functionName": {
                              "name": "finalize_allocation",
                              "nativeSrc": "14675:19:38",
                              "nodeType": "YulIdentifier",
                              "src": "14675:19:38"
                            },
                            "nativeSrc": "14675:33:38",
                            "nodeType": "YulFunctionCall",
                            "src": "14675:33:38"
                          },
                          "nativeSrc": "14675:33:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "14675:33:38"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nativeSrc": "14585:129:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nativeSrc": "14610:4:38",
                        "nodeType": "YulTypedName",
                        "src": "14610:4:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "14619:6:38",
                        "nodeType": "YulTypedName",
                        "src": "14619:6:38",
                        "type": ""
                      }
                    ],
                    "src": "14585:129:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "14809:28:38",
                      "nodeType": "YulBlock",
                      "src": "14809:28:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "14826:1:38",
                                "nodeType": "YulLiteral",
                                "src": "14826:1:38",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "14829:1:38",
                                "nodeType": "YulLiteral",
                                "src": "14829:1:38",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "14819:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "14819:6:38"
                            },
                            "nativeSrc": "14819:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "14819:12:38"
                          },
                          "nativeSrc": "14819:12:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "14819:12:38"
                        }
                      ]
                    },
                    "name": "revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421",
                    "nativeSrc": "14720:117:38",
                    "nodeType": "YulFunctionDefinition",
                    "src": "14720:117:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "14886:79:38",
                      "nodeType": "YulBlock",
                      "src": "14886:79:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "14943:16:38",
                            "nodeType": "YulBlock",
                            "src": "14943:16:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "14952:1:38",
                                      "nodeType": "YulLiteral",
                                      "src": "14952:1:38",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "14955:1:38",
                                      "nodeType": "YulLiteral",
                                      "src": "14955:1:38",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "14945:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "14945:6:38"
                                  },
                                  "nativeSrc": "14945:12:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "14945:12:38"
                                },
                                "nativeSrc": "14945:12:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "14945:12:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "14909:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "14909:5:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "14934:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "14934:5:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_bytes32",
                                      "nativeSrc": "14916:17:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "14916:17:38"
                                    },
                                    "nativeSrc": "14916:24:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "14916:24:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "14906:2:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "14906:2:38"
                                },
                                "nativeSrc": "14906:35:38",
                                "nodeType": "YulFunctionCall",
                                "src": "14906:35:38"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "14899:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "14899:6:38"
                            },
                            "nativeSrc": "14899:43:38",
                            "nodeType": "YulFunctionCall",
                            "src": "14899:43:38"
                          },
                          "nativeSrc": "14896:63:38",
                          "nodeType": "YulIf",
                          "src": "14896:63:38"
                        }
                      ]
                    },
                    "name": "validator_revert_t_bytes32",
                    "nativeSrc": "14843:122:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "14879:5:38",
                        "nodeType": "YulTypedName",
                        "src": "14879:5:38",
                        "type": ""
                      }
                    ],
                    "src": "14843:122:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "15023:87:38",
                      "nodeType": "YulBlock",
                      "src": "15023:87:38",
                      "statements": [
                        {
                          "nativeSrc": "15033:29:38",
                          "nodeType": "YulAssignment",
                          "src": "15033:29:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "15055:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "15055:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "15042:12:38",
                              "nodeType": "YulIdentifier",
                              "src": "15042:12:38"
                            },
                            "nativeSrc": "15042:20:38",
                            "nodeType": "YulFunctionCall",
                            "src": "15042:20:38"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "15033:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "15033:5:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "15098:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "15098:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_bytes32",
                              "nativeSrc": "15071:26:38",
                              "nodeType": "YulIdentifier",
                              "src": "15071:26:38"
                            },
                            "nativeSrc": "15071:33:38",
                            "nodeType": "YulFunctionCall",
                            "src": "15071:33:38"
                          },
                          "nativeSrc": "15071:33:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "15071:33:38"
                        }
                      ]
                    },
                    "name": "abi_decode_t_bytes32",
                    "nativeSrc": "14971:139:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "15001:6:38",
                        "nodeType": "YulTypedName",
                        "src": "15001:6:38",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "15009:3:38",
                        "nodeType": "YulTypedName",
                        "src": "15009:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "15017:5:38",
                        "nodeType": "YulTypedName",
                        "src": "15017:5:38",
                        "type": ""
                      }
                    ],
                    "src": "14971:139:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "15205:28:38",
                      "nodeType": "YulBlock",
                      "src": "15205:28:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "15222:1:38",
                                "nodeType": "YulLiteral",
                                "src": "15222:1:38",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "15225:1:38",
                                "nodeType": "YulLiteral",
                                "src": "15225:1:38",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "15215:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "15215:6:38"
                            },
                            "nativeSrc": "15215:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "15215:12:38"
                          },
                          "nativeSrc": "15215:12:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "15215:12:38"
                        }
                      ]
                    },
                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                    "nativeSrc": "15116:117:38",
                    "nodeType": "YulFunctionDefinition",
                    "src": "15116:117:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "15328:28:38",
                      "nodeType": "YulBlock",
                      "src": "15328:28:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "15345:1:38",
                                "nodeType": "YulLiteral",
                                "src": "15345:1:38",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "15348:1:38",
                                "nodeType": "YulLiteral",
                                "src": "15348:1:38",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "15338:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "15338:6:38"
                            },
                            "nativeSrc": "15338:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "15338:12:38"
                          },
                          "nativeSrc": "15338:12:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "15338:12:38"
                        }
                      ]
                    },
                    "name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                    "nativeSrc": "15239:117:38",
                    "nodeType": "YulFunctionDefinition",
                    "src": "15239:117:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "15428:241:38",
                      "nodeType": "YulBlock",
                      "src": "15428:241:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "15533:22:38",
                            "nodeType": "YulBlock",
                            "src": "15533:22:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nativeSrc": "15535:16:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "15535:16:38"
                                  },
                                  "nativeSrc": "15535:18:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "15535:18:38"
                                },
                                "nativeSrc": "15535:18:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "15535:18:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nativeSrc": "15505:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "15505:6:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "15513:18:38",
                                "nodeType": "YulLiteral",
                                "src": "15513:18:38",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "15502:2:38",
                              "nodeType": "YulIdentifier",
                              "src": "15502:2:38"
                            },
                            "nativeSrc": "15502:30:38",
                            "nodeType": "YulFunctionCall",
                            "src": "15502:30:38"
                          },
                          "nativeSrc": "15499:56:38",
                          "nodeType": "YulIf",
                          "src": "15499:56:38"
                        },
                        {
                          "nativeSrc": "15565:37:38",
                          "nodeType": "YulAssignment",
                          "src": "15565:37:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "length",
                                "nativeSrc": "15595:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "15595:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "round_up_to_mul_of_32",
                              "nativeSrc": "15573:21:38",
                              "nodeType": "YulIdentifier",
                              "src": "15573:21:38"
                            },
                            "nativeSrc": "15573:29:38",
                            "nodeType": "YulFunctionCall",
                            "src": "15573:29:38"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nativeSrc": "15565:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "15565:4:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "15639:23:38",
                          "nodeType": "YulAssignment",
                          "src": "15639:23:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "size",
                                "nativeSrc": "15651:4:38",
                                "nodeType": "YulIdentifier",
                                "src": "15651:4:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "15657:4:38",
                                "nodeType": "YulLiteral",
                                "src": "15657:4:38",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "15647:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "15647:3:38"
                            },
                            "nativeSrc": "15647:15:38",
                            "nodeType": "YulFunctionCall",
                            "src": "15647:15:38"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nativeSrc": "15639:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "15639:4:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_t_bytes_memory_ptr",
                    "nativeSrc": "15362:307:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nativeSrc": "15412:6:38",
                        "nodeType": "YulTypedName",
                        "src": "15412:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nativeSrc": "15423:4:38",
                        "nodeType": "YulTypedName",
                        "src": "15423:4:38",
                        "type": ""
                      }
                    ],
                    "src": "15362:307:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "15739:84:38",
                      "nodeType": "YulBlock",
                      "src": "15739:84:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nativeSrc": "15763:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "15763:3:38"
                              },
                              {
                                "name": "src",
                                "nativeSrc": "15768:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "15768:3:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "15773:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "15773:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nativeSrc": "15750:12:38",
                              "nodeType": "YulIdentifier",
                              "src": "15750:12:38"
                            },
                            "nativeSrc": "15750:30:38",
                            "nodeType": "YulFunctionCall",
                            "src": "15750:30:38"
                          },
                          "nativeSrc": "15750:30:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "15750:30:38"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nativeSrc": "15800:3:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "15800:3:38"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "15805:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "15805:6:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "15796:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "15796:3:38"
                                },
                                "nativeSrc": "15796:16:38",
                                "nodeType": "YulFunctionCall",
                                "src": "15796:16:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "15814:1:38",
                                "nodeType": "YulLiteral",
                                "src": "15814:1:38",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "15789:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "15789:6:38"
                            },
                            "nativeSrc": "15789:27:38",
                            "nodeType": "YulFunctionCall",
                            "src": "15789:27:38"
                          },
                          "nativeSrc": "15789:27:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "15789:27:38"
                        }
                      ]
                    },
                    "name": "copy_calldata_to_memory_with_cleanup",
                    "nativeSrc": "15675:148:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nativeSrc": "15721:3:38",
                        "nodeType": "YulTypedName",
                        "src": "15721:3:38",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nativeSrc": "15726:3:38",
                        "nodeType": "YulTypedName",
                        "src": "15726:3:38",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "15731:6:38",
                        "nodeType": "YulTypedName",
                        "src": "15731:6:38",
                        "type": ""
                      }
                    ],
                    "src": "15675:148:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "15912:340:38",
                      "nodeType": "YulBlock",
                      "src": "15912:340:38",
                      "statements": [
                        {
                          "nativeSrc": "15922:74:38",
                          "nodeType": "YulAssignment",
                          "src": "15922:74:38",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "15988:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "15988:6:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_t_bytes_memory_ptr",
                                  "nativeSrc": "15947:40:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "15947:40:38"
                                },
                                "nativeSrc": "15947:48:38",
                                "nodeType": "YulFunctionCall",
                                "src": "15947:48:38"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nativeSrc": "15931:15:38",
                              "nodeType": "YulIdentifier",
                              "src": "15931:15:38"
                            },
                            "nativeSrc": "15931:65:38",
                            "nodeType": "YulFunctionCall",
                            "src": "15931:65:38"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nativeSrc": "15922:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "15922:5:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array",
                                "nativeSrc": "16012:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "16012:5:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "16019:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "16019:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "16005:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "16005:6:38"
                            },
                            "nativeSrc": "16005:21:38",
                            "nodeType": "YulFunctionCall",
                            "src": "16005:21:38"
                          },
                          "nativeSrc": "16005:21:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "16005:21:38"
                        },
                        {
                          "nativeSrc": "16035:27:38",
                          "nodeType": "YulVariableDeclaration",
                          "src": "16035:27:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "array",
                                "nativeSrc": "16050:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "16050:5:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "16057:4:38",
                                "nodeType": "YulLiteral",
                                "src": "16057:4:38",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "16046:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "16046:3:38"
                            },
                            "nativeSrc": "16046:16:38",
                            "nodeType": "YulFunctionCall",
                            "src": "16046:16:38"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nativeSrc": "16039:3:38",
                              "nodeType": "YulTypedName",
                              "src": "16039:3:38",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "16100:83:38",
                            "nodeType": "YulBlock",
                            "src": "16100:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                                    "nativeSrc": "16102:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "16102:77:38"
                                  },
                                  "nativeSrc": "16102:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "16102:79:38"
                                },
                                "nativeSrc": "16102:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "16102:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nativeSrc": "16081:3:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "16081:3:38"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "16086:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "16086:6:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "16077:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "16077:3:38"
                                },
                                "nativeSrc": "16077:16:38",
                                "nodeType": "YulFunctionCall",
                                "src": "16077:16:38"
                              },
                              {
                                "name": "end",
                                "nativeSrc": "16095:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "16095:3:38"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "16074:2:38",
                              "nodeType": "YulIdentifier",
                              "src": "16074:2:38"
                            },
                            "nativeSrc": "16074:25:38",
                            "nodeType": "YulFunctionCall",
                            "src": "16074:25:38"
                          },
                          "nativeSrc": "16071:112:38",
                          "nodeType": "YulIf",
                          "src": "16071:112:38"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "src",
                                "nativeSrc": "16229:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "16229:3:38"
                              },
                              {
                                "name": "dst",
                                "nativeSrc": "16234:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "16234:3:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "16239:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "16239:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "copy_calldata_to_memory_with_cleanup",
                              "nativeSrc": "16192:36:38",
                              "nodeType": "YulIdentifier",
                              "src": "16192:36:38"
                            },
                            "nativeSrc": "16192:54:38",
                            "nodeType": "YulFunctionCall",
                            "src": "16192:54:38"
                          },
                          "nativeSrc": "16192:54:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "16192:54:38"
                        }
                      ]
                    },
                    "name": "abi_decode_available_length_t_bytes_memory_ptr",
                    "nativeSrc": "15829:423:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nativeSrc": "15885:3:38",
                        "nodeType": "YulTypedName",
                        "src": "15885:3:38",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "15890:6:38",
                        "nodeType": "YulTypedName",
                        "src": "15890:6:38",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "15898:3:38",
                        "nodeType": "YulTypedName",
                        "src": "15898:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nativeSrc": "15906:5:38",
                        "nodeType": "YulTypedName",
                        "src": "15906:5:38",
                        "type": ""
                      }
                    ],
                    "src": "15829:423:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "16332:277:38",
                      "nodeType": "YulBlock",
                      "src": "16332:277:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "16381:83:38",
                            "nodeType": "YulBlock",
                            "src": "16381:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                                    "nativeSrc": "16383:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "16383:77:38"
                                  },
                                  "nativeSrc": "16383:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "16383:79:38"
                                },
                                "nativeSrc": "16383:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "16383:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nativeSrc": "16360:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "16360:6:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "16368:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "16368:4:38",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "16356:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "16356:3:38"
                                    },
                                    "nativeSrc": "16356:17:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "16356:17:38"
                                  },
                                  {
                                    "name": "end",
                                    "nativeSrc": "16375:3:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "16375:3:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "16352:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "16352:3:38"
                                },
                                "nativeSrc": "16352:27:38",
                                "nodeType": "YulFunctionCall",
                                "src": "16352:27:38"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "16345:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "16345:6:38"
                            },
                            "nativeSrc": "16345:35:38",
                            "nodeType": "YulFunctionCall",
                            "src": "16345:35:38"
                          },
                          "nativeSrc": "16342:122:38",
                          "nodeType": "YulIf",
                          "src": "16342:122:38"
                        },
                        {
                          "nativeSrc": "16473:34:38",
                          "nodeType": "YulVariableDeclaration",
                          "src": "16473:34:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "16500:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "16500:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "16487:12:38",
                              "nodeType": "YulIdentifier",
                              "src": "16487:12:38"
                            },
                            "nativeSrc": "16487:20:38",
                            "nodeType": "YulFunctionCall",
                            "src": "16487:20:38"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "16477:6:38",
                              "nodeType": "YulTypedName",
                              "src": "16477:6:38",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "16516:87:38",
                          "nodeType": "YulAssignment",
                          "src": "16516:87:38",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "16576:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "16576:6:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "16584:4:38",
                                    "nodeType": "YulLiteral",
                                    "src": "16584:4:38",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "16572:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "16572:3:38"
                                },
                                "nativeSrc": "16572:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "16572:17:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "16591:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "16591:6:38"
                              },
                              {
                                "name": "end",
                                "nativeSrc": "16599:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "16599:3:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_t_bytes_memory_ptr",
                              "nativeSrc": "16525:46:38",
                              "nodeType": "YulIdentifier",
                              "src": "16525:46:38"
                            },
                            "nativeSrc": "16525:78:38",
                            "nodeType": "YulFunctionCall",
                            "src": "16525:78:38"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nativeSrc": "16516:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "16516:5:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_bytes_memory_ptr",
                    "nativeSrc": "16271:338:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "16310:6:38",
                        "nodeType": "YulTypedName",
                        "src": "16310:6:38",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "16318:3:38",
                        "nodeType": "YulTypedName",
                        "src": "16318:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nativeSrc": "16326:5:38",
                        "nodeType": "YulTypedName",
                        "src": "16326:5:38",
                        "type": ""
                      }
                    ],
                    "src": "16271:338:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "16728:229:38",
                      "nodeType": "YulBlock",
                      "src": "16728:229:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "16833:22:38",
                            "nodeType": "YulBlock",
                            "src": "16833:22:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nativeSrc": "16835:16:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "16835:16:38"
                                  },
                                  "nativeSrc": "16835:18:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "16835:18:38"
                                },
                                "nativeSrc": "16835:18:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "16835:18:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nativeSrc": "16805:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "16805:6:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "16813:18:38",
                                "nodeType": "YulLiteral",
                                "src": "16813:18:38",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "16802:2:38",
                              "nodeType": "YulIdentifier",
                              "src": "16802:2:38"
                            },
                            "nativeSrc": "16802:30:38",
                            "nodeType": "YulFunctionCall",
                            "src": "16802:30:38"
                          },
                          "nativeSrc": "16799:56:38",
                          "nodeType": "YulIf",
                          "src": "16799:56:38"
                        },
                        {
                          "nativeSrc": "16865:25:38",
                          "nodeType": "YulAssignment",
                          "src": "16865:25:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "length",
                                "nativeSrc": "16877:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "16877:6:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "16885:4:38",
                                "nodeType": "YulLiteral",
                                "src": "16885:4:38",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nativeSrc": "16873:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "16873:3:38"
                            },
                            "nativeSrc": "16873:17:38",
                            "nodeType": "YulFunctionCall",
                            "src": "16873:17:38"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nativeSrc": "16865:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "16865:4:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "16927:23:38",
                          "nodeType": "YulAssignment",
                          "src": "16927:23:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "size",
                                "nativeSrc": "16939:4:38",
                                "nodeType": "YulIdentifier",
                                "src": "16939:4:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "16945:4:38",
                                "nodeType": "YulLiteral",
                                "src": "16945:4:38",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "16935:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "16935:3:38"
                            },
                            "nativeSrc": "16935:15:38",
                            "nodeType": "YulFunctionCall",
                            "src": "16935:15:38"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nativeSrc": "16927:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "16927:4:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr",
                    "nativeSrc": "16615:342:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nativeSrc": "16712:6:38",
                        "nodeType": "YulTypedName",
                        "src": "16712:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nativeSrc": "16723:4:38",
                        "nodeType": "YulTypedName",
                        "src": "16723:4:38",
                        "type": ""
                      }
                    ],
                    "src": "16615:342:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "17052:28:38",
                      "nodeType": "YulBlock",
                      "src": "17052:28:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "17069:1:38",
                                "nodeType": "YulLiteral",
                                "src": "17069:1:38",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "17072:1:38",
                                "nodeType": "YulLiteral",
                                "src": "17072:1:38",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "17062:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "17062:6:38"
                            },
                            "nativeSrc": "17062:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "17062:12:38"
                          },
                          "nativeSrc": "17062:12:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "17062:12:38"
                        }
                      ]
                    },
                    "name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                    "nativeSrc": "16963:117:38",
                    "nodeType": "YulFunctionDefinition",
                    "src": "16963:117:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "17208:497:38",
                      "nodeType": "YulBlock",
                      "src": "17208:497:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "17252:83:38",
                            "nodeType": "YulBlock",
                            "src": "17252:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f",
                                    "nativeSrc": "17254:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "17254:77:38"
                                  },
                                  "nativeSrc": "17254:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "17254:79:38"
                                },
                                "nativeSrc": "17254:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "17254:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "end",
                                    "nativeSrc": "17229:3:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "17229:3:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "17234:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "17234:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "17225:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "17225:3:38"
                                },
                                "nativeSrc": "17225:19:38",
                                "nodeType": "YulFunctionCall",
                                "src": "17225:19:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "17246:4:38",
                                "nodeType": "YulLiteral",
                                "src": "17246:4:38",
                                "type": "",
                                "value": "0x40"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "17221:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "17221:3:38"
                            },
                            "nativeSrc": "17221:30:38",
                            "nodeType": "YulFunctionCall",
                            "src": "17221:30:38"
                          },
                          "nativeSrc": "17218:117:38",
                          "nodeType": "YulIf",
                          "src": "17218:117:38"
                        },
                        {
                          "nativeSrc": "17344:30:38",
                          "nodeType": "YulAssignment",
                          "src": "17344:30:38",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "17369:4:38",
                                "nodeType": "YulLiteral",
                                "src": "17369:4:38",
                                "type": "",
                                "value": "0x40"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nativeSrc": "17353:15:38",
                              "nodeType": "YulIdentifier",
                              "src": "17353:15:38"
                            },
                            "nativeSrc": "17353:21:38",
                            "nodeType": "YulFunctionCall",
                            "src": "17353:21:38"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "17344:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "17344:5:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "17384:151:38",
                          "nodeType": "YulBlock",
                          "src": "17384:151:38",
                          "statements": [
                            {
                              "nativeSrc": "17420:15:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "17420:15:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "17434:1:38",
                                "nodeType": "YulLiteral",
                                "src": "17434:1:38",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "17424:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "17424:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "17460:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "17460:5:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "17467:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "17467:4:38",
                                        "type": "",
                                        "value": "0x00"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "17456:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "17456:3:38"
                                    },
                                    "nativeSrc": "17456:16:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "17456:16:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nativeSrc": "17499:9:38",
                                            "nodeType": "YulIdentifier",
                                            "src": "17499:9:38"
                                          },
                                          {
                                            "name": "offset",
                                            "nativeSrc": "17510:6:38",
                                            "nodeType": "YulIdentifier",
                                            "src": "17510:6:38"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "17495:3:38",
                                          "nodeType": "YulIdentifier",
                                          "src": "17495:3:38"
                                        },
                                        "nativeSrc": "17495:22:38",
                                        "nodeType": "YulFunctionCall",
                                        "src": "17495:22:38"
                                      },
                                      {
                                        "name": "end",
                                        "nativeSrc": "17519:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "17519:3:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_address",
                                      "nativeSrc": "17474:20:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "17474:20:38"
                                    },
                                    "nativeSrc": "17474:49:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "17474:49:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "17449:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "17449:6:38"
                                },
                                "nativeSrc": "17449:75:38",
                                "nodeType": "YulFunctionCall",
                                "src": "17449:75:38"
                              },
                              "nativeSrc": "17449:75:38",
                              "nodeType": "YulExpressionStatement",
                              "src": "17449:75:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "17545:153:38",
                          "nodeType": "YulBlock",
                          "src": "17545:153:38",
                          "statements": [
                            {
                              "nativeSrc": "17582:16:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "17582:16:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "17596:2:38",
                                "nodeType": "YulLiteral",
                                "src": "17596:2:38",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "17586:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "17586:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "17623:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "17623:5:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "17630:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "17630:4:38",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "17619:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "17619:3:38"
                                    },
                                    "nativeSrc": "17619:16:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "17619:16:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nativeSrc": "17662:9:38",
                                            "nodeType": "YulIdentifier",
                                            "src": "17662:9:38"
                                          },
                                          {
                                            "name": "offset",
                                            "nativeSrc": "17673:6:38",
                                            "nodeType": "YulIdentifier",
                                            "src": "17673:6:38"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "17658:3:38",
                                          "nodeType": "YulIdentifier",
                                          "src": "17658:3:38"
                                        },
                                        "nativeSrc": "17658:22:38",
                                        "nodeType": "YulFunctionCall",
                                        "src": "17658:22:38"
                                      },
                                      {
                                        "name": "end",
                                        "nativeSrc": "17682:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "17682:3:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_uint256",
                                      "nativeSrc": "17637:20:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "17637:20:38"
                                    },
                                    "nativeSrc": "17637:49:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "17637:49:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "17612:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "17612:6:38"
                                },
                                "nativeSrc": "17612:75:38",
                                "nodeType": "YulFunctionCall",
                                "src": "17612:75:38"
                              },
                              "nativeSrc": "17612:75:38",
                              "nodeType": "YulExpressionStatement",
                              "src": "17612:75:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_struct$_EVMTokenAmount_$181_memory_ptr",
                    "nativeSrc": "17122:583:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "17183:9:38",
                        "nodeType": "YulTypedName",
                        "src": "17183:9:38",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "17194:3:38",
                        "nodeType": "YulTypedName",
                        "src": "17194:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "17202:5:38",
                        "nodeType": "YulTypedName",
                        "src": "17202:5:38",
                        "type": ""
                      }
                    ],
                    "src": "17122:583:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "17882:670:38",
                      "nodeType": "YulBlock",
                      "src": "17882:670:38",
                      "statements": [
                        {
                          "nativeSrc": "17892:121:38",
                          "nodeType": "YulAssignment",
                          "src": "17892:121:38",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "18005:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "18005:6:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr",
                                  "nativeSrc": "17917:87:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "17917:87:38"
                                },
                                "nativeSrc": "17917:95:38",
                                "nodeType": "YulFunctionCall",
                                "src": "17917:95:38"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nativeSrc": "17901:15:38",
                              "nodeType": "YulIdentifier",
                              "src": "17901:15:38"
                            },
                            "nativeSrc": "17901:112:38",
                            "nodeType": "YulFunctionCall",
                            "src": "17901:112:38"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nativeSrc": "17892:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "17892:5:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "18022:16:38",
                          "nodeType": "YulVariableDeclaration",
                          "src": "18022:16:38",
                          "value": {
                            "name": "array",
                            "nativeSrc": "18033:5:38",
                            "nodeType": "YulIdentifier",
                            "src": "18033:5:38"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nativeSrc": "18026:3:38",
                              "nodeType": "YulTypedName",
                              "src": "18026:3:38",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array",
                                "nativeSrc": "18055:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "18055:5:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "18062:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "18062:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "18048:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "18048:6:38"
                            },
                            "nativeSrc": "18048:21:38",
                            "nodeType": "YulFunctionCall",
                            "src": "18048:21:38"
                          },
                          "nativeSrc": "18048:21:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "18048:21:38"
                        },
                        {
                          "nativeSrc": "18078:23:38",
                          "nodeType": "YulAssignment",
                          "src": "18078:23:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "array",
                                "nativeSrc": "18089:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "18089:5:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "18096:4:38",
                                "nodeType": "YulLiteral",
                                "src": "18096:4:38",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "18085:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "18085:3:38"
                            },
                            "nativeSrc": "18085:16:38",
                            "nodeType": "YulFunctionCall",
                            "src": "18085:16:38"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nativeSrc": "18078:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "18078:3:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "18111:44:38",
                          "nodeType": "YulVariableDeclaration",
                          "src": "18111:44:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "18129:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "18129:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "18141:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "18141:6:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "18149:4:38",
                                    "nodeType": "YulLiteral",
                                    "src": "18149:4:38",
                                    "type": "",
                                    "value": "0x40"
                                  }
                                ],
                                "functionName": {
                                  "name": "mul",
                                  "nativeSrc": "18137:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "18137:3:38"
                                },
                                "nativeSrc": "18137:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "18137:17:38"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "18125:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "18125:3:38"
                            },
                            "nativeSrc": "18125:30:38",
                            "nodeType": "YulFunctionCall",
                            "src": "18125:30:38"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nativeSrc": "18115:6:38",
                              "nodeType": "YulTypedName",
                              "src": "18115:6:38",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "18183:103:38",
                            "nodeType": "YulBlock",
                            "src": "18183:103:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                                    "nativeSrc": "18197:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "18197:77:38"
                                  },
                                  "nativeSrc": "18197:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "18197:79:38"
                                },
                                "nativeSrc": "18197:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "18197:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nativeSrc": "18170:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "18170:6:38"
                              },
                              {
                                "name": "end",
                                "nativeSrc": "18178:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "18178:3:38"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "18167:2:38",
                              "nodeType": "YulIdentifier",
                              "src": "18167:2:38"
                            },
                            "nativeSrc": "18167:15:38",
                            "nodeType": "YulFunctionCall",
                            "src": "18167:15:38"
                          },
                          "nativeSrc": "18164:122:38",
                          "nodeType": "YulIf",
                          "src": "18164:122:38"
                        },
                        {
                          "body": {
                            "nativeSrc": "18371:175:38",
                            "nodeType": "YulBlock",
                            "src": "18371:175:38",
                            "statements": [
                              {
                                "nativeSrc": "18386:21:38",
                                "nodeType": "YulVariableDeclaration",
                                "src": "18386:21:38",
                                "value": {
                                  "name": "src",
                                  "nativeSrc": "18404:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "18404:3:38"
                                },
                                "variables": [
                                  {
                                    "name": "elementPos",
                                    "nativeSrc": "18390:10:38",
                                    "nodeType": "YulTypedName",
                                    "src": "18390:10:38",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nativeSrc": "18428:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "18428:3:38"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "elementPos",
                                          "nativeSrc": "18485:10:38",
                                          "nodeType": "YulIdentifier",
                                          "src": "18485:10:38"
                                        },
                                        {
                                          "name": "end",
                                          "nativeSrc": "18497:3:38",
                                          "nodeType": "YulIdentifier",
                                          "src": "18497:3:38"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "abi_decode_t_struct$_EVMTokenAmount_$181_memory_ptr",
                                        "nativeSrc": "18433:51:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "18433:51:38"
                                      },
                                      "nativeSrc": "18433:68:38",
                                      "nodeType": "YulFunctionCall",
                                      "src": "18433:68:38"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "18421:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "18421:6:38"
                                  },
                                  "nativeSrc": "18421:81:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "18421:81:38"
                                },
                                "nativeSrc": "18421:81:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "18421:81:38"
                              },
                              {
                                "nativeSrc": "18515:21:38",
                                "nodeType": "YulAssignment",
                                "src": "18515:21:38",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nativeSrc": "18526:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "18526:3:38"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "18531:4:38",
                                      "nodeType": "YulLiteral",
                                      "src": "18531:4:38",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "18522:3:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "18522:3:38"
                                  },
                                  "nativeSrc": "18522:14:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "18522:14:38"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nativeSrc": "18515:3:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "18515:3:38"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nativeSrc": "18324:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "18324:3:38"
                              },
                              {
                                "name": "srcEnd",
                                "nativeSrc": "18329:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "18329:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nativeSrc": "18321:2:38",
                              "nodeType": "YulIdentifier",
                              "src": "18321:2:38"
                            },
                            "nativeSrc": "18321:15:38",
                            "nodeType": "YulFunctionCall",
                            "src": "18321:15:38"
                          },
                          "nativeSrc": "18295:251:38",
                          "nodeType": "YulForLoop",
                          "post": {
                            "nativeSrc": "18337:25:38",
                            "nodeType": "YulBlock",
                            "src": "18337:25:38",
                            "statements": [
                              {
                                "nativeSrc": "18339:21:38",
                                "nodeType": "YulAssignment",
                                "src": "18339:21:38",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nativeSrc": "18350:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "18350:3:38"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "18355:4:38",
                                      "nodeType": "YulLiteral",
                                      "src": "18355:4:38",
                                      "type": "",
                                      "value": "0x40"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "18346:3:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "18346:3:38"
                                  },
                                  "nativeSrc": "18346:14:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "18346:14:38"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nativeSrc": "18339:3:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "18339:3:38"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nativeSrc": "18299:21:38",
                            "nodeType": "YulBlock",
                            "src": "18299:21:38",
                            "statements": [
                              {
                                "nativeSrc": "18301:17:38",
                                "nodeType": "YulVariableDeclaration",
                                "src": "18301:17:38",
                                "value": {
                                  "name": "offset",
                                  "nativeSrc": "18312:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "18312:6:38"
                                },
                                "variables": [
                                  {
                                    "name": "src",
                                    "nativeSrc": "18305:3:38",
                                    "nodeType": "YulTypedName",
                                    "src": "18305:3:38",
                                    "type": ""
                                  }
                                ]
                              }
                            ]
                          },
                          "src": "18295:251:38"
                        }
                      ]
                    },
                    "name": "abi_decode_available_length_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr",
                    "nativeSrc": "17749:803:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "17852:6:38",
                        "nodeType": "YulTypedName",
                        "src": "17852:6:38",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "17860:6:38",
                        "nodeType": "YulTypedName",
                        "src": "17860:6:38",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "17868:3:38",
                        "nodeType": "YulTypedName",
                        "src": "17868:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nativeSrc": "17876:5:38",
                        "nodeType": "YulTypedName",
                        "src": "17876:5:38",
                        "type": ""
                      }
                    ],
                    "src": "17749:803:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "18704:324:38",
                      "nodeType": "YulBlock",
                      "src": "18704:324:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "18753:83:38",
                            "nodeType": "YulBlock",
                            "src": "18753:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                                    "nativeSrc": "18755:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "18755:77:38"
                                  },
                                  "nativeSrc": "18755:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "18755:79:38"
                                },
                                "nativeSrc": "18755:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "18755:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nativeSrc": "18732:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "18732:6:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "18740:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "18740:4:38",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "18728:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "18728:3:38"
                                    },
                                    "nativeSrc": "18728:17:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18728:17:38"
                                  },
                                  {
                                    "name": "end",
                                    "nativeSrc": "18747:3:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "18747:3:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "18724:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "18724:3:38"
                                },
                                "nativeSrc": "18724:27:38",
                                "nodeType": "YulFunctionCall",
                                "src": "18724:27:38"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "18717:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "18717:6:38"
                            },
                            "nativeSrc": "18717:35:38",
                            "nodeType": "YulFunctionCall",
                            "src": "18717:35:38"
                          },
                          "nativeSrc": "18714:122:38",
                          "nodeType": "YulIf",
                          "src": "18714:122:38"
                        },
                        {
                          "nativeSrc": "18845:34:38",
                          "nodeType": "YulVariableDeclaration",
                          "src": "18845:34:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "18872:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "18872:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "18859:12:38",
                              "nodeType": "YulIdentifier",
                              "src": "18859:12:38"
                            },
                            "nativeSrc": "18859:20:38",
                            "nodeType": "YulFunctionCall",
                            "src": "18859:20:38"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "18849:6:38",
                              "nodeType": "YulTypedName",
                              "src": "18849:6:38",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "18888:134:38",
                          "nodeType": "YulAssignment",
                          "src": "18888:134:38",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "18995:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "18995:6:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "19003:4:38",
                                    "nodeType": "YulLiteral",
                                    "src": "19003:4:38",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "18991:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "18991:3:38"
                                },
                                "nativeSrc": "18991:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "18991:17:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "19010:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "19010:6:38"
                              },
                              {
                                "name": "end",
                                "nativeSrc": "19018:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "19018:3:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr",
                              "nativeSrc": "18897:93:38",
                              "nodeType": "YulIdentifier",
                              "src": "18897:93:38"
                            },
                            "nativeSrc": "18897:125:38",
                            "nodeType": "YulFunctionCall",
                            "src": "18897:125:38"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nativeSrc": "18888:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "18888:5:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr",
                    "nativeSrc": "18596:432:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "18682:6:38",
                        "nodeType": "YulTypedName",
                        "src": "18682:6:38",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "18690:3:38",
                        "nodeType": "YulTypedName",
                        "src": "18690:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nativeSrc": "18698:5:38",
                        "nodeType": "YulTypedName",
                        "src": "18698:5:38",
                        "type": ""
                      }
                    ],
                    "src": "18596:432:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "19156:1565:38",
                      "nodeType": "YulBlock",
                      "src": "19156:1565:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "19200:83:38",
                            "nodeType": "YulBlock",
                            "src": "19200:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f",
                                    "nativeSrc": "19202:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "19202:77:38"
                                  },
                                  "nativeSrc": "19202:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "19202:79:38"
                                },
                                "nativeSrc": "19202:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "19202:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "end",
                                    "nativeSrc": "19177:3:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "19177:3:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "19182:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "19182:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "19173:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "19173:3:38"
                                },
                                "nativeSrc": "19173:19:38",
                                "nodeType": "YulFunctionCall",
                                "src": "19173:19:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "19194:4:38",
                                "nodeType": "YulLiteral",
                                "src": "19194:4:38",
                                "type": "",
                                "value": "0xa0"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "19169:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "19169:3:38"
                            },
                            "nativeSrc": "19169:30:38",
                            "nodeType": "YulFunctionCall",
                            "src": "19169:30:38"
                          },
                          "nativeSrc": "19166:117:38",
                          "nodeType": "YulIf",
                          "src": "19166:117:38"
                        },
                        {
                          "nativeSrc": "19292:30:38",
                          "nodeType": "YulAssignment",
                          "src": "19292:30:38",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "19317:4:38",
                                "nodeType": "YulLiteral",
                                "src": "19317:4:38",
                                "type": "",
                                "value": "0xa0"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nativeSrc": "19301:15:38",
                              "nodeType": "YulIdentifier",
                              "src": "19301:15:38"
                            },
                            "nativeSrc": "19301:21:38",
                            "nodeType": "YulFunctionCall",
                            "src": "19301:21:38"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "19292:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "19292:5:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "19332:155:38",
                          "nodeType": "YulBlock",
                          "src": "19332:155:38",
                          "statements": [
                            {
                              "nativeSrc": "19372:15:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "19372:15:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "19386:1:38",
                                "nodeType": "YulLiteral",
                                "src": "19386:1:38",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "19376:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "19376:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "19412:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "19412:5:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19419:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "19419:4:38",
                                        "type": "",
                                        "value": "0x00"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "19408:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "19408:3:38"
                                    },
                                    "nativeSrc": "19408:16:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19408:16:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nativeSrc": "19451:9:38",
                                            "nodeType": "YulIdentifier",
                                            "src": "19451:9:38"
                                          },
                                          {
                                            "name": "offset",
                                            "nativeSrc": "19462:6:38",
                                            "nodeType": "YulIdentifier",
                                            "src": "19462:6:38"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "19447:3:38",
                                          "nodeType": "YulIdentifier",
                                          "src": "19447:3:38"
                                        },
                                        "nativeSrc": "19447:22:38",
                                        "nodeType": "YulFunctionCall",
                                        "src": "19447:22:38"
                                      },
                                      {
                                        "name": "end",
                                        "nativeSrc": "19471:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "19471:3:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_bytes32",
                                      "nativeSrc": "19426:20:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "19426:20:38"
                                    },
                                    "nativeSrc": "19426:49:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19426:49:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "19401:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "19401:6:38"
                                },
                                "nativeSrc": "19401:75:38",
                                "nodeType": "YulFunctionCall",
                                "src": "19401:75:38"
                              },
                              "nativeSrc": "19401:75:38",
                              "nodeType": "YulExpressionStatement",
                              "src": "19401:75:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "19497:165:38",
                          "nodeType": "YulBlock",
                          "src": "19497:165:38",
                          "statements": [
                            {
                              "nativeSrc": "19547:16:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "19547:16:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "19561:2:38",
                                "nodeType": "YulLiteral",
                                "src": "19561:2:38",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "19551:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "19551:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "19588:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "19588:5:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19595:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "19595:4:38",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "19584:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "19584:3:38"
                                    },
                                    "nativeSrc": "19584:16:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19584:16:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nativeSrc": "19626:9:38",
                                            "nodeType": "YulIdentifier",
                                            "src": "19626:9:38"
                                          },
                                          {
                                            "name": "offset",
                                            "nativeSrc": "19637:6:38",
                                            "nodeType": "YulIdentifier",
                                            "src": "19637:6:38"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "19622:3:38",
                                          "nodeType": "YulIdentifier",
                                          "src": "19622:3:38"
                                        },
                                        "nativeSrc": "19622:22:38",
                                        "nodeType": "YulFunctionCall",
                                        "src": "19622:22:38"
                                      },
                                      {
                                        "name": "end",
                                        "nativeSrc": "19646:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "19646:3:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_uint64",
                                      "nativeSrc": "19602:19:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "19602:19:38"
                                    },
                                    "nativeSrc": "19602:48:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19602:48:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "19577:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "19577:6:38"
                                },
                                "nativeSrc": "19577:74:38",
                                "nodeType": "YulFunctionCall",
                                "src": "19577:74:38"
                              },
                              "nativeSrc": "19577:74:38",
                              "nodeType": "YulExpressionStatement",
                              "src": "19577:74:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "19672:322:38",
                          "nodeType": "YulBlock",
                          "src": "19672:322:38",
                          "statements": [
                            {
                              "nativeSrc": "19709:46:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "19709:46:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "19740:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "19740:9:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19751:2:38",
                                        "nodeType": "YulLiteral",
                                        "src": "19751:2:38",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "19736:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "19736:3:38"
                                    },
                                    "nativeSrc": "19736:18:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19736:18:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nativeSrc": "19723:12:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "19723:12:38"
                                },
                                "nativeSrc": "19723:32:38",
                                "nodeType": "YulFunctionCall",
                                "src": "19723:32:38"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "19713:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "19713:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "19802:83:38",
                                "nodeType": "YulBlock",
                                "src": "19802:83:38",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421",
                                        "nativeSrc": "19804:77:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "19804:77:38"
                                      },
                                      "nativeSrc": "19804:79:38",
                                      "nodeType": "YulFunctionCall",
                                      "src": "19804:79:38"
                                    },
                                    "nativeSrc": "19804:79:38",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "19804:79:38"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "19774:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "19774:6:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "19782:18:38",
                                    "nodeType": "YulLiteral",
                                    "src": "19782:18:38",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "19771:2:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "19771:2:38"
                                },
                                "nativeSrc": "19771:30:38",
                                "nodeType": "YulFunctionCall",
                                "src": "19771:30:38"
                              },
                              "nativeSrc": "19768:117:38",
                              "nodeType": "YulIf",
                              "src": "19768:117:38"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "19910:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "19910:5:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "19917:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "19917:4:38",
                                        "type": "",
                                        "value": "0x40"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "19906:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "19906:3:38"
                                    },
                                    "nativeSrc": "19906:16:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19906:16:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nativeSrc": "19958:9:38",
                                            "nodeType": "YulIdentifier",
                                            "src": "19958:9:38"
                                          },
                                          {
                                            "name": "offset",
                                            "nativeSrc": "19969:6:38",
                                            "nodeType": "YulIdentifier",
                                            "src": "19969:6:38"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "19954:3:38",
                                          "nodeType": "YulIdentifier",
                                          "src": "19954:3:38"
                                        },
                                        "nativeSrc": "19954:22:38",
                                        "nodeType": "YulFunctionCall",
                                        "src": "19954:22:38"
                                      },
                                      {
                                        "name": "end",
                                        "nativeSrc": "19978:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "19978:3:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_bytes_memory_ptr",
                                      "nativeSrc": "19924:29:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "19924:29:38"
                                    },
                                    "nativeSrc": "19924:58:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "19924:58:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "19899:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "19899:6:38"
                                },
                                "nativeSrc": "19899:84:38",
                                "nodeType": "YulFunctionCall",
                                "src": "19899:84:38"
                              },
                              "nativeSrc": "19899:84:38",
                              "nodeType": "YulExpressionStatement",
                              "src": "19899:84:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "20004:320:38",
                          "nodeType": "YulBlock",
                          "src": "20004:320:38",
                          "statements": [
                            {
                              "nativeSrc": "20039:46:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "20039:46:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "20070:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "20070:9:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "20081:2:38",
                                        "nodeType": "YulLiteral",
                                        "src": "20081:2:38",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "20066:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "20066:3:38"
                                    },
                                    "nativeSrc": "20066:18:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20066:18:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nativeSrc": "20053:12:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "20053:12:38"
                                },
                                "nativeSrc": "20053:32:38",
                                "nodeType": "YulFunctionCall",
                                "src": "20053:32:38"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "20043:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "20043:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "20132:83:38",
                                "nodeType": "YulBlock",
                                "src": "20132:83:38",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421",
                                        "nativeSrc": "20134:77:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "20134:77:38"
                                      },
                                      "nativeSrc": "20134:79:38",
                                      "nodeType": "YulFunctionCall",
                                      "src": "20134:79:38"
                                    },
                                    "nativeSrc": "20134:79:38",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "20134:79:38"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "20104:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "20104:6:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "20112:18:38",
                                    "nodeType": "YulLiteral",
                                    "src": "20112:18:38",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "20101:2:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "20101:2:38"
                                },
                                "nativeSrc": "20101:30:38",
                                "nodeType": "YulFunctionCall",
                                "src": "20101:30:38"
                              },
                              "nativeSrc": "20098:117:38",
                              "nodeType": "YulIf",
                              "src": "20098:117:38"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "20240:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "20240:5:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "20247:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "20247:4:38",
                                        "type": "",
                                        "value": "0x60"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "20236:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "20236:3:38"
                                    },
                                    "nativeSrc": "20236:16:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20236:16:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nativeSrc": "20288:9:38",
                                            "nodeType": "YulIdentifier",
                                            "src": "20288:9:38"
                                          },
                                          {
                                            "name": "offset",
                                            "nativeSrc": "20299:6:38",
                                            "nodeType": "YulIdentifier",
                                            "src": "20299:6:38"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "20284:3:38",
                                          "nodeType": "YulIdentifier",
                                          "src": "20284:3:38"
                                        },
                                        "nativeSrc": "20284:22:38",
                                        "nodeType": "YulFunctionCall",
                                        "src": "20284:22:38"
                                      },
                                      {
                                        "name": "end",
                                        "nativeSrc": "20308:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "20308:3:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_bytes_memory_ptr",
                                      "nativeSrc": "20254:29:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "20254:29:38"
                                    },
                                    "nativeSrc": "20254:58:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20254:58:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "20229:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "20229:6:38"
                                },
                                "nativeSrc": "20229:84:38",
                                "nodeType": "YulFunctionCall",
                                "src": "20229:84:38"
                              },
                              "nativeSrc": "20229:84:38",
                              "nodeType": "YulExpressionStatement",
                              "src": "20229:84:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "20334:380:38",
                          "nodeType": "YulBlock",
                          "src": "20334:380:38",
                          "statements": [
                            {
                              "nativeSrc": "20381:47:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "20381:47:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "20412:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "20412:9:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "20423:3:38",
                                        "nodeType": "YulLiteral",
                                        "src": "20423:3:38",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "20408:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "20408:3:38"
                                    },
                                    "nativeSrc": "20408:19:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20408:19:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nativeSrc": "20395:12:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "20395:12:38"
                                },
                                "nativeSrc": "20395:33:38",
                                "nodeType": "YulFunctionCall",
                                "src": "20395:33:38"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "20385:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "20385:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "20475:83:38",
                                "nodeType": "YulBlock",
                                "src": "20475:83:38",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421",
                                        "nativeSrc": "20477:77:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "20477:77:38"
                                      },
                                      "nativeSrc": "20477:79:38",
                                      "nodeType": "YulFunctionCall",
                                      "src": "20477:79:38"
                                    },
                                    "nativeSrc": "20477:79:38",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "20477:79:38"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "20447:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "20447:6:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "20455:18:38",
                                    "nodeType": "YulLiteral",
                                    "src": "20455:18:38",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "20444:2:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "20444:2:38"
                                },
                                "nativeSrc": "20444:30:38",
                                "nodeType": "YulFunctionCall",
                                "src": "20444:30:38"
                              },
                              "nativeSrc": "20441:117:38",
                              "nodeType": "YulIf",
                              "src": "20441:117:38"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "20583:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "20583:5:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "20590:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "20590:4:38",
                                        "type": "",
                                        "value": "0x80"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "20579:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "20579:3:38"
                                    },
                                    "nativeSrc": "20579:16:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20579:16:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nativeSrc": "20678:9:38",
                                            "nodeType": "YulIdentifier",
                                            "src": "20678:9:38"
                                          },
                                          {
                                            "name": "offset",
                                            "nativeSrc": "20689:6:38",
                                            "nodeType": "YulIdentifier",
                                            "src": "20689:6:38"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "20674:3:38",
                                          "nodeType": "YulIdentifier",
                                          "src": "20674:3:38"
                                        },
                                        "nativeSrc": "20674:22:38",
                                        "nodeType": "YulFunctionCall",
                                        "src": "20674:22:38"
                                      },
                                      {
                                        "name": "end",
                                        "nativeSrc": "20698:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "20698:3:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr",
                                      "nativeSrc": "20597:76:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "20597:76:38"
                                    },
                                    "nativeSrc": "20597:105:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "20597:105:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "20572:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "20572:6:38"
                                },
                                "nativeSrc": "20572:131:38",
                                "nodeType": "YulFunctionCall",
                                "src": "20572:131:38"
                              },
                              "nativeSrc": "20572:131:38",
                              "nodeType": "YulExpressionStatement",
                              "src": "20572:131:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_struct$_Any2EVMMessage_$194_memory_ptr",
                    "nativeSrc": "19070:1651:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "19131:9:38",
                        "nodeType": "YulTypedName",
                        "src": "19131:9:38",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "19142:3:38",
                        "nodeType": "YulTypedName",
                        "src": "19142:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "19150:5:38",
                        "nodeType": "YulTypedName",
                        "src": "19150:5:38",
                        "type": ""
                      }
                    ],
                    "src": "19070:1651:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "20851:105:38",
                      "nodeType": "YulBlock",
                      "src": "20851:105:38",
                      "statements": [
                        {
                          "nativeSrc": "20862:87:38",
                          "nodeType": "YulAssignment",
                          "src": "20862:87:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "20927:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "20927:5:38"
                              },
                              {
                                "arguments": [],
                                "functionName": {
                                  "name": "calldatasize",
                                  "nativeSrc": "20934:12:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "20934:12:38"
                                },
                                "nativeSrc": "20934:14:38",
                                "nodeType": "YulFunctionCall",
                                "src": "20934:14:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_t_struct$_Any2EVMMessage_$194_memory_ptr",
                              "nativeSrc": "20875:51:38",
                              "nodeType": "YulIdentifier",
                              "src": "20875:51:38"
                            },
                            "nativeSrc": "20875:74:38",
                            "nodeType": "YulFunctionCall",
                            "src": "20875:74:38"
                          },
                          "variableNames": [
                            {
                              "name": "converted",
                              "nativeSrc": "20862:9:38",
                              "nodeType": "YulIdentifier",
                              "src": "20862:9:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "convert_t_struct$_Any2EVMMessage_$194_calldata_ptr_to_t_struct$_Any2EVMMessage_$194_memory_ptr",
                    "nativeSrc": "20727:229:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "20831:5:38",
                        "nodeType": "YulTypedName",
                        "src": "20831:5:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "converted",
                        "nativeSrc": "20841:9:38",
                        "nodeType": "YulTypedName",
                        "src": "20841:9:38",
                        "type": ""
                      }
                    ],
                    "src": "20727:229:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "21068:66:38",
                      "nodeType": "YulBlock",
                      "src": "21068:66:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "21090:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "21090:6:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "21098:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "21098:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "21086:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "21086:3:38"
                                },
                                "nativeSrc": "21086:14:38",
                                "nodeType": "YulFunctionCall",
                                "src": "21086:14:38"
                              },
                              {
                                "hexValue": "4f6e6c792063616c6c61626c65206279206f776e6572",
                                "kind": "string",
                                "nativeSrc": "21102:24:38",
                                "nodeType": "YulLiteral",
                                "src": "21102:24:38",
                                "type": "",
                                "value": "Only callable by owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "21079:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "21079:6:38"
                            },
                            "nativeSrc": "21079:48:38",
                            "nodeType": "YulFunctionCall",
                            "src": "21079:48:38"
                          },
                          "nativeSrc": "21079:48:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "21079:48:38"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3",
                    "nativeSrc": "20962:172:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "21060:6:38",
                        "nodeType": "YulTypedName",
                        "src": "21060:6:38",
                        "type": ""
                      }
                    ],
                    "src": "20962:172:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "21286:220:38",
                      "nodeType": "YulBlock",
                      "src": "21286:220:38",
                      "statements": [
                        {
                          "nativeSrc": "21296:74:38",
                          "nodeType": "YulAssignment",
                          "src": "21296:74:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "21362:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "21362:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "21367:2:38",
                                "nodeType": "YulLiteral",
                                "src": "21367:2:38",
                                "type": "",
                                "value": "22"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nativeSrc": "21303:58:38",
                              "nodeType": "YulIdentifier",
                              "src": "21303:58:38"
                            },
                            "nativeSrc": "21303:67:38",
                            "nodeType": "YulFunctionCall",
                            "src": "21303:67:38"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "21296:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "21296:3:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "21468:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "21468:3:38"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3",
                              "nativeSrc": "21379:88:38",
                              "nodeType": "YulIdentifier",
                              "src": "21379:88:38"
                            },
                            "nativeSrc": "21379:93:38",
                            "nodeType": "YulFunctionCall",
                            "src": "21379:93:38"
                          },
                          "nativeSrc": "21379:93:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "21379:93:38"
                        },
                        {
                          "nativeSrc": "21481:19:38",
                          "nodeType": "YulAssignment",
                          "src": "21481:19:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "21492:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "21492:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "21497:2:38",
                                "nodeType": "YulLiteral",
                                "src": "21497:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "21488:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "21488:3:38"
                            },
                            "nativeSrc": "21488:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "21488:12:38"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "21481:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "21481:3:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack",
                    "nativeSrc": "21140:366:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "21274:3:38",
                        "nodeType": "YulTypedName",
                        "src": "21274:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "21282:3:38",
                        "nodeType": "YulTypedName",
                        "src": "21282:3:38",
                        "type": ""
                      }
                    ],
                    "src": "21140:366:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "21683:248:38",
                      "nodeType": "YulBlock",
                      "src": "21683:248:38",
                      "statements": [
                        {
                          "nativeSrc": "21693:26:38",
                          "nodeType": "YulAssignment",
                          "src": "21693:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "21705:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "21705:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "21716:2:38",
                                "nodeType": "YulLiteral",
                                "src": "21716:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "21701:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "21701:3:38"
                            },
                            "nativeSrc": "21701:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "21701:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "21693:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "21693:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "21740:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "21740:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "21751:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "21751:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "21736:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "21736:3:38"
                                },
                                "nativeSrc": "21736:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "21736:17:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nativeSrc": "21759:4:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "21759:4:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "21765:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "21765:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "21755:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "21755:3:38"
                                },
                                "nativeSrc": "21755:20:38",
                                "nodeType": "YulFunctionCall",
                                "src": "21755:20:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "21729:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "21729:6:38"
                            },
                            "nativeSrc": "21729:47:38",
                            "nodeType": "YulFunctionCall",
                            "src": "21729:47:38"
                          },
                          "nativeSrc": "21729:47:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "21729:47:38"
                        },
                        {
                          "nativeSrc": "21785:139:38",
                          "nodeType": "YulAssignment",
                          "src": "21785:139:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nativeSrc": "21919:4:38",
                                "nodeType": "YulIdentifier",
                                "src": "21919:4:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack",
                              "nativeSrc": "21793:124:38",
                              "nodeType": "YulIdentifier",
                              "src": "21793:124:38"
                            },
                            "nativeSrc": "21793:131:38",
                            "nodeType": "YulFunctionCall",
                            "src": "21793:131:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "21785:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "21785:4:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed",
                    "nativeSrc": "21512:419:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "21663:9:38",
                        "nodeType": "YulTypedName",
                        "src": "21663:9:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "21678:4:38",
                        "nodeType": "YulTypedName",
                        "src": "21678:4:38",
                        "type": ""
                      }
                    ],
                    "src": "21512:419:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "22063:206:38",
                      "nodeType": "YulBlock",
                      "src": "22063:206:38",
                      "statements": [
                        {
                          "nativeSrc": "22073:26:38",
                          "nodeType": "YulAssignment",
                          "src": "22073:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "22085:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "22085:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "22096:2:38",
                                "nodeType": "YulLiteral",
                                "src": "22096:2:38",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "22081:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "22081:3:38"
                            },
                            "nativeSrc": "22081:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "22081:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "22073:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "22073:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "22153:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "22153:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "22166:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "22166:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "22177:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "22177:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "22162:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "22162:3:38"
                                },
                                "nativeSrc": "22162:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "22162:17:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nativeSrc": "22109:43:38",
                              "nodeType": "YulIdentifier",
                              "src": "22109:43:38"
                            },
                            "nativeSrc": "22109:71:38",
                            "nodeType": "YulFunctionCall",
                            "src": "22109:71:38"
                          },
                          "nativeSrc": "22109:71:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "22109:71:38"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nativeSrc": "22234:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "22234:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "22247:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "22247:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "22258:2:38",
                                    "nodeType": "YulLiteral",
                                    "src": "22258:2:38",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "22243:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "22243:3:38"
                                },
                                "nativeSrc": "22243:18:38",
                                "nodeType": "YulFunctionCall",
                                "src": "22243:18:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nativeSrc": "22190:43:38",
                              "nodeType": "YulIdentifier",
                              "src": "22190:43:38"
                            },
                            "nativeSrc": "22190:72:38",
                            "nodeType": "YulFunctionCall",
                            "src": "22190:72:38"
                          },
                          "nativeSrc": "22190:72:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "22190:72:38"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nativeSrc": "21937:332:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "22027:9:38",
                        "nodeType": "YulTypedName",
                        "src": "22027:9:38",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "22039:6:38",
                        "nodeType": "YulTypedName",
                        "src": "22039:6:38",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "22047:6:38",
                        "nodeType": "YulTypedName",
                        "src": "22047:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "22058:4:38",
                        "nodeType": "YulTypedName",
                        "src": "22058:4:38",
                        "type": ""
                      }
                    ],
                    "src": "21937:332:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "22338:80:38",
                      "nodeType": "YulBlock",
                      "src": "22338:80:38",
                      "statements": [
                        {
                          "nativeSrc": "22348:22:38",
                          "nodeType": "YulAssignment",
                          "src": "22348:22:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "22363:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "22363:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "22357:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "22357:5:38"
                            },
                            "nativeSrc": "22357:13:38",
                            "nodeType": "YulFunctionCall",
                            "src": "22357:13:38"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "22348:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "22348:5:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "22406:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "22406:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nativeSrc": "22379:26:38",
                              "nodeType": "YulIdentifier",
                              "src": "22379:26:38"
                            },
                            "nativeSrc": "22379:33:38",
                            "nodeType": "YulFunctionCall",
                            "src": "22379:33:38"
                          },
                          "nativeSrc": "22379:33:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "22379:33:38"
                        }
                      ]
                    },
                    "name": "abi_decode_t_address_fromMemory",
                    "nativeSrc": "22275:143:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "22316:6:38",
                        "nodeType": "YulTypedName",
                        "src": "22316:6:38",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "22324:3:38",
                        "nodeType": "YulTypedName",
                        "src": "22324:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "22332:5:38",
                        "nodeType": "YulTypedName",
                        "src": "22332:5:38",
                        "type": ""
                      }
                    ],
                    "src": "22275:143:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "22501:274:38",
                      "nodeType": "YulBlock",
                      "src": "22501:274:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "22547:83:38",
                            "nodeType": "YulBlock",
                            "src": "22547:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "22549:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "22549:77:38"
                                  },
                                  "nativeSrc": "22549:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "22549:79:38"
                                },
                                "nativeSrc": "22549:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "22549:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "22522:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "22522:7:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "22531:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "22531:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "22518:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "22518:3:38"
                                },
                                "nativeSrc": "22518:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "22518:23:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "22543:2:38",
                                "nodeType": "YulLiteral",
                                "src": "22543:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "22514:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "22514:3:38"
                            },
                            "nativeSrc": "22514:32:38",
                            "nodeType": "YulFunctionCall",
                            "src": "22514:32:38"
                          },
                          "nativeSrc": "22511:119:38",
                          "nodeType": "YulIf",
                          "src": "22511:119:38"
                        },
                        {
                          "nativeSrc": "22640:128:38",
                          "nodeType": "YulBlock",
                          "src": "22640:128:38",
                          "statements": [
                            {
                              "nativeSrc": "22655:15:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "22655:15:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "22669:1:38",
                                "nodeType": "YulLiteral",
                                "src": "22669:1:38",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "22659:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "22659:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "22684:74:38",
                              "nodeType": "YulAssignment",
                              "src": "22684:74:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "22730:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "22730:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "22741:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "22741:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "22726:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "22726:3:38"
                                    },
                                    "nativeSrc": "22726:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "22726:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "22750:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "22750:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address_fromMemory",
                                  "nativeSrc": "22694:31:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "22694:31:38"
                                },
                                "nativeSrc": "22694:64:38",
                                "nodeType": "YulFunctionCall",
                                "src": "22694:64:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "22684:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "22684:6:38"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_fromMemory",
                    "nativeSrc": "22424:351:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "22471:9:38",
                        "nodeType": "YulTypedName",
                        "src": "22471:9:38",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "22482:7:38",
                        "nodeType": "YulTypedName",
                        "src": "22482:7:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "22494:6:38",
                        "nodeType": "YulTypedName",
                        "src": "22494:6:38",
                        "type": ""
                      }
                    ],
                    "src": "22424:351:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "22844:52:38",
                      "nodeType": "YulBlock",
                      "src": "22844:52:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "22861:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "22861:3:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "22883:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "22883:5:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint64",
                                  "nativeSrc": "22866:16:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "22866:16:38"
                                },
                                "nativeSrc": "22866:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "22866:23:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "22854:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "22854:6:38"
                            },
                            "nativeSrc": "22854:36:38",
                            "nodeType": "YulFunctionCall",
                            "src": "22854:36:38"
                          },
                          "nativeSrc": "22854:36:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "22854:36:38"
                        }
                      ]
                    },
                    "name": "abi_encode_t_uint64_to_t_uint64_fromStack",
                    "nativeSrc": "22781:115:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "22832:5:38",
                        "nodeType": "YulTypedName",
                        "src": "22832:5:38",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "22839:3:38",
                        "nodeType": "YulTypedName",
                        "src": "22839:3:38",
                        "type": ""
                      }
                    ],
                    "src": "22781:115:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "22960:40:38",
                      "nodeType": "YulBlock",
                      "src": "22960:40:38",
                      "statements": [
                        {
                          "nativeSrc": "22971:22:38",
                          "nodeType": "YulAssignment",
                          "src": "22971:22:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "22987:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "22987:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "22981:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "22981:5:38"
                            },
                            "nativeSrc": "22981:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "22981:12:38"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nativeSrc": "22971:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "22971:6:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_length_t_bytes_memory_ptr",
                    "nativeSrc": "22902:98:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "22943:5:38",
                        "nodeType": "YulTypedName",
                        "src": "22943:5:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nativeSrc": "22953:6:38",
                        "nodeType": "YulTypedName",
                        "src": "22953:6:38",
                        "type": ""
                      }
                    ],
                    "src": "22902:98:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "23091:73:38",
                      "nodeType": "YulBlock",
                      "src": "23091:73:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "23108:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "23108:3:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "23113:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "23113:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "23101:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "23101:6:38"
                            },
                            "nativeSrc": "23101:19:38",
                            "nodeType": "YulFunctionCall",
                            "src": "23101:19:38"
                          },
                          "nativeSrc": "23101:19:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "23101:19:38"
                        },
                        {
                          "nativeSrc": "23129:29:38",
                          "nodeType": "YulAssignment",
                          "src": "23129:29:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "23148:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "23148:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "23153:4:38",
                                "nodeType": "YulLiteral",
                                "src": "23153:4:38",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "23144:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "23144:3:38"
                            },
                            "nativeSrc": "23144:14:38",
                            "nodeType": "YulFunctionCall",
                            "src": "23144:14:38"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nativeSrc": "23129:11:38",
                              "nodeType": "YulIdentifier",
                              "src": "23129:11:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_bytes_memory_ptr",
                    "nativeSrc": "23006:158:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "23063:3:38",
                        "nodeType": "YulTypedName",
                        "src": "23063:3:38",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "23068:6:38",
                        "nodeType": "YulTypedName",
                        "src": "23068:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nativeSrc": "23079:11:38",
                        "nodeType": "YulTypedName",
                        "src": "23079:11:38",
                        "type": ""
                      }
                    ],
                    "src": "23006:158:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "23250:273:38",
                      "nodeType": "YulBlock",
                      "src": "23250:273:38",
                      "statements": [
                        {
                          "nativeSrc": "23260:52:38",
                          "nodeType": "YulVariableDeclaration",
                          "src": "23260:52:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "23306:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "23306:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_bytes_memory_ptr",
                              "nativeSrc": "23274:31:38",
                              "nodeType": "YulIdentifier",
                              "src": "23274:31:38"
                            },
                            "nativeSrc": "23274:38:38",
                            "nodeType": "YulFunctionCall",
                            "src": "23274:38:38"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "23264:6:38",
                              "nodeType": "YulTypedName",
                              "src": "23264:6:38",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "23321:67:38",
                          "nodeType": "YulAssignment",
                          "src": "23321:67:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "23376:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "23376:3:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "23381:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "23381:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_bytes_memory_ptr",
                              "nativeSrc": "23328:47:38",
                              "nodeType": "YulIdentifier",
                              "src": "23328:47:38"
                            },
                            "nativeSrc": "23328:60:38",
                            "nodeType": "YulFunctionCall",
                            "src": "23328:60:38"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "23321:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "23321:3:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "23436:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "23436:5:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "23443:4:38",
                                    "nodeType": "YulLiteral",
                                    "src": "23443:4:38",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "23432:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "23432:3:38"
                                },
                                "nativeSrc": "23432:16:38",
                                "nodeType": "YulFunctionCall",
                                "src": "23432:16:38"
                              },
                              {
                                "name": "pos",
                                "nativeSrc": "23450:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "23450:3:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "23455:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "23455:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nativeSrc": "23397:34:38",
                              "nodeType": "YulIdentifier",
                              "src": "23397:34:38"
                            },
                            "nativeSrc": "23397:65:38",
                            "nodeType": "YulFunctionCall",
                            "src": "23397:65:38"
                          },
                          "nativeSrc": "23397:65:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "23397:65:38"
                        },
                        {
                          "nativeSrc": "23471:46:38",
                          "nodeType": "YulAssignment",
                          "src": "23471:46:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "23482:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "23482:3:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "23509:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "23509:6:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nativeSrc": "23487:21:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "23487:21:38"
                                },
                                "nativeSrc": "23487:29:38",
                                "nodeType": "YulFunctionCall",
                                "src": "23487:29:38"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "23478:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "23478:3:38"
                            },
                            "nativeSrc": "23478:39:38",
                            "nodeType": "YulFunctionCall",
                            "src": "23478:39:38"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "23471:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "23471:3:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr",
                    "nativeSrc": "23170:353:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "23231:5:38",
                        "nodeType": "YulTypedName",
                        "src": "23231:5:38",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "23238:3:38",
                        "nodeType": "YulTypedName",
                        "src": "23238:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "23246:3:38",
                        "nodeType": "YulTypedName",
                        "src": "23246:3:38",
                        "type": ""
                      }
                    ],
                    "src": "23170:353:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "23634:40:38",
                      "nodeType": "YulBlock",
                      "src": "23634:40:38",
                      "statements": [
                        {
                          "nativeSrc": "23645:22:38",
                          "nodeType": "YulAssignment",
                          "src": "23645:22:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "23661:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "23661:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "23655:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "23655:5:38"
                            },
                            "nativeSrc": "23655:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "23655:12:38"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nativeSrc": "23645:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "23645:6:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_length_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr",
                    "nativeSrc": "23529:145:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "23617:5:38",
                        "nodeType": "YulTypedName",
                        "src": "23617:5:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nativeSrc": "23627:6:38",
                        "nodeType": "YulTypedName",
                        "src": "23627:6:38",
                        "type": ""
                      }
                    ],
                    "src": "23529:145:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "23812:73:38",
                      "nodeType": "YulBlock",
                      "src": "23812:73:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "23829:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "23829:3:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "23834:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "23834:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "23822:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "23822:6:38"
                            },
                            "nativeSrc": "23822:19:38",
                            "nodeType": "YulFunctionCall",
                            "src": "23822:19:38"
                          },
                          "nativeSrc": "23822:19:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "23822:19:38"
                        },
                        {
                          "nativeSrc": "23850:29:38",
                          "nodeType": "YulAssignment",
                          "src": "23850:29:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "23869:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "23869:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "23874:4:38",
                                "nodeType": "YulLiteral",
                                "src": "23874:4:38",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "23865:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "23865:3:38"
                            },
                            "nativeSrc": "23865:14:38",
                            "nodeType": "YulFunctionCall",
                            "src": "23865:14:38"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nativeSrc": "23850:11:38",
                              "nodeType": "YulIdentifier",
                              "src": "23850:11:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr",
                    "nativeSrc": "23680:205:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "23784:3:38",
                        "nodeType": "YulTypedName",
                        "src": "23784:3:38",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "23789:6:38",
                        "nodeType": "YulTypedName",
                        "src": "23789:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nativeSrc": "23800:11:38",
                        "nodeType": "YulTypedName",
                        "src": "23800:11:38",
                        "type": ""
                      }
                    ],
                    "src": "23680:205:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "23994:60:38",
                      "nodeType": "YulBlock",
                      "src": "23994:60:38",
                      "statements": [
                        {
                          "nativeSrc": "24004:11:38",
                          "nodeType": "YulAssignment",
                          "src": "24004:11:38",
                          "value": {
                            "name": "ptr",
                            "nativeSrc": "24012:3:38",
                            "nodeType": "YulIdentifier",
                            "src": "24012:3:38"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nativeSrc": "24004:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "24004:4:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "24025:22:38",
                          "nodeType": "YulAssignment",
                          "src": "24025:22:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "ptr",
                                "nativeSrc": "24037:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "24037:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "24042:4:38",
                                "nodeType": "YulLiteral",
                                "src": "24042:4:38",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "24033:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "24033:3:38"
                            },
                            "nativeSrc": "24033:14:38",
                            "nodeType": "YulFunctionCall",
                            "src": "24033:14:38"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nativeSrc": "24025:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "24025:4:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr",
                    "nativeSrc": "23891:163:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nativeSrc": "23981:3:38",
                        "nodeType": "YulTypedName",
                        "src": "23981:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nativeSrc": "23989:4:38",
                        "nodeType": "YulTypedName",
                        "src": "23989:4:38",
                        "type": ""
                      }
                    ],
                    "src": "23891:163:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "24115:53:38",
                      "nodeType": "YulBlock",
                      "src": "24115:53:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "24132:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "24132:3:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "24155:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "24155:5:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_address",
                                  "nativeSrc": "24137:17:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "24137:17:38"
                                },
                                "nativeSrc": "24137:24:38",
                                "nodeType": "YulFunctionCall",
                                "src": "24137:24:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "24125:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "24125:6:38"
                            },
                            "nativeSrc": "24125:37:38",
                            "nodeType": "YulFunctionCall",
                            "src": "24125:37:38"
                          },
                          "nativeSrc": "24125:37:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "24125:37:38"
                        }
                      ]
                    },
                    "name": "abi_encode_t_address_to_t_address",
                    "nativeSrc": "24060:108:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "24103:5:38",
                        "nodeType": "YulTypedName",
                        "src": "24103:5:38",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "24110:3:38",
                        "nodeType": "YulTypedName",
                        "src": "24110:3:38",
                        "type": ""
                      }
                    ],
                    "src": "24060:108:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "24229:53:38",
                      "nodeType": "YulBlock",
                      "src": "24229:53:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "24246:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "24246:3:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "24269:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "24269:5:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint256",
                                  "nativeSrc": "24251:17:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "24251:17:38"
                                },
                                "nativeSrc": "24251:24:38",
                                "nodeType": "YulFunctionCall",
                                "src": "24251:24:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "24239:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "24239:6:38"
                            },
                            "nativeSrc": "24239:37:38",
                            "nodeType": "YulFunctionCall",
                            "src": "24239:37:38"
                          },
                          "nativeSrc": "24239:37:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "24239:37:38"
                        }
                      ]
                    },
                    "name": "abi_encode_t_uint256_to_t_uint256",
                    "nativeSrc": "24174:108:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "24217:5:38",
                        "nodeType": "YulTypedName",
                        "src": "24217:5:38",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "24224:3:38",
                        "nodeType": "YulTypedName",
                        "src": "24224:3:38",
                        "type": ""
                      }
                    ],
                    "src": "24174:108:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "24474:394:38",
                      "nodeType": "YulBlock",
                      "src": "24474:394:38",
                      "statements": [
                        {
                          "nativeSrc": "24484:26:38",
                          "nodeType": "YulVariableDeclaration",
                          "src": "24484:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "24500:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "24500:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "24505:4:38",
                                "nodeType": "YulLiteral",
                                "src": "24505:4:38",
                                "type": "",
                                "value": "0x40"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "24496:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "24496:3:38"
                            },
                            "nativeSrc": "24496:14:38",
                            "nodeType": "YulFunctionCall",
                            "src": "24496:14:38"
                          },
                          "variables": [
                            {
                              "name": "tail",
                              "nativeSrc": "24488:4:38",
                              "nodeType": "YulTypedName",
                              "src": "24488:4:38",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "24520:165:38",
                          "nodeType": "YulBlock",
                          "src": "24520:165:38",
                          "statements": [
                            {
                              "nativeSrc": "24556:43:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "24556:43:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "24586:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "24586:5:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "24593:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "24593:4:38",
                                        "type": "",
                                        "value": "0x00"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "24582:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "24582:3:38"
                                    },
                                    "nativeSrc": "24582:16:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "24582:16:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "24576:5:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "24576:5:38"
                                },
                                "nativeSrc": "24576:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "24576:23:38"
                              },
                              "variables": [
                                {
                                  "name": "memberValue0",
                                  "nativeSrc": "24560:12:38",
                                  "nodeType": "YulTypedName",
                                  "src": "24560:12:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "memberValue0",
                                    "nativeSrc": "24646:12:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "24646:12:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "24664:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "24664:3:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "24669:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "24669:4:38",
                                        "type": "",
                                        "value": "0x00"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "24660:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "24660:3:38"
                                    },
                                    "nativeSrc": "24660:14:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "24660:14:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_address_to_t_address",
                                  "nativeSrc": "24612:33:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "24612:33:38"
                                },
                                "nativeSrc": "24612:63:38",
                                "nodeType": "YulFunctionCall",
                                "src": "24612:63:38"
                              },
                              "nativeSrc": "24612:63:38",
                              "nodeType": "YulExpressionStatement",
                              "src": "24612:63:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "24695:166:38",
                          "nodeType": "YulBlock",
                          "src": "24695:166:38",
                          "statements": [
                            {
                              "nativeSrc": "24732:43:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "24732:43:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "24762:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "24762:5:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "24769:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "24769:4:38",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "24758:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "24758:3:38"
                                    },
                                    "nativeSrc": "24758:16:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "24758:16:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "24752:5:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "24752:5:38"
                                },
                                "nativeSrc": "24752:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "24752:23:38"
                              },
                              "variables": [
                                {
                                  "name": "memberValue0",
                                  "nativeSrc": "24736:12:38",
                                  "nodeType": "YulTypedName",
                                  "src": "24736:12:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "memberValue0",
                                    "nativeSrc": "24822:12:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "24822:12:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "24840:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "24840:3:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "24845:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "24845:4:38",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "24836:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "24836:3:38"
                                    },
                                    "nativeSrc": "24836:14:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "24836:14:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_uint256_to_t_uint256",
                                  "nativeSrc": "24788:33:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "24788:33:38"
                                },
                                "nativeSrc": "24788:63:38",
                                "nodeType": "YulFunctionCall",
                                "src": "24788:63:38"
                              },
                              "nativeSrc": "24788:63:38",
                              "nodeType": "YulExpressionStatement",
                              "src": "24788:63:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_struct$_EVMTokenAmount_$181_memory_ptr_to_t_struct$_EVMTokenAmount_$181_memory_ptr",
                    "nativeSrc": "24356:512:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "24461:5:38",
                        "nodeType": "YulTypedName",
                        "src": "24461:5:38",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "24468:3:38",
                        "nodeType": "YulTypedName",
                        "src": "24468:3:38",
                        "type": ""
                      }
                    ],
                    "src": "24356:512:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "25016:161:38",
                      "nodeType": "YulBlock",
                      "src": "25016:161:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "25122:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "25122:6:38"
                              },
                              {
                                "name": "pos",
                                "nativeSrc": "25130:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "25130:3:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_struct$_EVMTokenAmount_$181_memory_ptr_to_t_struct$_EVMTokenAmount_$181_memory_ptr",
                              "nativeSrc": "25026:95:38",
                              "nodeType": "YulIdentifier",
                              "src": "25026:95:38"
                            },
                            "nativeSrc": "25026:108:38",
                            "nodeType": "YulFunctionCall",
                            "src": "25026:108:38"
                          },
                          "nativeSrc": "25026:108:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "25026:108:38"
                        },
                        {
                          "nativeSrc": "25143:28:38",
                          "nodeType": "YulAssignment",
                          "src": "25143:28:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "25161:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "25161:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "25166:4:38",
                                "nodeType": "YulLiteral",
                                "src": "25166:4:38",
                                "type": "",
                                "value": "0x40"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "25157:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "25157:3:38"
                            },
                            "nativeSrc": "25157:14:38",
                            "nodeType": "YulFunctionCall",
                            "src": "25157:14:38"
                          },
                          "variableNames": [
                            {
                              "name": "updatedPos",
                              "nativeSrc": "25143:10:38",
                              "nodeType": "YulIdentifier",
                              "src": "25143:10:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encodeUpdatedPos_t_struct$_EVMTokenAmount_$181_memory_ptr_to_t_struct$_EVMTokenAmount_$181_memory_ptr",
                    "nativeSrc": "24874:303:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value0",
                        "nativeSrc": "24989:6:38",
                        "nodeType": "YulTypedName",
                        "src": "24989:6:38",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "24997:3:38",
                        "nodeType": "YulTypedName",
                        "src": "24997:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updatedPos",
                        "nativeSrc": "25005:10:38",
                        "nodeType": "YulTypedName",
                        "src": "25005:10:38",
                        "type": ""
                      }
                    ],
                    "src": "24874:303:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "25289:38:38",
                      "nodeType": "YulBlock",
                      "src": "25289:38:38",
                      "statements": [
                        {
                          "nativeSrc": "25299:22:38",
                          "nodeType": "YulAssignment",
                          "src": "25299:22:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "ptr",
                                "nativeSrc": "25311:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "25311:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "25316:4:38",
                                "nodeType": "YulLiteral",
                                "src": "25316:4:38",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "25307:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "25307:3:38"
                            },
                            "nativeSrc": "25307:14:38",
                            "nodeType": "YulFunctionCall",
                            "src": "25307:14:38"
                          },
                          "variableNames": [
                            {
                              "name": "next",
                              "nativeSrc": "25299:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "25299:4:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_nextElement_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr",
                    "nativeSrc": "25183:144:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nativeSrc": "25276:3:38",
                        "nodeType": "YulTypedName",
                        "src": "25276:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "next",
                        "nativeSrc": "25284:4:38",
                        "nodeType": "YulTypedName",
                        "src": "25284:4:38",
                        "type": ""
                      }
                    ],
                    "src": "25183:144:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "25581:784:38",
                      "nodeType": "YulBlock",
                      "src": "25581:784:38",
                      "statements": [
                        {
                          "nativeSrc": "25591:99:38",
                          "nodeType": "YulVariableDeclaration",
                          "src": "25591:99:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "25684:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "25684:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr",
                              "nativeSrc": "25605:78:38",
                              "nodeType": "YulIdentifier",
                              "src": "25605:78:38"
                            },
                            "nativeSrc": "25605:85:38",
                            "nodeType": "YulFunctionCall",
                            "src": "25605:85:38"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "25595:6:38",
                              "nodeType": "YulTypedName",
                              "src": "25595:6:38",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "25699:114:38",
                          "nodeType": "YulAssignment",
                          "src": "25699:114:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "25801:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "25801:3:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "25806:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "25806:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr",
                              "nativeSrc": "25706:94:38",
                              "nodeType": "YulIdentifier",
                              "src": "25706:94:38"
                            },
                            "nativeSrc": "25706:107:38",
                            "nodeType": "YulFunctionCall",
                            "src": "25706:107:38"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "25699:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "25699:3:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "25822:102:38",
                          "nodeType": "YulVariableDeclaration",
                          "src": "25822:102:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "25918:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "25918:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "array_dataslot_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr",
                              "nativeSrc": "25837:80:38",
                              "nodeType": "YulIdentifier",
                              "src": "25837:80:38"
                            },
                            "nativeSrc": "25837:87:38",
                            "nodeType": "YulFunctionCall",
                            "src": "25837:87:38"
                          },
                          "variables": [
                            {
                              "name": "baseRef",
                              "nativeSrc": "25826:7:38",
                              "nodeType": "YulTypedName",
                              "src": "25826:7:38",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "25933:21:38",
                          "nodeType": "YulVariableDeclaration",
                          "src": "25933:21:38",
                          "value": {
                            "name": "baseRef",
                            "nativeSrc": "25947:7:38",
                            "nodeType": "YulIdentifier",
                            "src": "25947:7:38"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nativeSrc": "25937:6:38",
                              "nodeType": "YulTypedName",
                              "src": "25937:6:38",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "26023:317:38",
                            "nodeType": "YulBlock",
                            "src": "26023:317:38",
                            "statements": [
                              {
                                "nativeSrc": "26037:34:38",
                                "nodeType": "YulVariableDeclaration",
                                "src": "26037:34:38",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nativeSrc": "26064:6:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "26064:6:38"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nativeSrc": "26058:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "26058:5:38"
                                  },
                                  "nativeSrc": "26058:13:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "26058:13:38"
                                },
                                "variables": [
                                  {
                                    "name": "elementValue0",
                                    "nativeSrc": "26041:13:38",
                                    "nodeType": "YulTypedName",
                                    "src": "26041:13:38",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nativeSrc": "26084:132:38",
                                "nodeType": "YulAssignment",
                                "src": "26084:132:38",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "elementValue0",
                                      "nativeSrc": "26197:13:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "26197:13:38"
                                    },
                                    {
                                      "name": "pos",
                                      "nativeSrc": "26212:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "26212:3:38"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encodeUpdatedPos_t_struct$_EVMTokenAmount_$181_memory_ptr_to_t_struct$_EVMTokenAmount_$181_memory_ptr",
                                    "nativeSrc": "26091:105:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "26091:105:38"
                                  },
                                  "nativeSrc": "26091:125:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "26091:125:38"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nativeSrc": "26084:3:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "26084:3:38"
                                  }
                                ]
                              },
                              {
                                "nativeSrc": "26229:101:38",
                                "nodeType": "YulAssignment",
                                "src": "26229:101:38",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nativeSrc": "26323:6:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "26323:6:38"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "array_nextElement_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr",
                                    "nativeSrc": "26239:83:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "26239:83:38"
                                  },
                                  "nativeSrc": "26239:91:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "26239:91:38"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nativeSrc": "26229:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "26229:6:38"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nativeSrc": "25985:1:38",
                                "nodeType": "YulIdentifier",
                                "src": "25985:1:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "25988:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "25988:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nativeSrc": "25982:2:38",
                              "nodeType": "YulIdentifier",
                              "src": "25982:2:38"
                            },
                            "nativeSrc": "25982:13:38",
                            "nodeType": "YulFunctionCall",
                            "src": "25982:13:38"
                          },
                          "nativeSrc": "25963:377:38",
                          "nodeType": "YulForLoop",
                          "post": {
                            "nativeSrc": "25996:18:38",
                            "nodeType": "YulBlock",
                            "src": "25996:18:38",
                            "statements": [
                              {
                                "nativeSrc": "25998:14:38",
                                "nodeType": "YulAssignment",
                                "src": "25998:14:38",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nativeSrc": "26007:1:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "26007:1:38"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "26010:1:38",
                                      "nodeType": "YulLiteral",
                                      "src": "26010:1:38",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "26003:3:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "26003:3:38"
                                  },
                                  "nativeSrc": "26003:9:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "26003:9:38"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nativeSrc": "25998:1:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "25998:1:38"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nativeSrc": "25967:14:38",
                            "nodeType": "YulBlock",
                            "src": "25967:14:38",
                            "statements": [
                              {
                                "nativeSrc": "25969:10:38",
                                "nodeType": "YulVariableDeclaration",
                                "src": "25969:10:38",
                                "value": {
                                  "kind": "number",
                                  "nativeSrc": "25978:1:38",
                                  "nodeType": "YulLiteral",
                                  "src": "25978:1:38",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "i",
                                    "nativeSrc": "25973:1:38",
                                    "nodeType": "YulTypedName",
                                    "src": "25973:1:38",
                                    "type": ""
                                  }
                                ]
                              }
                            ]
                          },
                          "src": "25963:377:38"
                        },
                        {
                          "nativeSrc": "26349:10:38",
                          "nodeType": "YulAssignment",
                          "src": "26349:10:38",
                          "value": {
                            "name": "pos",
                            "nativeSrc": "26356:3:38",
                            "nodeType": "YulIdentifier",
                            "src": "26356:3:38"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "26349:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "26349:3:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr",
                    "nativeSrc": "25405:960:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "25560:5:38",
                        "nodeType": "YulTypedName",
                        "src": "25560:5:38",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "25567:3:38",
                        "nodeType": "YulTypedName",
                        "src": "25567:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "25576:3:38",
                        "nodeType": "YulTypedName",
                        "src": "25576:3:38",
                        "type": ""
                      }
                    ],
                    "src": "25405:960:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "26575:1324:38",
                      "nodeType": "YulBlock",
                      "src": "26575:1324:38",
                      "statements": [
                        {
                          "nativeSrc": "26585:26:38",
                          "nodeType": "YulVariableDeclaration",
                          "src": "26585:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "26601:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "26601:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "26606:4:38",
                                "nodeType": "YulLiteral",
                                "src": "26606:4:38",
                                "type": "",
                                "value": "0xa0"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "26597:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "26597:3:38"
                            },
                            "nativeSrc": "26597:14:38",
                            "nodeType": "YulFunctionCall",
                            "src": "26597:14:38"
                          },
                          "variables": [
                            {
                              "name": "tail",
                              "nativeSrc": "26589:4:38",
                              "nodeType": "YulTypedName",
                              "src": "26589:4:38",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "26621:237:38",
                          "nodeType": "YulBlock",
                          "src": "26621:237:38",
                          "statements": [
                            {
                              "nativeSrc": "26660:43:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "26660:43:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "26690:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "26690:5:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "26697:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "26697:4:38",
                                        "type": "",
                                        "value": "0x00"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "26686:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "26686:3:38"
                                    },
                                    "nativeSrc": "26686:16:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "26686:16:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "26680:5:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "26680:5:38"
                                },
                                "nativeSrc": "26680:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "26680:23:38"
                              },
                              "variables": [
                                {
                                  "name": "memberValue0",
                                  "nativeSrc": "26664:12:38",
                                  "nodeType": "YulTypedName",
                                  "src": "26664:12:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "26728:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "26728:3:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "26733:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "26733:4:38",
                                        "type": "",
                                        "value": "0x00"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "26724:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "26724:3:38"
                                    },
                                    "nativeSrc": "26724:14:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "26724:14:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail",
                                        "nativeSrc": "26744:4:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "26744:4:38"
                                      },
                                      {
                                        "name": "pos",
                                        "nativeSrc": "26750:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "26750:3:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "26740:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "26740:3:38"
                                    },
                                    "nativeSrc": "26740:14:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "26740:14:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "26717:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "26717:6:38"
                                },
                                "nativeSrc": "26717:38:38",
                                "nodeType": "YulFunctionCall",
                                "src": "26717:38:38"
                              },
                              "nativeSrc": "26717:38:38",
                              "nodeType": "YulExpressionStatement",
                              "src": "26717:38:38"
                            },
                            {
                              "nativeSrc": "26768:79:38",
                              "nodeType": "YulAssignment",
                              "src": "26768:79:38",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "memberValue0",
                                    "nativeSrc": "26828:12:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "26828:12:38"
                                  },
                                  {
                                    "name": "tail",
                                    "nativeSrc": "26842:4:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "26842:4:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr",
                                  "nativeSrc": "26776:51:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "26776:51:38"
                                },
                                "nativeSrc": "26776:71:38",
                                "nodeType": "YulFunctionCall",
                                "src": "26776:71:38"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "26768:4:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "26768:4:38"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "26868:233:38",
                          "nodeType": "YulBlock",
                          "src": "26868:233:38",
                          "statements": [
                            {
                              "nativeSrc": "26903:43:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "26903:43:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "26933:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "26933:5:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "26940:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "26940:4:38",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "26929:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "26929:3:38"
                                    },
                                    "nativeSrc": "26929:16:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "26929:16:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "26923:5:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "26923:5:38"
                                },
                                "nativeSrc": "26923:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "26923:23:38"
                              },
                              "variables": [
                                {
                                  "name": "memberValue0",
                                  "nativeSrc": "26907:12:38",
                                  "nodeType": "YulTypedName",
                                  "src": "26907:12:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "26971:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "26971:3:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "26976:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "26976:4:38",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "26967:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "26967:3:38"
                                    },
                                    "nativeSrc": "26967:14:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "26967:14:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail",
                                        "nativeSrc": "26987:4:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "26987:4:38"
                                      },
                                      {
                                        "name": "pos",
                                        "nativeSrc": "26993:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "26993:3:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "26983:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "26983:3:38"
                                    },
                                    "nativeSrc": "26983:14:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "26983:14:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "26960:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "26960:6:38"
                                },
                                "nativeSrc": "26960:38:38",
                                "nodeType": "YulFunctionCall",
                                "src": "26960:38:38"
                              },
                              "nativeSrc": "26960:38:38",
                              "nodeType": "YulExpressionStatement",
                              "src": "26960:38:38"
                            },
                            {
                              "nativeSrc": "27011:79:38",
                              "nodeType": "YulAssignment",
                              "src": "27011:79:38",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "memberValue0",
                                    "nativeSrc": "27071:12:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "27071:12:38"
                                  },
                                  {
                                    "name": "tail",
                                    "nativeSrc": "27085:4:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "27085:4:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr",
                                  "nativeSrc": "27019:51:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "27019:51:38"
                                },
                                "nativeSrc": "27019:71:38",
                                "nodeType": "YulFunctionCall",
                                "src": "27019:71:38"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "27011:4:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "27011:4:38"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "27111:335:38",
                          "nodeType": "YulBlock",
                          "src": "27111:335:38",
                          "statements": [
                            {
                              "nativeSrc": "27154:43:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "27154:43:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "27184:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "27184:5:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "27191:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "27191:4:38",
                                        "type": "",
                                        "value": "0x40"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "27180:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "27180:3:38"
                                    },
                                    "nativeSrc": "27180:16:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "27180:16:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "27174:5:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "27174:5:38"
                                },
                                "nativeSrc": "27174:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "27174:23:38"
                              },
                              "variables": [
                                {
                                  "name": "memberValue0",
                                  "nativeSrc": "27158:12:38",
                                  "nodeType": "YulTypedName",
                                  "src": "27158:12:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "27222:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "27222:3:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "27227:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "27227:4:38",
                                        "type": "",
                                        "value": "0x40"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "27218:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "27218:3:38"
                                    },
                                    "nativeSrc": "27218:14:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "27218:14:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail",
                                        "nativeSrc": "27238:4:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "27238:4:38"
                                      },
                                      {
                                        "name": "pos",
                                        "nativeSrc": "27244:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "27244:3:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "27234:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "27234:3:38"
                                    },
                                    "nativeSrc": "27234:14:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "27234:14:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "27211:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "27211:6:38"
                                },
                                "nativeSrc": "27211:38:38",
                                "nodeType": "YulFunctionCall",
                                "src": "27211:38:38"
                              },
                              "nativeSrc": "27211:38:38",
                              "nodeType": "YulExpressionStatement",
                              "src": "27211:38:38"
                            },
                            {
                              "nativeSrc": "27262:173:38",
                              "nodeType": "YulAssignment",
                              "src": "27262:173:38",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "memberValue0",
                                    "nativeSrc": "27416:12:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "27416:12:38"
                                  },
                                  {
                                    "name": "tail",
                                    "nativeSrc": "27430:4:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "27430:4:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr",
                                  "nativeSrc": "27270:145:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "27270:145:38"
                                },
                                "nativeSrc": "27270:165:38",
                                "nodeType": "YulFunctionCall",
                                "src": "27270:165:38"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "27262:4:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "27262:4:38"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "27456:168:38",
                          "nodeType": "YulBlock",
                          "src": "27456:168:38",
                          "statements": [
                            {
                              "nativeSrc": "27495:43:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "27495:43:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "27525:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "27525:5:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "27532:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "27532:4:38",
                                        "type": "",
                                        "value": "0x60"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "27521:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "27521:3:38"
                                    },
                                    "nativeSrc": "27521:16:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "27521:16:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "27515:5:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "27515:5:38"
                                },
                                "nativeSrc": "27515:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "27515:23:38"
                              },
                              "variables": [
                                {
                                  "name": "memberValue0",
                                  "nativeSrc": "27499:12:38",
                                  "nodeType": "YulTypedName",
                                  "src": "27499:12:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "memberValue0",
                                    "nativeSrc": "27585:12:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "27585:12:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "27603:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "27603:3:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "27608:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "27608:4:38",
                                        "type": "",
                                        "value": "0x60"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "27599:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "27599:3:38"
                                    },
                                    "nativeSrc": "27599:14:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "27599:14:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_address_to_t_address",
                                  "nativeSrc": "27551:33:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "27551:33:38"
                                },
                                "nativeSrc": "27551:63:38",
                                "nodeType": "YulFunctionCall",
                                "src": "27551:63:38"
                              },
                              "nativeSrc": "27551:63:38",
                              "nodeType": "YulExpressionStatement",
                              "src": "27551:63:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "27634:238:38",
                          "nodeType": "YulBlock",
                          "src": "27634:238:38",
                          "statements": [
                            {
                              "nativeSrc": "27674:43:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "27674:43:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "27704:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "27704:5:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "27711:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "27711:4:38",
                                        "type": "",
                                        "value": "0x80"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "27700:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "27700:3:38"
                                    },
                                    "nativeSrc": "27700:16:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "27700:16:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "27694:5:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "27694:5:38"
                                },
                                "nativeSrc": "27694:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "27694:23:38"
                              },
                              "variables": [
                                {
                                  "name": "memberValue0",
                                  "nativeSrc": "27678:12:38",
                                  "nodeType": "YulTypedName",
                                  "src": "27678:12:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "27742:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "27742:3:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "27747:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "27747:4:38",
                                        "type": "",
                                        "value": "0x80"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "27738:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "27738:3:38"
                                    },
                                    "nativeSrc": "27738:14:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "27738:14:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "tail",
                                        "nativeSrc": "27758:4:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "27758:4:38"
                                      },
                                      {
                                        "name": "pos",
                                        "nativeSrc": "27764:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "27764:3:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nativeSrc": "27754:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "27754:3:38"
                                    },
                                    "nativeSrc": "27754:14:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "27754:14:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "27731:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "27731:6:38"
                                },
                                "nativeSrc": "27731:38:38",
                                "nodeType": "YulFunctionCall",
                                "src": "27731:38:38"
                              },
                              "nativeSrc": "27731:38:38",
                              "nodeType": "YulExpressionStatement",
                              "src": "27731:38:38"
                            },
                            {
                              "nativeSrc": "27782:79:38",
                              "nodeType": "YulAssignment",
                              "src": "27782:79:38",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "memberValue0",
                                    "nativeSrc": "27842:12:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "27842:12:38"
                                  },
                                  {
                                    "name": "tail",
                                    "nativeSrc": "27856:4:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "27856:4:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr",
                                  "nativeSrc": "27790:51:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "27790:51:38"
                                },
                                "nativeSrc": "27790:71:38",
                                "nodeType": "YulFunctionCall",
                                "src": "27790:71:38"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nativeSrc": "27782:4:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "27782:4:38"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "27882:11:38",
                          "nodeType": "YulAssignment",
                          "src": "27882:11:38",
                          "value": {
                            "name": "tail",
                            "nativeSrc": "27889:4:38",
                            "nodeType": "YulIdentifier",
                            "src": "27889:4:38"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "27882:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "27882:3:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_struct$_EVM2AnyMessage_$207_memory_ptr_to_t_struct$_EVM2AnyMessage_$207_memory_ptr_fromStack",
                    "nativeSrc": "26439:1460:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "26554:5:38",
                        "nodeType": "YulTypedName",
                        "src": "26554:5:38",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "26561:3:38",
                        "nodeType": "YulTypedName",
                        "src": "26561:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "26570:3:38",
                        "nodeType": "YulTypedName",
                        "src": "26570:3:38",
                        "type": ""
                      }
                    ],
                    "src": "26439:1460:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "28091:317:38",
                      "nodeType": "YulBlock",
                      "src": "28091:317:38",
                      "statements": [
                        {
                          "nativeSrc": "28101:26:38",
                          "nodeType": "YulAssignment",
                          "src": "28101:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "28113:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "28113:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "28124:2:38",
                                "nodeType": "YulLiteral",
                                "src": "28124:2:38",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "28109:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "28109:3:38"
                            },
                            "nativeSrc": "28109:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "28109:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "28101:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "28101:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "28179:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "28179:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "28192:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "28192:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "28203:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "28203:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "28188:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "28188:3:38"
                                },
                                "nativeSrc": "28188:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "28188:17:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint64_to_t_uint64_fromStack",
                              "nativeSrc": "28137:41:38",
                              "nodeType": "YulIdentifier",
                              "src": "28137:41:38"
                            },
                            "nativeSrc": "28137:69:38",
                            "nodeType": "YulFunctionCall",
                            "src": "28137:69:38"
                          },
                          "nativeSrc": "28137:69:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "28137:69:38"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "28227:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "28227:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "28238:2:38",
                                    "nodeType": "YulLiteral",
                                    "src": "28238:2:38",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "28223:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "28223:3:38"
                                },
                                "nativeSrc": "28223:18:38",
                                "nodeType": "YulFunctionCall",
                                "src": "28223:18:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nativeSrc": "28247:4:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "28247:4:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "28253:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "28253:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "28243:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "28243:3:38"
                                },
                                "nativeSrc": "28243:20:38",
                                "nodeType": "YulFunctionCall",
                                "src": "28243:20:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "28216:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "28216:6:38"
                            },
                            "nativeSrc": "28216:48:38",
                            "nodeType": "YulFunctionCall",
                            "src": "28216:48:38"
                          },
                          "nativeSrc": "28216:48:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "28216:48:38"
                        },
                        {
                          "nativeSrc": "28273:128:38",
                          "nodeType": "YulAssignment",
                          "src": "28273:128:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nativeSrc": "28387:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "28387:6:38"
                              },
                              {
                                "name": "tail",
                                "nativeSrc": "28396:4:38",
                                "nodeType": "YulIdentifier",
                                "src": "28396:4:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_struct$_EVM2AnyMessage_$207_memory_ptr_to_t_struct$_EVM2AnyMessage_$207_memory_ptr_fromStack",
                              "nativeSrc": "28281:105:38",
                              "nodeType": "YulIdentifier",
                              "src": "28281:105:38"
                            },
                            "nativeSrc": "28281:120:38",
                            "nodeType": "YulFunctionCall",
                            "src": "28281:120:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "28273:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "28273:4:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint64_t_struct$_EVM2AnyMessage_$207_memory_ptr__to_t_uint64_t_struct$_EVM2AnyMessage_$207_memory_ptr__fromStack_reversed",
                    "nativeSrc": "27905:503:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "28055:9:38",
                        "nodeType": "YulTypedName",
                        "src": "28055:9:38",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "28067:6:38",
                        "nodeType": "YulTypedName",
                        "src": "28067:6:38",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "28075:6:38",
                        "nodeType": "YulTypedName",
                        "src": "28075:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "28086:4:38",
                        "nodeType": "YulTypedName",
                        "src": "28086:4:38",
                        "type": ""
                      }
                    ],
                    "src": "27905:503:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "28540:206:38",
                      "nodeType": "YulBlock",
                      "src": "28540:206:38",
                      "statements": [
                        {
                          "nativeSrc": "28550:26:38",
                          "nodeType": "YulAssignment",
                          "src": "28550:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "28562:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "28562:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "28573:2:38",
                                "nodeType": "YulLiteral",
                                "src": "28573:2:38",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "28558:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "28558:3:38"
                            },
                            "nativeSrc": "28558:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "28558:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "28550:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "28550:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "28630:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "28630:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "28643:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "28643:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "28654:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "28654:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "28639:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "28639:3:38"
                                },
                                "nativeSrc": "28639:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "28639:17:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nativeSrc": "28586:43:38",
                              "nodeType": "YulIdentifier",
                              "src": "28586:43:38"
                            },
                            "nativeSrc": "28586:71:38",
                            "nodeType": "YulFunctionCall",
                            "src": "28586:71:38"
                          },
                          "nativeSrc": "28586:71:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "28586:71:38"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nativeSrc": "28711:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "28711:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "28724:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "28724:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "28735:2:38",
                                    "nodeType": "YulLiteral",
                                    "src": "28735:2:38",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "28720:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "28720:3:38"
                                },
                                "nativeSrc": "28720:18:38",
                                "nodeType": "YulFunctionCall",
                                "src": "28720:18:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nativeSrc": "28667:43:38",
                              "nodeType": "YulIdentifier",
                              "src": "28667:43:38"
                            },
                            "nativeSrc": "28667:72:38",
                            "nodeType": "YulFunctionCall",
                            "src": "28667:72:38"
                          },
                          "nativeSrc": "28667:72:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "28667:72:38"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nativeSrc": "28414:332:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "28504:9:38",
                        "nodeType": "YulTypedName",
                        "src": "28504:9:38",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "28516:6:38",
                        "nodeType": "YulTypedName",
                        "src": "28516:6:38",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "28524:6:38",
                        "nodeType": "YulTypedName",
                        "src": "28524:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "28535:4:38",
                        "nodeType": "YulTypedName",
                        "src": "28535:4:38",
                        "type": ""
                      }
                    ],
                    "src": "28414:332:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "28812:77:38",
                      "nodeType": "YulBlock",
                      "src": "28812:77:38",
                      "statements": [
                        {
                          "nativeSrc": "28822:22:38",
                          "nodeType": "YulAssignment",
                          "src": "28822:22:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "28837:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "28837:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "28831:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "28831:5:38"
                            },
                            "nativeSrc": "28831:13:38",
                            "nodeType": "YulFunctionCall",
                            "src": "28831:13:38"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "28822:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "28822:5:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "28877:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "28877:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_bool",
                              "nativeSrc": "28853:23:38",
                              "nodeType": "YulIdentifier",
                              "src": "28853:23:38"
                            },
                            "nativeSrc": "28853:30:38",
                            "nodeType": "YulFunctionCall",
                            "src": "28853:30:38"
                          },
                          "nativeSrc": "28853:30:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "28853:30:38"
                        }
                      ]
                    },
                    "name": "abi_decode_t_bool_fromMemory",
                    "nativeSrc": "28752:137:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "28790:6:38",
                        "nodeType": "YulTypedName",
                        "src": "28790:6:38",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "28798:3:38",
                        "nodeType": "YulTypedName",
                        "src": "28798:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "28806:5:38",
                        "nodeType": "YulTypedName",
                        "src": "28806:5:38",
                        "type": ""
                      }
                    ],
                    "src": "28752:137:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "28969:271:38",
                      "nodeType": "YulBlock",
                      "src": "28969:271:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "29015:83:38",
                            "nodeType": "YulBlock",
                            "src": "29015:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "29017:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "29017:77:38"
                                  },
                                  "nativeSrc": "29017:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "29017:79:38"
                                },
                                "nativeSrc": "29017:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "29017:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "28990:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "28990:7:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "28999:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "28999:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "28986:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "28986:3:38"
                                },
                                "nativeSrc": "28986:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "28986:23:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "29011:2:38",
                                "nodeType": "YulLiteral",
                                "src": "29011:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "28982:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "28982:3:38"
                            },
                            "nativeSrc": "28982:32:38",
                            "nodeType": "YulFunctionCall",
                            "src": "28982:32:38"
                          },
                          "nativeSrc": "28979:119:38",
                          "nodeType": "YulIf",
                          "src": "28979:119:38"
                        },
                        {
                          "nativeSrc": "29108:125:38",
                          "nodeType": "YulBlock",
                          "src": "29108:125:38",
                          "statements": [
                            {
                              "nativeSrc": "29123:15:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "29123:15:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "29137:1:38",
                                "nodeType": "YulLiteral",
                                "src": "29137:1:38",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "29127:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "29127:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "29152:71:38",
                              "nodeType": "YulAssignment",
                              "src": "29152:71:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "29195:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "29195:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "29206:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "29206:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "29191:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "29191:3:38"
                                    },
                                    "nativeSrc": "29191:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "29191:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "29215:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "29215:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bool_fromMemory",
                                  "nativeSrc": "29162:28:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "29162:28:38"
                                },
                                "nativeSrc": "29162:61:38",
                                "nodeType": "YulFunctionCall",
                                "src": "29162:61:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "29152:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "29152:6:38"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nativeSrc": "28895:345:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "28939:9:38",
                        "nodeType": "YulTypedName",
                        "src": "28939:9:38",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "28950:7:38",
                        "nodeType": "YulTypedName",
                        "src": "28950:7:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "28962:6:38",
                        "nodeType": "YulTypedName",
                        "src": "28962:6:38",
                        "type": ""
                      }
                    ],
                    "src": "28895:345:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "29309:80:38",
                      "nodeType": "YulBlock",
                      "src": "29309:80:38",
                      "statements": [
                        {
                          "nativeSrc": "29319:22:38",
                          "nodeType": "YulAssignment",
                          "src": "29319:22:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "29334:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "29334:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "29328:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "29328:5:38"
                            },
                            "nativeSrc": "29328:13:38",
                            "nodeType": "YulFunctionCall",
                            "src": "29328:13:38"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "29319:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "29319:5:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "29377:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "29377:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_bytes32",
                              "nativeSrc": "29350:26:38",
                              "nodeType": "YulIdentifier",
                              "src": "29350:26:38"
                            },
                            "nativeSrc": "29350:33:38",
                            "nodeType": "YulFunctionCall",
                            "src": "29350:33:38"
                          },
                          "nativeSrc": "29350:33:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "29350:33:38"
                        }
                      ]
                    },
                    "name": "abi_decode_t_bytes32_fromMemory",
                    "nativeSrc": "29246:143:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "29287:6:38",
                        "nodeType": "YulTypedName",
                        "src": "29287:6:38",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "29295:3:38",
                        "nodeType": "YulTypedName",
                        "src": "29295:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "29303:5:38",
                        "nodeType": "YulTypedName",
                        "src": "29303:5:38",
                        "type": ""
                      }
                    ],
                    "src": "29246:143:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "29472:274:38",
                      "nodeType": "YulBlock",
                      "src": "29472:274:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "29518:83:38",
                            "nodeType": "YulBlock",
                            "src": "29518:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "29520:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "29520:77:38"
                                  },
                                  "nativeSrc": "29520:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "29520:79:38"
                                },
                                "nativeSrc": "29520:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "29520:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "29493:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "29493:7:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "29502:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "29502:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "29489:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "29489:3:38"
                                },
                                "nativeSrc": "29489:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "29489:23:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "29514:2:38",
                                "nodeType": "YulLiteral",
                                "src": "29514:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "29485:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "29485:3:38"
                            },
                            "nativeSrc": "29485:32:38",
                            "nodeType": "YulFunctionCall",
                            "src": "29485:32:38"
                          },
                          "nativeSrc": "29482:119:38",
                          "nodeType": "YulIf",
                          "src": "29482:119:38"
                        },
                        {
                          "nativeSrc": "29611:128:38",
                          "nodeType": "YulBlock",
                          "src": "29611:128:38",
                          "statements": [
                            {
                              "nativeSrc": "29626:15:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "29626:15:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "29640:1:38",
                                "nodeType": "YulLiteral",
                                "src": "29640:1:38",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "29630:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "29630:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "29655:74:38",
                              "nodeType": "YulAssignment",
                              "src": "29655:74:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "29701:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "29701:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "29712:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "29712:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "29697:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "29697:3:38"
                                    },
                                    "nativeSrc": "29697:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "29697:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "29721:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "29721:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes32_fromMemory",
                                  "nativeSrc": "29665:31:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "29665:31:38"
                                },
                                "nativeSrc": "29665:64:38",
                                "nodeType": "YulFunctionCall",
                                "src": "29665:64:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "29655:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "29655:6:38"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32_fromMemory",
                    "nativeSrc": "29395:351:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "29442:9:38",
                        "nodeType": "YulTypedName",
                        "src": "29442:9:38",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "29453:7:38",
                        "nodeType": "YulTypedName",
                        "src": "29453:7:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "29465:6:38",
                        "nodeType": "YulTypedName",
                        "src": "29465:6:38",
                        "type": ""
                      }
                    ],
                    "src": "29395:351:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "29847:73:38",
                      "nodeType": "YulBlock",
                      "src": "29847:73:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "29864:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "29864:3:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "29869:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "29869:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "29857:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "29857:6:38"
                            },
                            "nativeSrc": "29857:19:38",
                            "nodeType": "YulFunctionCall",
                            "src": "29857:19:38"
                          },
                          "nativeSrc": "29857:19:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "29857:19:38"
                        },
                        {
                          "nativeSrc": "29885:29:38",
                          "nodeType": "YulAssignment",
                          "src": "29885:29:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "29904:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "29904:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "29909:4:38",
                                "nodeType": "YulLiteral",
                                "src": "29909:4:38",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "29900:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "29900:3:38"
                            },
                            "nativeSrc": "29900:14:38",
                            "nodeType": "YulFunctionCall",
                            "src": "29900:14:38"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nativeSrc": "29885:11:38",
                              "nodeType": "YulIdentifier",
                              "src": "29885:11:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
                    "nativeSrc": "29752:168:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "29819:3:38",
                        "nodeType": "YulTypedName",
                        "src": "29819:3:38",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "29824:6:38",
                        "nodeType": "YulTypedName",
                        "src": "29824:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nativeSrc": "29835:11:38",
                        "nodeType": "YulTypedName",
                        "src": "29835:11:38",
                        "type": ""
                      }
                    ],
                    "src": "29752:168:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "30016:283:38",
                      "nodeType": "YulBlock",
                      "src": "30016:283:38",
                      "statements": [
                        {
                          "nativeSrc": "30026:52:38",
                          "nodeType": "YulVariableDeclaration",
                          "src": "30026:52:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "30072:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "30072:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_bytes_memory_ptr",
                              "nativeSrc": "30040:31:38",
                              "nodeType": "YulIdentifier",
                              "src": "30040:31:38"
                            },
                            "nativeSrc": "30040:38:38",
                            "nodeType": "YulFunctionCall",
                            "src": "30040:38:38"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "30030:6:38",
                              "nodeType": "YulTypedName",
                              "src": "30030:6:38",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "30087:77:38",
                          "nodeType": "YulAssignment",
                          "src": "30087:77:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "30152:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "30152:3:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "30157:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "30157:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
                              "nativeSrc": "30094:57:38",
                              "nodeType": "YulIdentifier",
                              "src": "30094:57:38"
                            },
                            "nativeSrc": "30094:70:38",
                            "nodeType": "YulFunctionCall",
                            "src": "30094:70:38"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "30087:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "30087:3:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "30212:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "30212:5:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "30219:4:38",
                                    "nodeType": "YulLiteral",
                                    "src": "30219:4:38",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "30208:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "30208:3:38"
                                },
                                "nativeSrc": "30208:16:38",
                                "nodeType": "YulFunctionCall",
                                "src": "30208:16:38"
                              },
                              {
                                "name": "pos",
                                "nativeSrc": "30226:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "30226:3:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "30231:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "30231:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nativeSrc": "30173:34:38",
                              "nodeType": "YulIdentifier",
                              "src": "30173:34:38"
                            },
                            "nativeSrc": "30173:65:38",
                            "nodeType": "YulFunctionCall",
                            "src": "30173:65:38"
                          },
                          "nativeSrc": "30173:65:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "30173:65:38"
                        },
                        {
                          "nativeSrc": "30247:46:38",
                          "nodeType": "YulAssignment",
                          "src": "30247:46:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "30258:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "30258:3:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "30285:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "30285:6:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nativeSrc": "30263:21:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "30263:21:38"
                                },
                                "nativeSrc": "30263:29:38",
                                "nodeType": "YulFunctionCall",
                                "src": "30263:29:38"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "30254:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "30254:3:38"
                            },
                            "nativeSrc": "30254:39:38",
                            "nodeType": "YulFunctionCall",
                            "src": "30254:39:38"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "30247:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "30247:3:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
                    "nativeSrc": "29926:373:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "29997:5:38",
                        "nodeType": "YulTypedName",
                        "src": "29997:5:38",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "30004:3:38",
                        "nodeType": "YulTypedName",
                        "src": "30004:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "30012:3:38",
                        "nodeType": "YulTypedName",
                        "src": "30012:3:38",
                        "type": ""
                      }
                    ],
                    "src": "29926:373:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "30505:440:38",
                      "nodeType": "YulBlock",
                      "src": "30505:440:38",
                      "statements": [
                        {
                          "nativeSrc": "30515:27:38",
                          "nodeType": "YulAssignment",
                          "src": "30515:27:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "30527:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "30527:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "30538:3:38",
                                "nodeType": "YulLiteral",
                                "src": "30538:3:38",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "30523:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "30523:3:38"
                            },
                            "nativeSrc": "30523:19:38",
                            "nodeType": "YulFunctionCall",
                            "src": "30523:19:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "30515:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "30515:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "30596:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "30596:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "30609:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "30609:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "30620:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "30620:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "30605:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "30605:3:38"
                                },
                                "nativeSrc": "30605:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "30605:17:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nativeSrc": "30552:43:38",
                              "nodeType": "YulIdentifier",
                              "src": "30552:43:38"
                            },
                            "nativeSrc": "30552:71:38",
                            "nodeType": "YulFunctionCall",
                            "src": "30552:71:38"
                          },
                          "nativeSrc": "30552:71:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "30552:71:38"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "30644:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "30644:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "30655:2:38",
                                    "nodeType": "YulLiteral",
                                    "src": "30655:2:38",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "30640:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "30640:3:38"
                                },
                                "nativeSrc": "30640:18:38",
                                "nodeType": "YulFunctionCall",
                                "src": "30640:18:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nativeSrc": "30664:4:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "30664:4:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "30670:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "30670:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "30660:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "30660:3:38"
                                },
                                "nativeSrc": "30660:20:38",
                                "nodeType": "YulFunctionCall",
                                "src": "30660:20:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "30633:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "30633:6:38"
                            },
                            "nativeSrc": "30633:48:38",
                            "nodeType": "YulFunctionCall",
                            "src": "30633:48:38"
                          },
                          "nativeSrc": "30633:48:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "30633:48:38"
                        },
                        {
                          "nativeSrc": "30690:84:38",
                          "nodeType": "YulAssignment",
                          "src": "30690:84:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nativeSrc": "30760:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "30760:6:38"
                              },
                              {
                                "name": "tail",
                                "nativeSrc": "30769:4:38",
                                "nodeType": "YulIdentifier",
                                "src": "30769:4:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
                              "nativeSrc": "30698:61:38",
                              "nodeType": "YulIdentifier",
                              "src": "30698:61:38"
                            },
                            "nativeSrc": "30698:76:38",
                            "nodeType": "YulFunctionCall",
                            "src": "30698:76:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "30690:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "30690:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nativeSrc": "30828:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "30828:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "30841:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "30841:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "30852:2:38",
                                    "nodeType": "YulLiteral",
                                    "src": "30852:2:38",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "30837:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "30837:3:38"
                                },
                                "nativeSrc": "30837:18:38",
                                "nodeType": "YulFunctionCall",
                                "src": "30837:18:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nativeSrc": "30784:43:38",
                              "nodeType": "YulIdentifier",
                              "src": "30784:43:38"
                            },
                            "nativeSrc": "30784:72:38",
                            "nodeType": "YulFunctionCall",
                            "src": "30784:72:38"
                          },
                          "nativeSrc": "30784:72:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "30784:72:38"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nativeSrc": "30910:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "30910:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "30923:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "30923:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "30934:2:38",
                                    "nodeType": "YulLiteral",
                                    "src": "30934:2:38",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "30919:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "30919:3:38"
                                },
                                "nativeSrc": "30919:18:38",
                                "nodeType": "YulFunctionCall",
                                "src": "30919:18:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nativeSrc": "30866:43:38",
                              "nodeType": "YulIdentifier",
                              "src": "30866:43:38"
                            },
                            "nativeSrc": "30866:72:38",
                            "nodeType": "YulFunctionCall",
                            "src": "30866:72:38"
                          },
                          "nativeSrc": "30866:72:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "30866:72:38"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_bytes_memory_ptr_t_address_t_uint256__to_t_address_t_bytes_memory_ptr_t_address_t_uint256__fromStack_reversed",
                    "nativeSrc": "30305:640:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "30453:9:38",
                        "nodeType": "YulTypedName",
                        "src": "30453:9:38",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nativeSrc": "30465:6:38",
                        "nodeType": "YulTypedName",
                        "src": "30465:6:38",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "30473:6:38",
                        "nodeType": "YulTypedName",
                        "src": "30473:6:38",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "30481:6:38",
                        "nodeType": "YulTypedName",
                        "src": "30481:6:38",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "30489:6:38",
                        "nodeType": "YulTypedName",
                        "src": "30489:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "30500:4:38",
                        "nodeType": "YulTypedName",
                        "src": "30500:4:38",
                        "type": ""
                      }
                    ],
                    "src": "30305:640:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "31091:523:38",
                      "nodeType": "YulBlock",
                      "src": "31091:523:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "31135:83:38",
                            "nodeType": "YulBlock",
                            "src": "31135:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f",
                                    "nativeSrc": "31137:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "31137:77:38"
                                  },
                                  "nativeSrc": "31137:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "31137:79:38"
                                },
                                "nativeSrc": "31137:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "31137:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "end",
                                    "nativeSrc": "31112:3:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "31112:3:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "31117:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "31117:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "31108:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "31108:3:38"
                                },
                                "nativeSrc": "31108:19:38",
                                "nodeType": "YulFunctionCall",
                                "src": "31108:19:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "31129:4:38",
                                "nodeType": "YulLiteral",
                                "src": "31129:4:38",
                                "type": "",
                                "value": "0x40"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "31104:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "31104:3:38"
                            },
                            "nativeSrc": "31104:30:38",
                            "nodeType": "YulFunctionCall",
                            "src": "31104:30:38"
                          },
                          "nativeSrc": "31101:117:38",
                          "nodeType": "YulIf",
                          "src": "31101:117:38"
                        },
                        {
                          "nativeSrc": "31227:30:38",
                          "nodeType": "YulAssignment",
                          "src": "31227:30:38",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "31252:4:38",
                                "nodeType": "YulLiteral",
                                "src": "31252:4:38",
                                "type": "",
                                "value": "0x40"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nativeSrc": "31236:15:38",
                              "nodeType": "YulIdentifier",
                              "src": "31236:15:38"
                            },
                            "nativeSrc": "31236:21:38",
                            "nodeType": "YulFunctionCall",
                            "src": "31236:21:38"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "31227:5:38",
                              "nodeType": "YulIdentifier",
                              "src": "31227:5:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "31267:164:38",
                          "nodeType": "YulBlock",
                          "src": "31267:164:38",
                          "statements": [
                            {
                              "nativeSrc": "31305:15:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "31305:15:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "31319:1:38",
                                "nodeType": "YulLiteral",
                                "src": "31319:1:38",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "31309:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "31309:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "31345:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "31345:5:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "31352:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "31352:4:38",
                                        "type": "",
                                        "value": "0x00"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "31341:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "31341:3:38"
                                    },
                                    "nativeSrc": "31341:16:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "31341:16:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nativeSrc": "31395:9:38",
                                            "nodeType": "YulIdentifier",
                                            "src": "31395:9:38"
                                          },
                                          {
                                            "name": "offset",
                                            "nativeSrc": "31406:6:38",
                                            "nodeType": "YulIdentifier",
                                            "src": "31406:6:38"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "31391:3:38",
                                          "nodeType": "YulIdentifier",
                                          "src": "31391:3:38"
                                        },
                                        "nativeSrc": "31391:22:38",
                                        "nodeType": "YulFunctionCall",
                                        "src": "31391:22:38"
                                      },
                                      {
                                        "name": "end",
                                        "nativeSrc": "31415:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "31415:3:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_uint256_fromMemory",
                                      "nativeSrc": "31359:31:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "31359:31:38"
                                    },
                                    "nativeSrc": "31359:60:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "31359:60:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "31334:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "31334:6:38"
                                },
                                "nativeSrc": "31334:86:38",
                                "nodeType": "YulFunctionCall",
                                "src": "31334:86:38"
                              },
                              "nativeSrc": "31334:86:38",
                              "nodeType": "YulExpressionStatement",
                              "src": "31334:86:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "31441:166:38",
                          "nodeType": "YulBlock",
                          "src": "31441:166:38",
                          "statements": [
                            {
                              "nativeSrc": "31480:16:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "31480:16:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "31494:2:38",
                                "nodeType": "YulLiteral",
                                "src": "31494:2:38",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "31484:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "31484:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "31521:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "31521:5:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "31528:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "31528:4:38",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "31517:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "31517:3:38"
                                    },
                                    "nativeSrc": "31517:16:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "31517:16:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nativeSrc": "31571:9:38",
                                            "nodeType": "YulIdentifier",
                                            "src": "31571:9:38"
                                          },
                                          {
                                            "name": "offset",
                                            "nativeSrc": "31582:6:38",
                                            "nodeType": "YulIdentifier",
                                            "src": "31582:6:38"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "31567:3:38",
                                          "nodeType": "YulIdentifier",
                                          "src": "31567:3:38"
                                        },
                                        "nativeSrc": "31567:22:38",
                                        "nodeType": "YulFunctionCall",
                                        "src": "31567:22:38"
                                      },
                                      {
                                        "name": "end",
                                        "nativeSrc": "31591:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "31591:3:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_address_fromMemory",
                                      "nativeSrc": "31535:31:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "31535:31:38"
                                    },
                                    "nativeSrc": "31535:60:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "31535:60:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nativeSrc": "31510:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "31510:6:38"
                                },
                                "nativeSrc": "31510:86:38",
                                "nodeType": "YulFunctionCall",
                                "src": "31510:86:38"
                              },
                              "nativeSrc": "31510:86:38",
                              "nodeType": "YulExpressionStatement",
                              "src": "31510:86:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_struct$_RequestData_$7444_memory_ptr_fromMemory",
                    "nativeSrc": "30996:618:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "31066:9:38",
                        "nodeType": "YulTypedName",
                        "src": "31066:9:38",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "31077:3:38",
                        "nodeType": "YulTypedName",
                        "src": "31077:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "31085:5:38",
                        "nodeType": "YulTypedName",
                        "src": "31085:5:38",
                        "type": ""
                      }
                    ],
                    "src": "30996:618:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "31726:303:38",
                      "nodeType": "YulBlock",
                      "src": "31726:303:38",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "31772:83:38",
                            "nodeType": "YulBlock",
                            "src": "31772:83:38",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "31774:77:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "31774:77:38"
                                  },
                                  "nativeSrc": "31774:79:38",
                                  "nodeType": "YulFunctionCall",
                                  "src": "31774:79:38"
                                },
                                "nativeSrc": "31774:79:38",
                                "nodeType": "YulExpressionStatement",
                                "src": "31774:79:38"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "31747:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "31747:7:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "31756:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "31756:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "31743:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "31743:3:38"
                                },
                                "nativeSrc": "31743:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "31743:23:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "31768:2:38",
                                "nodeType": "YulLiteral",
                                "src": "31768:2:38",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "31739:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "31739:3:38"
                            },
                            "nativeSrc": "31739:32:38",
                            "nodeType": "YulFunctionCall",
                            "src": "31739:32:38"
                          },
                          "nativeSrc": "31736:119:38",
                          "nodeType": "YulIf",
                          "src": "31736:119:38"
                        },
                        {
                          "nativeSrc": "31865:157:38",
                          "nodeType": "YulBlock",
                          "src": "31865:157:38",
                          "statements": [
                            {
                              "nativeSrc": "31880:15:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "31880:15:38",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "31894:1:38",
                                "nodeType": "YulLiteral",
                                "src": "31894:1:38",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "31884:6:38",
                                  "nodeType": "YulTypedName",
                                  "src": "31884:6:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "31909:103:38",
                              "nodeType": "YulAssignment",
                              "src": "31909:103:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "31984:9:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "31984:9:38"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "31995:6:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "31995:6:38"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "31980:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "31980:3:38"
                                    },
                                    "nativeSrc": "31980:22:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "31980:22:38"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "32004:7:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "32004:7:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_struct$_RequestData_$7444_memory_ptr_fromMemory",
                                  "nativeSrc": "31919:60:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "31919:60:38"
                                },
                                "nativeSrc": "31919:93:38",
                                "nodeType": "YulFunctionCall",
                                "src": "31919:93:38"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "31909:6:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "31909:6:38"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_struct$_RequestData_$7444_memory_ptr_fromMemory",
                    "nativeSrc": "31620:409:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "31696:9:38",
                        "nodeType": "YulTypedName",
                        "src": "31696:9:38",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "31707:7:38",
                        "nodeType": "YulTypedName",
                        "src": "31707:7:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "31719:6:38",
                        "nodeType": "YulTypedName",
                        "src": "31719:6:38",
                        "type": ""
                      }
                    ],
                    "src": "31620:409:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "32141:67:38",
                      "nodeType": "YulBlock",
                      "src": "32141:67:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "32163:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "32163:6:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "32171:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "32171:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "32159:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "32159:3:38"
                                },
                                "nativeSrc": "32159:14:38",
                                "nodeType": "YulFunctionCall",
                                "src": "32159:14:38"
                              },
                              {
                                "hexValue": "43616e6e6f74207472616e7366657220746f2073656c66",
                                "kind": "string",
                                "nativeSrc": "32175:25:38",
                                "nodeType": "YulLiteral",
                                "src": "32175:25:38",
                                "type": "",
                                "value": "Cannot transfer to self"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "32152:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "32152:6:38"
                            },
                            "nativeSrc": "32152:49:38",
                            "nodeType": "YulFunctionCall",
                            "src": "32152:49:38"
                          },
                          "nativeSrc": "32152:49:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "32152:49:38"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2",
                    "nativeSrc": "32035:173:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "32133:6:38",
                        "nodeType": "YulTypedName",
                        "src": "32133:6:38",
                        "type": ""
                      }
                    ],
                    "src": "32035:173:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "32360:220:38",
                      "nodeType": "YulBlock",
                      "src": "32360:220:38",
                      "statements": [
                        {
                          "nativeSrc": "32370:74:38",
                          "nodeType": "YulAssignment",
                          "src": "32370:74:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "32436:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "32436:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "32441:2:38",
                                "nodeType": "YulLiteral",
                                "src": "32441:2:38",
                                "type": "",
                                "value": "23"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nativeSrc": "32377:58:38",
                              "nodeType": "YulIdentifier",
                              "src": "32377:58:38"
                            },
                            "nativeSrc": "32377:67:38",
                            "nodeType": "YulFunctionCall",
                            "src": "32377:67:38"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "32370:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "32370:3:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "32542:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "32542:3:38"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2",
                              "nativeSrc": "32453:88:38",
                              "nodeType": "YulIdentifier",
                              "src": "32453:88:38"
                            },
                            "nativeSrc": "32453:93:38",
                            "nodeType": "YulFunctionCall",
                            "src": "32453:93:38"
                          },
                          "nativeSrc": "32453:93:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "32453:93:38"
                        },
                        {
                          "nativeSrc": "32555:19:38",
                          "nodeType": "YulAssignment",
                          "src": "32555:19:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "32566:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "32566:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "32571:2:38",
                                "nodeType": "YulLiteral",
                                "src": "32571:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "32562:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "32562:3:38"
                            },
                            "nativeSrc": "32562:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "32562:12:38"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "32555:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "32555:3:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack",
                    "nativeSrc": "32214:366:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "32348:3:38",
                        "nodeType": "YulTypedName",
                        "src": "32348:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "32356:3:38",
                        "nodeType": "YulTypedName",
                        "src": "32356:3:38",
                        "type": ""
                      }
                    ],
                    "src": "32214:366:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "32757:248:38",
                      "nodeType": "YulBlock",
                      "src": "32757:248:38",
                      "statements": [
                        {
                          "nativeSrc": "32767:26:38",
                          "nodeType": "YulAssignment",
                          "src": "32767:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "32779:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "32779:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "32790:2:38",
                                "nodeType": "YulLiteral",
                                "src": "32790:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "32775:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "32775:3:38"
                            },
                            "nativeSrc": "32775:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "32775:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "32767:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "32767:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "32814:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "32814:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "32825:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "32825:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "32810:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "32810:3:38"
                                },
                                "nativeSrc": "32810:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "32810:17:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nativeSrc": "32833:4:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "32833:4:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "32839:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "32839:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "32829:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "32829:3:38"
                                },
                                "nativeSrc": "32829:20:38",
                                "nodeType": "YulFunctionCall",
                                "src": "32829:20:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "32803:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "32803:6:38"
                            },
                            "nativeSrc": "32803:47:38",
                            "nodeType": "YulFunctionCall",
                            "src": "32803:47:38"
                          },
                          "nativeSrc": "32803:47:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "32803:47:38"
                        },
                        {
                          "nativeSrc": "32859:139:38",
                          "nodeType": "YulAssignment",
                          "src": "32859:139:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nativeSrc": "32993:4:38",
                                "nodeType": "YulIdentifier",
                                "src": "32993:4:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack",
                              "nativeSrc": "32867:124:38",
                              "nodeType": "YulIdentifier",
                              "src": "32867:124:38"
                            },
                            "nativeSrc": "32867:131:38",
                            "nodeType": "YulFunctionCall",
                            "src": "32867:131:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "32859:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "32859:4:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed",
                    "nativeSrc": "32586:419:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "32737:9:38",
                        "nodeType": "YulTypedName",
                        "src": "32737:9:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "32752:4:38",
                        "nodeType": "YulTypedName",
                        "src": "32752:4:38",
                        "type": ""
                      }
                    ],
                    "src": "32586:419:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "33117:123:38",
                      "nodeType": "YulBlock",
                      "src": "33117:123:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "33139:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "33139:6:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "33147:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "33147:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "33135:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "33135:3:38"
                                },
                                "nativeSrc": "33135:14:38",
                                "nodeType": "YulFunctionCall",
                                "src": "33135:14:38"
                              },
                              {
                                "hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
                                "kind": "string",
                                "nativeSrc": "33151:34:38",
                                "nodeType": "YulLiteral",
                                "src": "33151:34:38",
                                "type": "",
                                "value": "SafeERC20: ERC20 operation did n"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "33128:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "33128:6:38"
                            },
                            "nativeSrc": "33128:58:38",
                            "nodeType": "YulFunctionCall",
                            "src": "33128:58:38"
                          },
                          "nativeSrc": "33128:58:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "33128:58:38"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "33207:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "33207:6:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "33215:2:38",
                                    "nodeType": "YulLiteral",
                                    "src": "33215:2:38",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "33203:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "33203:3:38"
                                },
                                "nativeSrc": "33203:15:38",
                                "nodeType": "YulFunctionCall",
                                "src": "33203:15:38"
                              },
                              {
                                "hexValue": "6f742073756363656564",
                                "kind": "string",
                                "nativeSrc": "33220:12:38",
                                "nodeType": "YulLiteral",
                                "src": "33220:12:38",
                                "type": "",
                                "value": "ot succeed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "33196:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "33196:6:38"
                            },
                            "nativeSrc": "33196:37:38",
                            "nodeType": "YulFunctionCall",
                            "src": "33196:37:38"
                          },
                          "nativeSrc": "33196:37:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "33196:37:38"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
                    "nativeSrc": "33011:229:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "33109:6:38",
                        "nodeType": "YulTypedName",
                        "src": "33109:6:38",
                        "type": ""
                      }
                    ],
                    "src": "33011:229:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "33392:220:38",
                      "nodeType": "YulBlock",
                      "src": "33392:220:38",
                      "statements": [
                        {
                          "nativeSrc": "33402:74:38",
                          "nodeType": "YulAssignment",
                          "src": "33402:74:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "33468:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "33468:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "33473:2:38",
                                "nodeType": "YulLiteral",
                                "src": "33473:2:38",
                                "type": "",
                                "value": "42"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nativeSrc": "33409:58:38",
                              "nodeType": "YulIdentifier",
                              "src": "33409:58:38"
                            },
                            "nativeSrc": "33409:67:38",
                            "nodeType": "YulFunctionCall",
                            "src": "33409:67:38"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "33402:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "33402:3:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "33574:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "33574:3:38"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
                              "nativeSrc": "33485:88:38",
                              "nodeType": "YulIdentifier",
                              "src": "33485:88:38"
                            },
                            "nativeSrc": "33485:93:38",
                            "nodeType": "YulFunctionCall",
                            "src": "33485:93:38"
                          },
                          "nativeSrc": "33485:93:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "33485:93:38"
                        },
                        {
                          "nativeSrc": "33587:19:38",
                          "nodeType": "YulAssignment",
                          "src": "33587:19:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "33598:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "33598:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "33603:2:38",
                                "nodeType": "YulLiteral",
                                "src": "33603:2:38",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "33594:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "33594:3:38"
                            },
                            "nativeSrc": "33594:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "33594:12:38"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "33587:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "33587:3:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
                    "nativeSrc": "33246:366:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "33380:3:38",
                        "nodeType": "YulTypedName",
                        "src": "33380:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "33388:3:38",
                        "nodeType": "YulTypedName",
                        "src": "33388:3:38",
                        "type": ""
                      }
                    ],
                    "src": "33246:366:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "33789:248:38",
                      "nodeType": "YulBlock",
                      "src": "33789:248:38",
                      "statements": [
                        {
                          "nativeSrc": "33799:26:38",
                          "nodeType": "YulAssignment",
                          "src": "33799:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "33811:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "33811:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "33822:2:38",
                                "nodeType": "YulLiteral",
                                "src": "33822:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "33807:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "33807:3:38"
                            },
                            "nativeSrc": "33807:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "33807:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "33799:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "33799:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "33846:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "33846:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "33857:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "33857:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "33842:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "33842:3:38"
                                },
                                "nativeSrc": "33842:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "33842:17:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nativeSrc": "33865:4:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "33865:4:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "33871:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "33871:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "33861:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "33861:3:38"
                                },
                                "nativeSrc": "33861:20:38",
                                "nodeType": "YulFunctionCall",
                                "src": "33861:20:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "33835:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "33835:6:38"
                            },
                            "nativeSrc": "33835:47:38",
                            "nodeType": "YulFunctionCall",
                            "src": "33835:47:38"
                          },
                          "nativeSrc": "33835:47:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "33835:47:38"
                        },
                        {
                          "nativeSrc": "33891:139:38",
                          "nodeType": "YulAssignment",
                          "src": "33891:139:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nativeSrc": "34025:4:38",
                                "nodeType": "YulIdentifier",
                                "src": "34025:4:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
                              "nativeSrc": "33899:124:38",
                              "nodeType": "YulIdentifier",
                              "src": "33899:124:38"
                            },
                            "nativeSrc": "33899:131:38",
                            "nodeType": "YulFunctionCall",
                            "src": "33899:131:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "33891:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "33891:4:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
                    "nativeSrc": "33618:419:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "33769:9:38",
                        "nodeType": "YulTypedName",
                        "src": "33769:9:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "33784:4:38",
                        "nodeType": "YulTypedName",
                        "src": "33784:4:38",
                        "type": ""
                      }
                    ],
                    "src": "33618:419:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "34239:221:38",
                      "nodeType": "YulBlock",
                      "src": "34239:221:38",
                      "statements": [
                        {
                          "nativeSrc": "34249:26:38",
                          "nodeType": "YulVariableDeclaration",
                          "src": "34249:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "34265:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "34265:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "34270:4:38",
                                "nodeType": "YulLiteral",
                                "src": "34270:4:38",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "34261:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "34261:3:38"
                            },
                            "nativeSrc": "34261:14:38",
                            "nodeType": "YulFunctionCall",
                            "src": "34261:14:38"
                          },
                          "variables": [
                            {
                              "name": "tail",
                              "nativeSrc": "34253:4:38",
                              "nodeType": "YulTypedName",
                              "src": "34253:4:38",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "34285:168:38",
                          "nodeType": "YulBlock",
                          "src": "34285:168:38",
                          "statements": [
                            {
                              "nativeSrc": "34324:43:38",
                              "nodeType": "YulVariableDeclaration",
                              "src": "34324:43:38",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "34354:5:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "34354:5:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "34361:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "34361:4:38",
                                        "type": "",
                                        "value": "0x00"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "34350:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "34350:3:38"
                                    },
                                    "nativeSrc": "34350:16:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "34350:16:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "34344:5:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "34344:5:38"
                                },
                                "nativeSrc": "34344:23:38",
                                "nodeType": "YulFunctionCall",
                                "src": "34344:23:38"
                              },
                              "variables": [
                                {
                                  "name": "memberValue0",
                                  "nativeSrc": "34328:12:38",
                                  "nodeType": "YulTypedName",
                                  "src": "34328:12:38",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "memberValue0",
                                    "nativeSrc": "34414:12:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "34414:12:38"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "pos",
                                        "nativeSrc": "34432:3:38",
                                        "nodeType": "YulIdentifier",
                                        "src": "34432:3:38"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "34437:4:38",
                                        "nodeType": "YulLiteral",
                                        "src": "34437:4:38",
                                        "type": "",
                                        "value": "0x00"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "34428:3:38",
                                      "nodeType": "YulIdentifier",
                                      "src": "34428:3:38"
                                    },
                                    "nativeSrc": "34428:14:38",
                                    "nodeType": "YulFunctionCall",
                                    "src": "34428:14:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_encode_t_uint256_to_t_uint256",
                                  "nativeSrc": "34380:33:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "34380:33:38"
                                },
                                "nativeSrc": "34380:63:38",
                                "nodeType": "YulFunctionCall",
                                "src": "34380:63:38"
                              },
                              "nativeSrc": "34380:63:38",
                              "nodeType": "YulExpressionStatement",
                              "src": "34380:63:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_struct$_EVMExtraArgsV1_$213_memory_ptr_to_t_struct$_EVMExtraArgsV1_$213_memory_ptr_fromStack",
                    "nativeSrc": "34111:349:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "34226:5:38",
                        "nodeType": "YulTypedName",
                        "src": "34226:5:38",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "34233:3:38",
                        "nodeType": "YulTypedName",
                        "src": "34233:3:38",
                        "type": ""
                      }
                    ],
                    "src": "34111:349:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "34626:186:38",
                      "nodeType": "YulBlock",
                      "src": "34626:186:38",
                      "statements": [
                        {
                          "nativeSrc": "34636:26:38",
                          "nodeType": "YulAssignment",
                          "src": "34636:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "34648:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "34648:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "34659:2:38",
                                "nodeType": "YulLiteral",
                                "src": "34659:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "34644:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "34644:3:38"
                            },
                            "nativeSrc": "34644:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "34644:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "34636:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "34636:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "34778:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "34778:6:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "34791:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "34791:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "34802:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "34802:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "34787:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "34787:3:38"
                                },
                                "nativeSrc": "34787:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "34787:17:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_struct$_EVMExtraArgsV1_$213_memory_ptr_to_t_struct$_EVMExtraArgsV1_$213_memory_ptr_fromStack",
                              "nativeSrc": "34672:105:38",
                              "nodeType": "YulIdentifier",
                              "src": "34672:105:38"
                            },
                            "nativeSrc": "34672:133:38",
                            "nodeType": "YulFunctionCall",
                            "src": "34672:133:38"
                          },
                          "nativeSrc": "34672:133:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "34672:133:38"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_struct$_EVMExtraArgsV1_$213_memory_ptr__to_t_struct$_EVMExtraArgsV1_$213_memory_ptr__fromStack_reversed",
                    "nativeSrc": "34466:346:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "34598:9:38",
                        "nodeType": "YulTypedName",
                        "src": "34598:9:38",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "34610:6:38",
                        "nodeType": "YulTypedName",
                        "src": "34610:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "34621:4:38",
                        "nodeType": "YulTypedName",
                        "src": "34621:4:38",
                        "type": ""
                      }
                    ],
                    "src": "34466:346:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "34924:119:38",
                      "nodeType": "YulBlock",
                      "src": "34924:119:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "34946:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "34946:6:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "34954:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "34954:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "34942:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "34942:3:38"
                                },
                                "nativeSrc": "34942:14:38",
                                "nodeType": "YulFunctionCall",
                                "src": "34942:14:38"
                              },
                              {
                                "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
                                "kind": "string",
                                "nativeSrc": "34958:34:38",
                                "nodeType": "YulLiteral",
                                "src": "34958:34:38",
                                "type": "",
                                "value": "Address: insufficient balance fo"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "34935:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "34935:6:38"
                            },
                            "nativeSrc": "34935:58:38",
                            "nodeType": "YulFunctionCall",
                            "src": "34935:58:38"
                          },
                          "nativeSrc": "34935:58:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "34935:58:38"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "35014:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "35014:6:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "35022:2:38",
                                    "nodeType": "YulLiteral",
                                    "src": "35022:2:38",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "35010:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "35010:3:38"
                                },
                                "nativeSrc": "35010:15:38",
                                "nodeType": "YulFunctionCall",
                                "src": "35010:15:38"
                              },
                              {
                                "hexValue": "722063616c6c",
                                "kind": "string",
                                "nativeSrc": "35027:8:38",
                                "nodeType": "YulLiteral",
                                "src": "35027:8:38",
                                "type": "",
                                "value": "r call"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "35003:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "35003:6:38"
                            },
                            "nativeSrc": "35003:33:38",
                            "nodeType": "YulFunctionCall",
                            "src": "35003:33:38"
                          },
                          "nativeSrc": "35003:33:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "35003:33:38"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                    "nativeSrc": "34818:225:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "34916:6:38",
                        "nodeType": "YulTypedName",
                        "src": "34916:6:38",
                        "type": ""
                      }
                    ],
                    "src": "34818:225:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "35195:220:38",
                      "nodeType": "YulBlock",
                      "src": "35195:220:38",
                      "statements": [
                        {
                          "nativeSrc": "35205:74:38",
                          "nodeType": "YulAssignment",
                          "src": "35205:74:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "35271:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "35271:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "35276:2:38",
                                "nodeType": "YulLiteral",
                                "src": "35276:2:38",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nativeSrc": "35212:58:38",
                              "nodeType": "YulIdentifier",
                              "src": "35212:58:38"
                            },
                            "nativeSrc": "35212:67:38",
                            "nodeType": "YulFunctionCall",
                            "src": "35212:67:38"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "35205:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "35205:3:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "35377:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "35377:3:38"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                              "nativeSrc": "35288:88:38",
                              "nodeType": "YulIdentifier",
                              "src": "35288:88:38"
                            },
                            "nativeSrc": "35288:93:38",
                            "nodeType": "YulFunctionCall",
                            "src": "35288:93:38"
                          },
                          "nativeSrc": "35288:93:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "35288:93:38"
                        },
                        {
                          "nativeSrc": "35390:19:38",
                          "nodeType": "YulAssignment",
                          "src": "35390:19:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "35401:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "35401:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "35406:2:38",
                                "nodeType": "YulLiteral",
                                "src": "35406:2:38",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "35397:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "35397:3:38"
                            },
                            "nativeSrc": "35397:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "35397:12:38"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "35390:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "35390:3:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
                    "nativeSrc": "35049:366:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "35183:3:38",
                        "nodeType": "YulTypedName",
                        "src": "35183:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "35191:3:38",
                        "nodeType": "YulTypedName",
                        "src": "35191:3:38",
                        "type": ""
                      }
                    ],
                    "src": "35049:366:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "35592:248:38",
                      "nodeType": "YulBlock",
                      "src": "35592:248:38",
                      "statements": [
                        {
                          "nativeSrc": "35602:26:38",
                          "nodeType": "YulAssignment",
                          "src": "35602:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "35614:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "35614:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "35625:2:38",
                                "nodeType": "YulLiteral",
                                "src": "35625:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "35610:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "35610:3:38"
                            },
                            "nativeSrc": "35610:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "35610:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "35602:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "35602:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "35649:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "35649:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "35660:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "35660:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "35645:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "35645:3:38"
                                },
                                "nativeSrc": "35645:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "35645:17:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nativeSrc": "35668:4:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "35668:4:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "35674:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "35674:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "35664:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "35664:3:38"
                                },
                                "nativeSrc": "35664:20:38",
                                "nodeType": "YulFunctionCall",
                                "src": "35664:20:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "35638:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "35638:6:38"
                            },
                            "nativeSrc": "35638:47:38",
                            "nodeType": "YulFunctionCall",
                            "src": "35638:47:38"
                          },
                          "nativeSrc": "35638:47:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "35638:47:38"
                        },
                        {
                          "nativeSrc": "35694:139:38",
                          "nodeType": "YulAssignment",
                          "src": "35694:139:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nativeSrc": "35828:4:38",
                                "nodeType": "YulIdentifier",
                                "src": "35828:4:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
                              "nativeSrc": "35702:124:38",
                              "nodeType": "YulIdentifier",
                              "src": "35702:124:38"
                            },
                            "nativeSrc": "35702:131:38",
                            "nodeType": "YulFunctionCall",
                            "src": "35702:131:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "35694:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "35694:4:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
                    "nativeSrc": "35421:419:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "35572:9:38",
                        "nodeType": "YulTypedName",
                        "src": "35572:9:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "35587:4:38",
                        "nodeType": "YulTypedName",
                        "src": "35587:4:38",
                        "type": ""
                      }
                    ],
                    "src": "35421:419:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "35954:278:38",
                      "nodeType": "YulBlock",
                      "src": "35954:278:38",
                      "statements": [
                        {
                          "nativeSrc": "35964:52:38",
                          "nodeType": "YulVariableDeclaration",
                          "src": "35964:52:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "36010:5:38",
                                "nodeType": "YulIdentifier",
                                "src": "36010:5:38"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_bytes_memory_ptr",
                              "nativeSrc": "35978:31:38",
                              "nodeType": "YulIdentifier",
                              "src": "35978:31:38"
                            },
                            "nativeSrc": "35978:38:38",
                            "nodeType": "YulFunctionCall",
                            "src": "35978:38:38"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "35968:6:38",
                              "nodeType": "YulTypedName",
                              "src": "35968:6:38",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "36025:95:38",
                          "nodeType": "YulAssignment",
                          "src": "36025:95:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "36108:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "36108:3:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "36113:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "36113:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
                              "nativeSrc": "36032:75:38",
                              "nodeType": "YulIdentifier",
                              "src": "36032:75:38"
                            },
                            "nativeSrc": "36032:88:38",
                            "nodeType": "YulFunctionCall",
                            "src": "36032:88:38"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "36025:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "36025:3:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "36168:5:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "36168:5:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "36175:4:38",
                                    "nodeType": "YulLiteral",
                                    "src": "36175:4:38",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "36164:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "36164:3:38"
                                },
                                "nativeSrc": "36164:16:38",
                                "nodeType": "YulFunctionCall",
                                "src": "36164:16:38"
                              },
                              {
                                "name": "pos",
                                "nativeSrc": "36182:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "36182:3:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "36187:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "36187:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nativeSrc": "36129:34:38",
                              "nodeType": "YulIdentifier",
                              "src": "36129:34:38"
                            },
                            "nativeSrc": "36129:65:38",
                            "nodeType": "YulFunctionCall",
                            "src": "36129:65:38"
                          },
                          "nativeSrc": "36129:65:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "36129:65:38"
                        },
                        {
                          "nativeSrc": "36203:23:38",
                          "nodeType": "YulAssignment",
                          "src": "36203:23:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "36214:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "36214:3:38"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "36219:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "36219:6:38"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "36210:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "36210:3:38"
                            },
                            "nativeSrc": "36210:16:38",
                            "nodeType": "YulFunctionCall",
                            "src": "36210:16:38"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "36203:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "36203:3:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
                    "nativeSrc": "35846:386:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "35935:5:38",
                        "nodeType": "YulTypedName",
                        "src": "35935:5:38",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "35942:3:38",
                        "nodeType": "YulTypedName",
                        "src": "35942:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "35950:3:38",
                        "nodeType": "YulTypedName",
                        "src": "35950:3:38",
                        "type": ""
                      }
                    ],
                    "src": "35846:386:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "36372:137:38",
                      "nodeType": "YulBlock",
                      "src": "36372:137:38",
                      "statements": [
                        {
                          "nativeSrc": "36383:100:38",
                          "nodeType": "YulAssignment",
                          "src": "36383:100:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "36470:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "36470:6:38"
                              },
                              {
                                "name": "pos",
                                "nativeSrc": "36479:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "36479:3:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
                              "nativeSrc": "36390:79:38",
                              "nodeType": "YulIdentifier",
                              "src": "36390:79:38"
                            },
                            "nativeSrc": "36390:93:38",
                            "nodeType": "YulFunctionCall",
                            "src": "36390:93:38"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "36383:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "36383:3:38"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "36493:10:38",
                          "nodeType": "YulAssignment",
                          "src": "36493:10:38",
                          "value": {
                            "name": "pos",
                            "nativeSrc": "36500:3:38",
                            "nodeType": "YulIdentifier",
                            "src": "36500:3:38"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "36493:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "36493:3:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nativeSrc": "36238:271:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "36351:3:38",
                        "nodeType": "YulTypedName",
                        "src": "36351:3:38",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "36357:6:38",
                        "nodeType": "YulTypedName",
                        "src": "36357:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "36368:3:38",
                        "nodeType": "YulTypedName",
                        "src": "36368:3:38",
                        "type": ""
                      }
                    ],
                    "src": "36238:271:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "36621:73:38",
                      "nodeType": "YulBlock",
                      "src": "36621:73:38",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "36643:6:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "36643:6:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "36651:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "36651:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "36639:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "36639:3:38"
                                },
                                "nativeSrc": "36639:14:38",
                                "nodeType": "YulFunctionCall",
                                "src": "36639:14:38"
                              },
                              {
                                "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                                "kind": "string",
                                "nativeSrc": "36655:31:38",
                                "nodeType": "YulLiteral",
                                "src": "36655:31:38",
                                "type": "",
                                "value": "Address: call to non-contract"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "36632:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "36632:6:38"
                            },
                            "nativeSrc": "36632:55:38",
                            "nodeType": "YulFunctionCall",
                            "src": "36632:55:38"
                          },
                          "nativeSrc": "36632:55:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "36632:55:38"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                    "nativeSrc": "36515:179:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "36613:6:38",
                        "nodeType": "YulTypedName",
                        "src": "36613:6:38",
                        "type": ""
                      }
                    ],
                    "src": "36515:179:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "36846:220:38",
                      "nodeType": "YulBlock",
                      "src": "36846:220:38",
                      "statements": [
                        {
                          "nativeSrc": "36856:74:38",
                          "nodeType": "YulAssignment",
                          "src": "36856:74:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "36922:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "36922:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "36927:2:38",
                                "nodeType": "YulLiteral",
                                "src": "36927:2:38",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nativeSrc": "36863:58:38",
                              "nodeType": "YulIdentifier",
                              "src": "36863:58:38"
                            },
                            "nativeSrc": "36863:67:38",
                            "nodeType": "YulFunctionCall",
                            "src": "36863:67:38"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "36856:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "36856:3:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "37028:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "37028:3:38"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                              "nativeSrc": "36939:88:38",
                              "nodeType": "YulIdentifier",
                              "src": "36939:88:38"
                            },
                            "nativeSrc": "36939:93:38",
                            "nodeType": "YulFunctionCall",
                            "src": "36939:93:38"
                          },
                          "nativeSrc": "36939:93:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "36939:93:38"
                        },
                        {
                          "nativeSrc": "37041:19:38",
                          "nodeType": "YulAssignment",
                          "src": "37041:19:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "37052:3:38",
                                "nodeType": "YulIdentifier",
                                "src": "37052:3:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "37057:2:38",
                                "nodeType": "YulLiteral",
                                "src": "37057:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "37048:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "37048:3:38"
                            },
                            "nativeSrc": "37048:12:38",
                            "nodeType": "YulFunctionCall",
                            "src": "37048:12:38"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "37041:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "37041:3:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
                    "nativeSrc": "36700:366:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "36834:3:38",
                        "nodeType": "YulTypedName",
                        "src": "36834:3:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "36842:3:38",
                        "nodeType": "YulTypedName",
                        "src": "36842:3:38",
                        "type": ""
                      }
                    ],
                    "src": "36700:366:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "37243:248:38",
                      "nodeType": "YulBlock",
                      "src": "37243:248:38",
                      "statements": [
                        {
                          "nativeSrc": "37253:26:38",
                          "nodeType": "YulAssignment",
                          "src": "37253:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "37265:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "37265:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "37276:2:38",
                                "nodeType": "YulLiteral",
                                "src": "37276:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "37261:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "37261:3:38"
                            },
                            "nativeSrc": "37261:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "37261:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "37253:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "37253:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "37300:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "37300:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "37311:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "37311:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "37296:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "37296:3:38"
                                },
                                "nativeSrc": "37296:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "37296:17:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nativeSrc": "37319:4:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "37319:4:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "37325:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "37325:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "37315:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "37315:3:38"
                                },
                                "nativeSrc": "37315:20:38",
                                "nodeType": "YulFunctionCall",
                                "src": "37315:20:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "37289:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "37289:6:38"
                            },
                            "nativeSrc": "37289:47:38",
                            "nodeType": "YulFunctionCall",
                            "src": "37289:47:38"
                          },
                          "nativeSrc": "37289:47:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "37289:47:38"
                        },
                        {
                          "nativeSrc": "37345:139:38",
                          "nodeType": "YulAssignment",
                          "src": "37345:139:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nativeSrc": "37479:4:38",
                                "nodeType": "YulIdentifier",
                                "src": "37479:4:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
                              "nativeSrc": "37353:124:38",
                              "nodeType": "YulIdentifier",
                              "src": "37353:124:38"
                            },
                            "nativeSrc": "37353:131:38",
                            "nodeType": "YulFunctionCall",
                            "src": "37353:131:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "37345:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "37345:4:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
                    "nativeSrc": "37072:419:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "37223:9:38",
                        "nodeType": "YulTypedName",
                        "src": "37223:9:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "37238:4:38",
                        "nodeType": "YulTypedName",
                        "src": "37238:4:38",
                        "type": ""
                      }
                    ],
                    "src": "37072:419:38"
                  },
                  {
                    "body": {
                      "nativeSrc": "37615:195:38",
                      "nodeType": "YulBlock",
                      "src": "37615:195:38",
                      "statements": [
                        {
                          "nativeSrc": "37625:26:38",
                          "nodeType": "YulAssignment",
                          "src": "37625:26:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "37637:9:38",
                                "nodeType": "YulIdentifier",
                                "src": "37637:9:38"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "37648:2:38",
                                "nodeType": "YulLiteral",
                                "src": "37648:2:38",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "37633:3:38",
                              "nodeType": "YulIdentifier",
                              "src": "37633:3:38"
                            },
                            "nativeSrc": "37633:18:38",
                            "nodeType": "YulFunctionCall",
                            "src": "37633:18:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "37625:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "37625:4:38"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "37672:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "37672:9:38"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "37683:1:38",
                                    "nodeType": "YulLiteral",
                                    "src": "37683:1:38",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "37668:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "37668:3:38"
                                },
                                "nativeSrc": "37668:17:38",
                                "nodeType": "YulFunctionCall",
                                "src": "37668:17:38"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nativeSrc": "37691:4:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "37691:4:38"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "37697:9:38",
                                    "nodeType": "YulIdentifier",
                                    "src": "37697:9:38"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "37687:3:38",
                                  "nodeType": "YulIdentifier",
                                  "src": "37687:3:38"
                                },
                                "nativeSrc": "37687:20:38",
                                "nodeType": "YulFunctionCall",
                                "src": "37687:20:38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "37661:6:38",
                              "nodeType": "YulIdentifier",
                              "src": "37661:6:38"
                            },
                            "nativeSrc": "37661:47:38",
                            "nodeType": "YulFunctionCall",
                            "src": "37661:47:38"
                          },
                          "nativeSrc": "37661:47:38",
                          "nodeType": "YulExpressionStatement",
                          "src": "37661:47:38"
                        },
                        {
                          "nativeSrc": "37717:86:38",
                          "nodeType": "YulAssignment",
                          "src": "37717:86:38",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "37789:6:38",
                                "nodeType": "YulIdentifier",
                                "src": "37789:6:38"
                              },
                              {
                                "name": "tail",
                                "nativeSrc": "37798:4:38",
                                "nodeType": "YulIdentifier",
                                "src": "37798:4:38"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                              "nativeSrc": "37725:63:38",
                              "nodeType": "YulIdentifier",
                              "src": "37725:63:38"
                            },
                            "nativeSrc": "37725:78:38",
                            "nodeType": "YulFunctionCall",
                            "src": "37725:78:38"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "37717:4:38",
                              "nodeType": "YulIdentifier",
                              "src": "37717:4:38"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nativeSrc": "37497:313:38",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "37587:9:38",
                        "nodeType": "YulTypedName",
                        "src": "37587:9:38",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "37599:6:38",
                        "nodeType": "YulTypedName",
                        "src": "37599:6:38",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "37610:4:38",
                        "nodeType": "YulTypedName",
                        "src": "37610:4:38",
                        "type": ""
                      }
                    ],
                    "src": "37497:313:38"
                  }
                ]
              },
              "contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_string_memory_ptr__to_t_bytes32_t_string_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint64(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function abi_decode_tuple_t_uint64(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_addresst_uint64t_address(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d() {\n        revert(0, 0)\n    }\n\n    // struct Client.Any2EVMMessage\n    function abi_decode_t_struct$_Any2EVMMessage_$194_calldata_ptr(offset, end) -> value {\n        if slt(sub(end, offset), 160) { revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d() }\n        value := offset\n    }\n\n    function abi_decode_tuple_t_struct$_Any2EVMMessage_$194_calldata_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_struct$_Any2EVMMessage_$194_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_uint64t_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint64(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_WrappedNFT_$7892_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_WrappedNFT_$7892_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_WrappedNFT_$7892_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_WrappedNFT_$7892__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_WrappedNFT_$7892_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Must be proposed owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_0ff46bbb058c6b1431d73c360a5974025321b7ff6f532fcd8fc819bb0d10498c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_address__to_t_uint256_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function array_allocation_size_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // struct Client.EVMTokenAmount\n    function abi_decode_t_struct$_EVMTokenAmount_$181_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x40) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x40)\n\n        {\n            // token\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_address(add(headStart, offset), end))\n\n        }\n\n        {\n            // amount\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_uint256(add(headStart, offset), end))\n\n        }\n\n    }\n\n    // struct Client.EVMTokenAmount[]\n    function abi_decode_available_length_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x40))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x40) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_struct$_EVMTokenAmount_$181_memory_ptr(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // struct Client.EVMTokenAmount[]\n    function abi_decode_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    // struct Client.Any2EVMMessage\n    function abi_decode_t_struct$_Any2EVMMessage_$194_memory_ptr(headStart, end) -> value {\n        if slt(sub(end, headStart), 0xa0) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0xa0)\n\n        {\n            // messageId\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_bytes32(add(headStart, offset), end))\n\n        }\n\n        {\n            // sourceChainSelector\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_uint64(add(headStart, offset), end))\n\n        }\n\n        {\n            // sender\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() }\n\n            mstore(add(value, 0x40), abi_decode_t_bytes_memory_ptr(add(headStart, offset), end))\n\n        }\n\n        {\n            // data\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() }\n\n            mstore(add(value, 0x60), abi_decode_t_bytes_memory_ptr(add(headStart, offset), end))\n\n        }\n\n        {\n            // destTokenAmounts\n\n            let offset := calldataload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() }\n\n            mstore(add(value, 0x80), abi_decode_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr(add(headStart, offset), end))\n\n        }\n\n    }\n\n    function convert_t_struct$_Any2EVMMessage_$194_calldata_ptr_to_t_struct$_Any2EVMMessage_$194_memory_ptr(value) -> converted {\n\n        converted := abi_decode_t_struct$_Any2EVMMessage_$194_memory_ptr(value, calldatasize())\n\n    }\n\n    function store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3(memPtr) {\n\n        mstore(add(memPtr, 0), \"Only callable by owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_3bfd5788f2773712a5315b58174111e9db21853c8f7d7554f565be615cce78d3_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function array_length_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    // struct Client.EVMTokenAmount -> struct Client.EVMTokenAmount\n    function abi_encode_t_struct$_EVMTokenAmount_$181_memory_ptr_to_t_struct$_EVMTokenAmount_$181_memory_ptr(value, pos)  {\n        let tail := add(pos, 0x40)\n\n        {\n            // token\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // amount\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x20))\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_struct$_EVMTokenAmount_$181_memory_ptr_to_t_struct$_EVMTokenAmount_$181_memory_ptr(value0, pos) -> updatedPos {\n        abi_encode_t_struct$_EVMTokenAmount_$181_memory_ptr_to_t_struct$_EVMTokenAmount_$181_memory_ptr(value0, pos)\n        updatedPos := add(pos, 0x40)\n    }\n\n    function array_nextElement_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // struct Client.EVMTokenAmount[] -> struct Client.EVMTokenAmount[]\n    function abi_encode_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr(value, pos)  -> end  {\n        let length := array_length_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr(pos, length)\n        let baseRef := array_dataslot_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_struct$_EVMTokenAmount_$181_memory_ptr_to_t_struct$_EVMTokenAmount_$181_memory_ptr(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    // struct Client.EVM2AnyMessage -> struct Client.EVM2AnyMessage\n    function abi_encode_t_struct$_EVM2AnyMessage_$207_memory_ptr_to_t_struct$_EVM2AnyMessage_$207_memory_ptr_fromStack(value, pos)  -> end  {\n        let tail := add(pos, 0xa0)\n\n        {\n            // receiver\n\n            let memberValue0 := mload(add(value, 0x00))\n\n            mstore(add(pos, 0x00), sub(tail, pos))\n            tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // data\n\n            let memberValue0 := mload(add(value, 0x20))\n\n            mstore(add(pos, 0x20), sub(tail, pos))\n            tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // tokenAmounts\n\n            let memberValue0 := mload(add(value, 0x40))\n\n            mstore(add(pos, 0x40), sub(tail, pos))\n            tail := abi_encode_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_EVMTokenAmount_$181_memory_ptr_$dyn_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // feeToken\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // extraArgs\n\n            let memberValue0 := mload(add(value, 0x80))\n\n            mstore(add(pos, 0x80), sub(tail, pos))\n            tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr(memberValue0, tail)\n\n        }\n\n        end := tail\n    }\n\n    function abi_encode_tuple_t_uint64_t_struct$_EVM2AnyMessage_$207_memory_ptr__to_t_uint64_t_struct$_EVM2AnyMessage_$207_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_struct$_EVM2AnyMessage_$207_memory_ptr_to_t_struct$_EVM2AnyMessage_$207_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_bytes_memory_ptr_t_address_t_uint256__to_t_address_t_bytes_memory_ptr_t_address_t_uint256__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value1,  tail)\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    // struct NFTPoolBurnAndMint.RequestData\n    function abi_decode_t_struct$_RequestData_$7444_memory_ptr_fromMemory(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x40) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x40)\n\n        {\n            // tokenId\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_uint256_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // newOwner\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_address_fromMemory(add(headStart, offset), end))\n\n        }\n\n    }\n\n    function abi_decode_tuple_t_struct$_RequestData_$7444_memory_ptr_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_struct$_RequestData_$7444_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Cannot transfer to self\")\n\n    }\n\n    function abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d3012c42c6ebc769df901053b800579e25c59d0072411860a37a10b5e66ce5e2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: ERC20 operation did n\")\n\n        mstore(add(memPtr, 32), \"ot succeed\")\n\n    }\n\n    function abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    // struct Client.EVMExtraArgsV1 -> struct Client.EVMExtraArgsV1\n    function abi_encode_t_struct$_EVMExtraArgsV1_$213_memory_ptr_to_t_struct$_EVMExtraArgsV1_$213_memory_ptr_fromStack(value, pos)  {\n        let tail := add(pos, 0x20)\n\n        {\n            // gasLimit\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_uint256_to_t_uint256(memberValue0, add(pos, 0x00))\n        }\n\n    }\n\n    function abi_encode_tuple_t_struct$_EVMExtraArgsV1_$213_memory_ptr__to_t_struct$_EVMExtraArgsV1_$213_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_struct$_EVMExtraArgsV1_$213_memory_ptr_to_t_struct$_EVMExtraArgsV1_$213_memory_ptr_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: insufficient balance fo\")\n\n        mstore(add(memPtr, 32), \"r call\")\n\n    }\n\n    function abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n}\n",
              "id": 38,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {
            "14": [
              {
                "length": 32,
                "start": 3041
              }
            ]
          },
          "linkReferences": {},
          "object": "6080604052600436106101025760003560e01c80637a6ee0cd116100955780639c046b1b116100645780639c046b1b1461033d578063b0f479a114610368578063db04fa4914610393578063eab5b02c146103bc578063f2fde38b146103e557610109565b80637a6ee0cd1461029757806385572ffb146102c05780638da5cb5b146102e957806396d3b83d1461031457610109565b806351cff8d9116100d157806351cff8d9146101dd5780636159ada11461020657806375c67c661461024357806379ba50971461028057610109565b806301ffc9a71461010e578063263596a51461014b5780633aeac4e1146101775780634030d521146101a057610109565b3661010957005b600080fd5b34801561011a57600080fd5b50610135600480360381019061013091906118db565b61040e565b6040516101429190611923565b60405180910390f35b34801561015757600080fd5b506101606104e0565b60405161016e9291906119e7565b60405180910390f35b34801561018357600080fd5b5061019e60048036038101906101999190611a75565b61057d565b005b3480156101ac57600080fd5b506101c760048036038101906101c29190611af5565b61066d565b6040516101d49190611923565b60405180910390f35b3480156101e957600080fd5b5061020460048036038101906101ff9190611b22565b61068d565b005b34801561021257600080fd5b5061022d60048036038101906102289190611b22565b61078b565b60405161023a9190611923565b60405180910390f35b34801561024f57600080fd5b5061026a60048036038101906102659190611af5565b6107ab565b6040516102779190611923565b60405180910390f35b34801561028c57600080fd5b506102956107cb565b005b3480156102a357600080fd5b506102be60048036038101906102b99190611b85565b610960565b005b3480156102cc57600080fd5b506102e760048036038101906102e29190611c10565b610ab7565b005b3480156102f557600080fd5b506102fe610b43565b60405161030b9190611c68565b60405180910390f35b34801561032057600080fd5b5061033b60048036038101906103369190611caf565b610b6c565b005b34801561034957600080fd5b50610352610bb7565b60405161035f9190611d4e565b60405180910390f35b34801561037457600080fd5b5061037d610bdd565b60405161038a9190611c68565b60405180910390f35b34801561039f57600080fd5b506103ba60048036038101906103b59190611caf565b610c05565b005b3480156103c857600080fd5b506103e360048036038101906103de9190611d69565b610c50565b005b3480156103f157600080fd5b5061040c60048036038101906104079190611b22565b610cb3565b005b60007f85572ffb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104d957507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6000606060025460038080546104f590611dd8565b80601f016020809104026020016040519081016040528092919081815260200182805461052190611dd8565b801561056e5780601f106105435761010080835404028352916020019161056e565b820191906000526020600020905b81548152906001019060200180831161055157829003601f168201915b50505050509050915091509091565b610585610cc7565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105c09190611c68565b602060405180830381865afa1580156105dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106019190611e1e565b90506000810361063d576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61066883828473ffffffffffffffffffffffffffffffffffffffff16610d579092919063ffffffff16565b505050565b60056020528060005260406000206000915054906101000a900460ff1681565b610695610cc7565b6000479050600081036106d4576040517fd0d04f6000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516106fa90611e7c565b60006040518083038185875af1925050503d8060008114610737576040519150601f19603f3d011682016040523d82523d6000602084013e61073c565b606091505b5050905080610786573383836040517f9d11f56300000000000000000000000000000000000000000000000000000000815260040161077d93929190611ea0565b60405180910390fd5b505050565b60066020528060005260406000206000915054906101000a900460ff1681565b60046020528060005260406000206000915054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461085b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085290611f23565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016109bf93929190611ea0565b600060405180830381600087803b1580156109d957600080fd5b505af11580156109ed573d6000803e3d6000fd5b50505050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68856040518263ffffffff1660e01b8152600401610a4c9190611f43565b600060405180830381600087803b158015610a6657600080fd5b505af1158015610a7a573d6000803e3d6000fd5b5050505060008484604051602001610a93929190611f5e565b6040516020818303038152906040529050610aaf838383610ddd565b505050505050565b610abf610bdd565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b2e57336040517fd7f73334000000000000000000000000000000000000000000000000000000008152600401610b259190611c68565b60405180910390fd5b610b4081610b3b906122ea565b61121e565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610b74610cc7565b80600460008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610c0d610cc7565b80600560008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b610c58610cc7565b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b610cbb610cc7565b610cc4816112e1565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4c90612349565b60405180910390fd5b565b610dd88363a9059cbb60e01b8484604051602401610d76929190612369565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061140d565b505050565b6000610de7610cc7565b6000610e168484600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166114d4565b905060003073ffffffffffffffffffffffffffffffffffffffff1663b0f479a16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8991906123a7565b905060008173ffffffffffffffffffffffffffffffffffffffff166320487ded88856040518363ffffffff1660e01b8152600401610ec89291906125bf565b602060405180830381865afa158015610ee5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f099190611e1e565b9050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f669190611c68565b602060405180830381865afa158015610f83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa79190611e1e565b81111561108857600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110099190611c68565b602060405180830381865afa158015611026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104a9190611e1e565b816040517f8f0f420600000000000000000000000000000000000000000000000000000000815260040161107f9291906125ef565b60405180910390fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b81526004016110e5929190612369565b6020604051808303816000875af1158015611104573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611128919061262d565b508173ffffffffffffffffffffffffffffffffffffffff166396f4e9f988856040518363ffffffff1660e01b81526004016111649291906125bf565b6020604051808303816000875af1158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a7919061266f565b93508667ffffffffffffffff16847fc152007fffdd6a8d0653f1b985d331733bbdcb8dbce0517251ca024a07ffdd908888600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660405161120c94939291906126e6565b60405180910390a35050509392505050565b600081606001518060200190518101906112389190612782565b9050600081602001519050600082600001519050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166330b2c59683836040518363ffffffff1660e01b81526004016112a9929190612369565b600060405180830381600087803b1580156112c357600080fd5b505af11580156112d7573d6000803e3d6000fd5b5050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361134f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611346906127fb565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600061146f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115ae9092919063ffffffff16565b90506000815111156114cf578080602001905181019061148f919061262d565b6114ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c59061288d565b60405180910390fd5b5b505050565b6114dc6117fa565b6040518060a00160405280856040516020016114f89190611c68565b6040516020818303038152906040528152602001848152602001600067ffffffffffffffff81111561152d5761152c611f8c565b5b60405190808252806020026020018201604052801561156657816020015b61155361183f565b81526020019060019003908161154b5790505b5081526020018373ffffffffffffffffffffffffffffffffffffffff1681526020016115a2604051806020016040528062030d408152506115c6565b81525090509392505050565b60606115bd8484600085611645565b90509392505050565b60606397a657c960e01b826040516024016115e191906128c9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b60608247101561168a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168190612956565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516116b391906129a7565b60006040518083038185875af1925050503d80600081146116f0576040519150601f19603f3d011682016040523d82523d6000602084013e6116f5565b606091505b509150915061170687838387611712565b92505050949350505050565b6060831561177457600083510361176c5761172c85611787565b61176b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176290612a0a565b60405180910390fd5b5b82905061177f565b61177e83836117aa565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156117bd5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f19190612a2a565b60405180910390fd5b6040518060a00160405280606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6118b881611883565b81146118c357600080fd5b50565b6000813590506118d5816118af565b92915050565b6000602082840312156118f1576118f0611879565b5b60006118ff848285016118c6565b91505092915050565b60008115159050919050565b61191d81611908565b82525050565b60006020820190506119386000830184611914565b92915050565b6000819050919050565b6119518161193e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611991578082015181840152602081019050611976565b60008484015250505050565b6000601f19601f8301169050919050565b60006119b982611957565b6119c38185611962565b93506119d3818560208601611973565b6119dc8161199d565b840191505092915050565b60006040820190506119fc6000830185611948565b8181036020830152611a0e81846119ae565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a4282611a17565b9050919050565b611a5281611a37565b8114611a5d57600080fd5b50565b600081359050611a6f81611a49565b92915050565b60008060408385031215611a8c57611a8b611879565b5b6000611a9a85828601611a60565b9250506020611aab85828601611a60565b9150509250929050565b600067ffffffffffffffff82169050919050565b611ad281611ab5565b8114611add57600080fd5b50565b600081359050611aef81611ac9565b92915050565b600060208284031215611b0b57611b0a611879565b5b6000611b1984828501611ae0565b91505092915050565b600060208284031215611b3857611b37611879565b5b6000611b4684828501611a60565b91505092915050565b6000819050919050565b611b6281611b4f565b8114611b6d57600080fd5b50565b600081359050611b7f81611b59565b92915050565b60008060008060808587031215611b9f57611b9e611879565b5b6000611bad87828801611b70565b9450506020611bbe87828801611a60565b9350506040611bcf87828801611ae0565b9250506060611be087828801611a60565b91505092959194509250565b600080fd5b600060a08284031215611c0757611c06611bec565b5b81905092915050565b600060208284031215611c2657611c25611879565b5b600082013567ffffffffffffffff811115611c4457611c4361187e565b5b611c5084828501611bf1565b91505092915050565b611c6281611a37565b82525050565b6000602082019050611c7d6000830184611c59565b92915050565b611c8c81611908565b8114611c9757600080fd5b50565b600081359050611ca981611c83565b92915050565b60008060408385031215611cc657611cc5611879565b5b6000611cd485828601611ae0565b9250506020611ce585828601611c9a565b9150509250929050565b6000819050919050565b6000611d14611d0f611d0a84611a17565b611cef565b611a17565b9050919050565b6000611d2682611cf9565b9050919050565b6000611d3882611d1b565b9050919050565b611d4881611d2d565b82525050565b6000602082019050611d636000830184611d3f565b92915050565b60008060408385031215611d8057611d7f611879565b5b6000611d8e85828601611a60565b9250506020611d9f85828601611c9a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611df057607f821691505b602082108103611e0357611e02611da9565b5b50919050565b600081519050611e1881611b59565b92915050565b600060208284031215611e3457611e33611879565b5b6000611e4284828501611e09565b91505092915050565b600081905092915050565b50565b6000611e66600083611e4b565b9150611e7182611e56565b600082019050919050565b6000611e8782611e59565b9150819050919050565b611e9a81611b4f565b82525050565b6000606082019050611eb56000830186611c59565b611ec26020830185611c59565b611ecf6040830184611e91565b949350505050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b6000611f0d601683611962565b9150611f1882611ed7565b602082019050919050565b60006020820190508181036000830152611f3c81611f00565b9050919050565b6000602082019050611f586000830184611e91565b92915050565b6000604082019050611f736000830185611e91565b611f806020830184611c59565b9392505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611fc48261199d565b810181811067ffffffffffffffff82111715611fe357611fe2611f8c565b5b80604052505050565b6000611ff661186f565b90506120028282611fbb565b919050565b600080fd5b6120158161193e565b811461202057600080fd5b50565b6000813590506120328161200c565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff82111561205d5761205c611f8c565b5b6120668261199d565b9050602081019050919050565b82818337600083830152505050565b600061209561209084612042565b611fec565b9050828152602081018484840111156120b1576120b061203d565b5b6120bc848285612073565b509392505050565b600082601f8301126120d9576120d8612038565b5b81356120e9848260208601612082565b91505092915050565b600067ffffffffffffffff82111561210d5761210c611f8c565b5b602082029050602081019050919050565b600080fd5b60006040828403121561213957612138611f87565b5b6121436040611fec565b9050600061215384828501611a60565b600083015250602061216784828501611b70565b60208301525092915050565b6000612186612181846120f2565b611fec565b905080838252602082019050604084028301858111156121a9576121a861211e565b5b835b818110156121d257806121be8882612123565b8452602084019350506040810190506121ab565b5050509392505050565b600082601f8301126121f1576121f0612038565b5b8135612201848260208601612173565b91505092915050565b600060a082840312156122205761221f611f87565b5b61222a60a0611fec565b9050600061223a84828501612023565b600083015250602061224e84828501611ae0565b602083015250604082013567ffffffffffffffff81111561227257612271612007565b5b61227e848285016120c4565b604083015250606082013567ffffffffffffffff8111156122a2576122a1612007565b5b6122ae848285016120c4565b606083015250608082013567ffffffffffffffff8111156122d2576122d1612007565b5b6122de848285016121dc565b60808301525092915050565b60006122f6368361220a565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000612333601683611962565b915061233e826122fd565b602082019050919050565b6000602082019050818103600083015261236281612326565b9050919050565b600060408201905061237e6000830185611c59565b61238b6020830184611e91565b9392505050565b6000815190506123a181611a49565b92915050565b6000602082840312156123bd576123bc611879565b5b60006123cb84828501612392565b91505092915050565b6123dd81611ab5565b82525050565b600081519050919050565b600082825260208201905092915050565b600061240a826123e3565b61241481856123ee565b9350612424818560208601611973565b61242d8161199d565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61246d81611a37565b82525050565b61247c81611b4f565b82525050565b6040820160008201516124986000850182612464565b5060208201516124ab6020850182612473565b50505050565b60006124bd8383612482565b60408301905092915050565b6000602082019050919050565b60006124e182612438565b6124eb8185612443565b93506124f683612454565b8060005b8381101561252757815161250e88826124b1565b9750612519836124c9565b9250506001810190506124fa565b5085935050505092915050565b600060a083016000830151848203600086015261255182826123ff565b9150506020830151848203602086015261256b82826123ff565b9150506040830151848203604086015261258582826124d6565b915050606083015161259a6060860182612464565b50608083015184820360808601526125b282826123ff565b9150508091505092915050565b60006040820190506125d460008301856123d4565b81810360208301526125e68184612534565b90509392505050565b60006040820190506126046000830185611e91565b6126116020830184611e91565b9392505050565b60008151905061262781611c83565b92915050565b60006020828403121561264357612642611879565b5b600061265184828501612618565b91505092915050565b6000815190506126698161200c565b92915050565b60006020828403121561268557612684611879565b5b60006126938482850161265a565b91505092915050565b600082825260208201905092915050565b60006126b8826123e3565b6126c2818561269c565b93506126d2818560208601611973565b6126db8161199d565b840191505092915050565b60006080820190506126fb6000830187611c59565b818103602083015261270d81866126ad565b905061271c6040830185611c59565b6127296060830184611e91565b95945050505050565b60006040828403121561274857612747611f87565b5b6127526040611fec565b9050600061276284828501611e09565b600083015250602061277684828501612392565b60208301525092915050565b60006040828403121561279857612797611879565b5b60006127a684828501612732565b91505092915050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006127e5601783611962565b91506127f0826127af565b602082019050919050565b60006020820190508181036000830152612814816127d8565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612877602a83611962565b91506128828261281b565b604082019050919050565b600060208201905081810360008301526128a68161286a565b9050919050565b6020820160008201516128c36000850182612473565b50505050565b60006020820190506128de60008301846128ad565b92915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612940602683611962565b915061294b826128e4565b604082019050919050565b6000602082019050818103600083015261296f81612933565b9050919050565b6000612981826123e3565b61298b8185611e4b565b935061299b818560208601611973565b80840191505092915050565b60006129b38284612976565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006129f4601d83611962565b91506129ff826129be565b602082019050919050565b60006020820190508181036000830152612a23816129e7565b9050919050565b60006020820190508181036000830152612a4481846119ae565b90509291505056fea2646970667358221220b728ef5a64499b0f2726b26a689af14a2d9a04d1133a08817dd9e83b85223bf864736f6c634300081c0033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x102 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7A6EE0CD GT PUSH2 0x95 JUMPI DUP1 PUSH4 0x9C046B1B GT PUSH2 0x64 JUMPI DUP1 PUSH4 0x9C046B1B EQ PUSH2 0x33D JUMPI DUP1 PUSH4 0xB0F479A1 EQ PUSH2 0x368 JUMPI DUP1 PUSH4 0xDB04FA49 EQ PUSH2 0x393 JUMPI DUP1 PUSH4 0xEAB5B02C EQ PUSH2 0x3BC JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3E5 JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x7A6EE0CD EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x85572FFB EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0x96D3B83D EQ PUSH2 0x314 JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x51CFF8D9 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x51CFF8D9 EQ PUSH2 0x1DD JUMPI DUP1 PUSH4 0x6159ADA1 EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0x75C67C66 EQ PUSH2 0x243 JUMPI DUP1 PUSH4 0x79BA5097 EQ PUSH2 0x280 JUMPI PUSH2 0x109 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x10E JUMPI DUP1 PUSH4 0x263596A5 EQ PUSH2 0x14B JUMPI DUP1 PUSH4 0x3AEAC4E1 EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x4030D521 EQ PUSH2 0x1A0 JUMPI PUSH2 0x109 JUMP JUMPDEST CALLDATASIZE PUSH2 0x109 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x11A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x135 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x130 SWAP2 SWAP1 PUSH2 0x18DB JUMP JUMPDEST PUSH2 0x40E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x142 SWAP2 SWAP1 PUSH2 0x1923 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x157 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x160 PUSH2 0x4E0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16E SWAP3 SWAP2 SWAP1 PUSH2 0x19E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x183 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x19E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x199 SWAP2 SWAP1 PUSH2 0x1A75 JUMP JUMPDEST PUSH2 0x57D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1AC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C2 SWAP2 SWAP1 PUSH2 0x1AF5 JUMP JUMPDEST PUSH2 0x66D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D4 SWAP2 SWAP1 PUSH2 0x1923 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x204 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1FF SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST PUSH2 0x68D JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22D PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x228 SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST PUSH2 0x78B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x23A SWAP2 SWAP1 PUSH2 0x1923 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x265 SWAP2 SWAP1 PUSH2 0x1AF5 JUMP JUMPDEST PUSH2 0x7AB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x277 SWAP2 SWAP1 PUSH2 0x1923 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x295 PUSH2 0x7CB JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2BE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2B9 SWAP2 SWAP1 PUSH2 0x1B85 JUMP JUMPDEST PUSH2 0x960 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E2 SWAP2 SWAP1 PUSH2 0x1C10 JUMP JUMPDEST PUSH2 0xAB7 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0xB43 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x320 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x33B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x336 SWAP2 SWAP1 PUSH2 0x1CAF JUMP JUMPDEST PUSH2 0xB6C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x352 PUSH2 0xBB7 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x35F SWAP2 SWAP1 PUSH2 0x1D4E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x374 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x37D PUSH2 0xBDD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x38A SWAP2 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3B5 SWAP2 SWAP1 PUSH2 0x1CAF JUMP JUMPDEST PUSH2 0xC05 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3E3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3DE SWAP2 SWAP1 PUSH2 0x1D69 JUMP JUMPDEST PUSH2 0xC50 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x40C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x407 SWAP2 SWAP1 PUSH2 0x1B22 JUMP JUMPDEST PUSH2 0xCB3 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH32 0x85572FFB00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x4D9 JUMPI POP PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x2 SLOAD PUSH1 0x3 DUP1 DUP1 SLOAD PUSH2 0x4F5 SWAP1 PUSH2 0x1DD8 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x521 SWAP1 PUSH2 0x1DD8 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x56E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x543 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x56E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x551 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH2 0x585 PUSH2 0xCC7 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5C0 SWAP2 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5DD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x601 SWAP2 SWAP1 PUSH2 0x1E1E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 SUB PUSH2 0x63D JUMPI PUSH1 0x40 MLOAD PUSH32 0xD0D04F6000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x668 DUP4 DUP3 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD57 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x695 PUSH2 0xCC7 JUMP JUMPDEST PUSH1 0x0 SELFBALANCE SWAP1 POP PUSH1 0x0 DUP2 SUB PUSH2 0x6D4 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD0D04F6000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH2 0x6FA SWAP1 PUSH2 0x1E7C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x737 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x73C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x786 JUMPI CALLER DUP4 DUP4 PUSH1 0x40 MLOAD PUSH32 0x9D11F56300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x77D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1EA0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x85B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x852 SWAP1 PUSH2 0x1F23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD CALLER ADDRESS DUP8 PUSH1 0x40 MLOAD DUP5 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9BF SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1EA0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x9D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x9ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42966C68 DUP6 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA4C SWAP2 SWAP1 PUSH2 0x1F43 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xA7A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA93 SWAP3 SWAP2 SWAP1 PUSH2 0x1F5E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 POP PUSH2 0xAAF DUP4 DUP4 DUP4 PUSH2 0xDDD JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xABF PUSH2 0xBDD JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB2E JUMPI CALLER PUSH1 0x40 MLOAD PUSH32 0xD7F7333400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB25 SWAP2 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB40 DUP2 PUSH2 0xB3B SWAP1 PUSH2 0x22EA JUMP JUMPDEST PUSH2 0x121E JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xB74 PUSH2 0xCC7 JUMP JUMPDEST DUP1 PUSH1 0x4 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC0D PUSH2 0xCC7 JUMP JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0xC58 PUSH2 0xCC7 JUMP JUMPDEST DUP1 PUSH1 0x6 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 0xCBB PUSH2 0xCC7 JUMP JUMPDEST PUSH2 0xCC4 DUP2 PUSH2 0x12E1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD55 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD4C SWAP1 PUSH2 0x2349 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0xDD8 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0xD76 SWAP3 SWAP2 SWAP1 PUSH2 0x2369 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x140D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDE7 PUSH2 0xCC7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE16 DUP5 DUP5 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x14D4 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xB0F479A1 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE65 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE89 SWAP2 SWAP1 PUSH2 0x23A7 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x20487DED DUP9 DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEC8 SWAP3 SWAP2 SWAP1 PUSH2 0x25BF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xEE5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF09 SWAP2 SWAP1 PUSH2 0x1E1E JUMP JUMPDEST SWAP1 POP PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xF66 SWAP2 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF83 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFA7 SWAP2 SWAP1 PUSH2 0x1E1E JUMP JUMPDEST DUP2 GT ISZERO PUSH2 0x1088 JUMPI PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x70A08231 ADDRESS PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1009 SWAP2 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1026 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x104A SWAP2 SWAP1 PUSH2 0x1E1E JUMP JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH32 0x8F0F420600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x107F SWAP3 SWAP2 SWAP1 PUSH2 0x25EF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x95EA7B3 DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10E5 SWAP3 SWAP2 SWAP1 PUSH2 0x2369 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1104 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1128 SWAP2 SWAP1 PUSH2 0x262D JUMP JUMPDEST POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x96F4E9F9 DUP9 DUP6 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1164 SWAP3 SWAP2 SWAP1 PUSH2 0x25BF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1183 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11A7 SWAP2 SWAP1 PUSH2 0x266F JUMP JUMPDEST SWAP4 POP DUP7 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP5 PUSH32 0xC152007FFFDD6A8D0653F1B985D331733BBDCB8DBCE0517251CA024A07FFDD90 DUP9 DUP9 PUSH1 0x7 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH1 0x40 MLOAD PUSH2 0x120C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x26E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 ADD MLOAD DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1238 SWAP2 SWAP1 PUSH2 0x2782 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x20 ADD MLOAD SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x0 ADD MLOAD SWAP1 POP PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x30B2C596 DUP4 DUP4 PUSH1 0x40 MLOAD DUP4 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A9 SWAP3 SWAP2 SWAP1 PUSH2 0x2369 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x12D7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x134F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1346 SWAP1 PUSH2 0x27FB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xED8889F560326EB138920D842192F0EB3DD22B4F139C87A2C57538E05BAE1278 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x146F DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x15AE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT ISZERO PUSH2 0x14CF JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x148F SWAP2 SWAP1 PUSH2 0x262D JUMP JUMPDEST PUSH2 0x14CE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x14C5 SWAP1 PUSH2 0x288D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x14DC PUSH2 0x17FA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x14F8 SWAP2 SWAP1 PUSH2 0x1C68 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x152D JUMPI PUSH2 0x152C PUSH2 0x1F8C JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1566 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH2 0x1553 PUSH2 0x183F JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH2 0x154B JUMPI SWAP1 POP JUMPDEST POP DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x15A2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH3 0x30D40 DUP2 MSTORE POP PUSH2 0x15C6 JUMP JUMPDEST DUP2 MSTORE POP SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x15BD DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1645 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH4 0x97A657C9 PUSH1 0xE0 SHL DUP3 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x15E1 SWAP2 SWAP1 PUSH2 0x28C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x168A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1681 SWAP1 PUSH2 0x2956 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x16B3 SWAP2 SWAP1 PUSH2 0x29A7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x16F0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x16F5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1706 DUP8 DUP4 DUP4 DUP8 PUSH2 0x1712 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1774 JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x176C JUMPI PUSH2 0x172C DUP6 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x176B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1762 SWAP1 PUSH2 0x2A0A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x177F JUMP JUMPDEST PUSH2 0x177E DUP4 DUP4 PUSH2 0x17AA JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x17BD JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17F1 SWAP2 SWAP1 PUSH2 0x2A2A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18B8 DUP2 PUSH2 0x1883 JUMP JUMPDEST DUP2 EQ PUSH2 0x18C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x18D5 DUP2 PUSH2 0x18AF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x18F1 JUMPI PUSH2 0x18F0 PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x18FF DUP5 DUP3 DUP6 ADD PUSH2 0x18C6 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x191D DUP2 PUSH2 0x1908 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1938 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1914 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1951 DUP2 PUSH2 0x193E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1991 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1976 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B9 DUP3 PUSH2 0x1957 JUMP JUMPDEST PUSH2 0x19C3 DUP2 DUP6 PUSH2 0x1962 JUMP JUMPDEST SWAP4 POP PUSH2 0x19D3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1973 JUMP JUMPDEST PUSH2 0x19DC DUP2 PUSH2 0x199D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x19FC PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1948 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1A0E DUP2 DUP5 PUSH2 0x19AE JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A42 DUP3 PUSH2 0x1A17 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A52 DUP2 PUSH2 0x1A37 JUMP JUMPDEST DUP2 EQ PUSH2 0x1A5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1A6F DUP2 PUSH2 0x1A49 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A8C JUMPI PUSH2 0x1A8B PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A9A DUP6 DUP3 DUP7 ADD PUSH2 0x1A60 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1AAB DUP6 DUP3 DUP7 ADD PUSH2 0x1A60 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AD2 DUP2 PUSH2 0x1AB5 JUMP JUMPDEST DUP2 EQ PUSH2 0x1ADD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1AEF DUP2 PUSH2 0x1AC9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B0B JUMPI PUSH2 0x1B0A PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B19 DUP5 DUP3 DUP6 ADD PUSH2 0x1AE0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B38 JUMPI PUSH2 0x1B37 PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B46 DUP5 DUP3 DUP6 ADD PUSH2 0x1A60 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B62 DUP2 PUSH2 0x1B4F JUMP JUMPDEST DUP2 EQ PUSH2 0x1B6D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1B7F DUP2 PUSH2 0x1B59 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1B9F JUMPI PUSH2 0x1B9E PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1BAD DUP8 DUP3 DUP9 ADD PUSH2 0x1B70 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1BBE DUP8 DUP3 DUP9 ADD PUSH2 0x1A60 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1BCF DUP8 DUP3 DUP9 ADD PUSH2 0x1AE0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 PUSH2 0x1BE0 DUP8 DUP3 DUP9 ADD PUSH2 0x1A60 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C07 JUMPI PUSH2 0x1C06 PUSH2 0x1BEC JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C26 JUMPI PUSH2 0x1C25 PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C44 JUMPI PUSH2 0x1C43 PUSH2 0x187E JUMP JUMPDEST JUMPDEST PUSH2 0x1C50 DUP5 DUP3 DUP6 ADD PUSH2 0x1BF1 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1C62 DUP2 PUSH2 0x1A37 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1C7D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1C59 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1C8C DUP2 PUSH2 0x1908 JUMP JUMPDEST DUP2 EQ PUSH2 0x1C97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1CA9 DUP2 PUSH2 0x1C83 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1CC6 JUMPI PUSH2 0x1CC5 PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1CD4 DUP6 DUP3 DUP7 ADD PUSH2 0x1AE0 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1CE5 DUP6 DUP3 DUP7 ADD PUSH2 0x1C9A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D14 PUSH2 0x1D0F PUSH2 0x1D0A DUP5 PUSH2 0x1A17 JUMP JUMPDEST PUSH2 0x1CEF JUMP JUMPDEST PUSH2 0x1A17 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D26 DUP3 PUSH2 0x1CF9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D38 DUP3 PUSH2 0x1D1B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1D48 DUP2 PUSH2 0x1D2D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1D63 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1D3F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1D80 JUMPI PUSH2 0x1D7F PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1D8E DUP6 DUP3 DUP7 ADD PUSH2 0x1A60 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1D9F DUP6 DUP3 DUP7 ADD PUSH2 0x1C9A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1DF0 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1E03 JUMPI PUSH2 0x1E02 PUSH2 0x1DA9 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x1E18 DUP2 PUSH2 0x1B59 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E34 JUMPI PUSH2 0x1E33 PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1E42 DUP5 DUP3 DUP6 ADD PUSH2 0x1E09 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E66 PUSH1 0x0 DUP4 PUSH2 0x1E4B JUMP JUMPDEST SWAP2 POP PUSH2 0x1E71 DUP3 PUSH2 0x1E56 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E87 DUP3 PUSH2 0x1E59 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E9A DUP2 PUSH2 0x1B4F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x1EB5 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x1C59 JUMP JUMPDEST PUSH2 0x1EC2 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1C59 JUMP JUMPDEST PUSH2 0x1ECF PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1E91 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0x4D7573742062652070726F706F736564206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F0D PUSH1 0x16 DUP4 PUSH2 0x1962 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F18 DUP3 PUSH2 0x1ED7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F3C DUP2 PUSH2 0x1F00 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1F58 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1E91 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x1F73 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1E91 JUMP JUMPDEST PUSH2 0x1F80 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1C59 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1FC4 DUP3 PUSH2 0x199D JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1FE3 JUMPI PUSH2 0x1FE2 PUSH2 0x1F8C JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FF6 PUSH2 0x186F JUMP JUMPDEST SWAP1 POP PUSH2 0x2002 DUP3 DUP3 PUSH2 0x1FBB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2015 DUP2 PUSH2 0x193E JUMP JUMPDEST DUP2 EQ PUSH2 0x2020 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2032 DUP2 PUSH2 0x200C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x205D JUMPI PUSH2 0x205C PUSH2 0x1F8C JUMP JUMPDEST JUMPDEST PUSH2 0x2066 DUP3 PUSH2 0x199D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2095 PUSH2 0x2090 DUP5 PUSH2 0x2042 JUMP JUMPDEST PUSH2 0x1FEC JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x20B1 JUMPI PUSH2 0x20B0 PUSH2 0x203D JUMP JUMPDEST JUMPDEST PUSH2 0x20BC DUP5 DUP3 DUP6 PUSH2 0x2073 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x20D9 JUMPI PUSH2 0x20D8 PUSH2 0x2038 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x20E9 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2082 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x210D JUMPI PUSH2 0x210C PUSH2 0x1F8C JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2139 JUMPI PUSH2 0x2138 PUSH2 0x1F87 JUMP JUMPDEST JUMPDEST PUSH2 0x2143 PUSH1 0x40 PUSH2 0x1FEC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2153 DUP5 DUP3 DUP6 ADD PUSH2 0x1A60 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x2167 DUP5 DUP3 DUP6 ADD PUSH2 0x1B70 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2186 PUSH2 0x2181 DUP5 PUSH2 0x20F2 JUMP JUMPDEST PUSH2 0x1FEC JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x40 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x21A9 JUMPI PUSH2 0x21A8 PUSH2 0x211E JUMP JUMPDEST JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x21D2 JUMPI DUP1 PUSH2 0x21BE DUP9 DUP3 PUSH2 0x2123 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP POP PUSH1 0x40 DUP2 ADD SWAP1 POP PUSH2 0x21AB JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x21F1 JUMPI PUSH2 0x21F0 PUSH2 0x2038 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x2201 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2173 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2220 JUMPI PUSH2 0x221F PUSH2 0x1F87 JUMP JUMPDEST JUMPDEST PUSH2 0x222A PUSH1 0xA0 PUSH2 0x1FEC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x223A DUP5 DUP3 DUP6 ADD PUSH2 0x2023 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x224E DUP5 DUP3 DUP6 ADD PUSH2 0x1AE0 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2272 JUMPI PUSH2 0x2271 PUSH2 0x2007 JUMP JUMPDEST JUMPDEST PUSH2 0x227E DUP5 DUP3 DUP6 ADD PUSH2 0x20C4 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x22A2 JUMPI PUSH2 0x22A1 PUSH2 0x2007 JUMP JUMPDEST JUMPDEST PUSH2 0x22AE DUP5 DUP3 DUP6 ADD PUSH2 0x20C4 JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x22D2 JUMPI PUSH2 0x22D1 PUSH2 0x2007 JUMP JUMPDEST JUMPDEST PUSH2 0x22DE DUP5 DUP3 DUP6 ADD PUSH2 0x21DC JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22F6 CALLDATASIZE DUP4 PUSH2 0x220A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4F6E6C792063616C6C61626C65206279206F776E657200000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2333 PUSH1 0x16 DUP4 PUSH2 0x1962 JUMP JUMPDEST SWAP2 POP PUSH2 0x233E DUP3 PUSH2 0x22FD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2362 DUP2 PUSH2 0x2326 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x237E PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1C59 JUMP JUMPDEST PUSH2 0x238B PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1E91 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x23A1 DUP2 PUSH2 0x1A49 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x23BD JUMPI PUSH2 0x23BC PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x23CB DUP5 DUP3 DUP6 ADD PUSH2 0x2392 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x23DD DUP2 PUSH2 0x1AB5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x240A DUP3 PUSH2 0x23E3 JUMP JUMPDEST PUSH2 0x2414 DUP2 DUP6 PUSH2 0x23EE JUMP JUMPDEST SWAP4 POP PUSH2 0x2424 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1973 JUMP JUMPDEST PUSH2 0x242D DUP2 PUSH2 0x199D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x246D DUP2 PUSH2 0x1A37 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x247C DUP2 PUSH2 0x1B4F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x2498 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2464 JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH2 0x24AB PUSH1 0x20 DUP6 ADD DUP3 PUSH2 0x2473 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24BD DUP4 DUP4 PUSH2 0x2482 JUMP JUMPDEST PUSH1 0x40 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24E1 DUP3 PUSH2 0x2438 JUMP JUMPDEST PUSH2 0x24EB DUP2 DUP6 PUSH2 0x2443 JUMP JUMPDEST SWAP4 POP PUSH2 0x24F6 DUP4 PUSH2 0x2454 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2527 JUMPI DUP2 MLOAD PUSH2 0x250E DUP9 DUP3 PUSH2 0x24B1 JUMP JUMPDEST SWAP8 POP PUSH2 0x2519 DUP4 PUSH2 0x24C9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x24FA JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x0 DUP7 ADD MSTORE PUSH2 0x2551 DUP3 DUP3 PUSH2 0x23FF JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x256B DUP3 DUP3 PUSH2 0x23FF JUMP JUMPDEST SWAP2 POP POP PUSH1 0x40 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x2585 DUP3 DUP3 PUSH2 0x24D6 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0x259A PUSH1 0x60 DUP7 ADD DUP3 PUSH2 0x2464 JUMP JUMPDEST POP PUSH1 0x80 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x80 DUP7 ADD MSTORE PUSH2 0x25B2 DUP3 DUP3 PUSH2 0x23FF JUMP JUMPDEST SWAP2 POP POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x25D4 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x23D4 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x25E6 DUP2 DUP5 PUSH2 0x2534 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2604 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x1E91 JUMP JUMPDEST PUSH2 0x2611 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1E91 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2627 DUP2 PUSH2 0x1C83 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2643 JUMPI PUSH2 0x2642 PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2651 DUP5 DUP3 DUP6 ADD PUSH2 0x2618 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2669 DUP2 PUSH2 0x200C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2685 JUMPI PUSH2 0x2684 PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2693 DUP5 DUP3 DUP6 ADD PUSH2 0x265A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x26B8 DUP3 PUSH2 0x23E3 JUMP JUMPDEST PUSH2 0x26C2 DUP2 DUP6 PUSH2 0x269C JUMP JUMPDEST SWAP4 POP PUSH2 0x26D2 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1973 JUMP JUMPDEST PUSH2 0x26DB DUP2 PUSH2 0x199D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x26FB PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1C59 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x270D DUP2 DUP7 PUSH2 0x26AD JUMP JUMPDEST SWAP1 POP PUSH2 0x271C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1C59 JUMP JUMPDEST PUSH2 0x2729 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1E91 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2748 JUMPI PUSH2 0x2747 PUSH2 0x1F87 JUMP JUMPDEST JUMPDEST PUSH2 0x2752 PUSH1 0x40 PUSH2 0x1FEC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2762 DUP5 DUP3 DUP6 ADD PUSH2 0x1E09 JUMP JUMPDEST PUSH1 0x0 DUP4 ADD MSTORE POP PUSH1 0x20 PUSH2 0x2776 DUP5 DUP3 DUP6 ADD PUSH2 0x2392 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2798 JUMPI PUSH2 0x2797 PUSH2 0x1879 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x27A6 DUP5 DUP3 DUP6 ADD PUSH2 0x2732 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x43616E6E6F74207472616E7366657220746F2073656C66000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27E5 PUSH1 0x17 DUP4 PUSH2 0x1962 JUMP JUMPDEST SWAP2 POP PUSH2 0x27F0 DUP3 PUSH2 0x27AF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2814 DUP2 PUSH2 0x27D8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2877 PUSH1 0x2A DUP4 PUSH2 0x1962 JUMP JUMPDEST SWAP2 POP PUSH2 0x2882 DUP3 PUSH2 0x281B JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x28A6 DUP2 PUSH2 0x286A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH2 0x28C3 PUSH1 0x0 DUP6 ADD DUP3 PUSH2 0x2473 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x28DE PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x28AD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2940 PUSH1 0x26 DUP4 PUSH2 0x1962 JUMP JUMPDEST SWAP2 POP PUSH2 0x294B DUP3 PUSH2 0x28E4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x296F DUP2 PUSH2 0x2933 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2981 DUP3 PUSH2 0x23E3 JUMP JUMPDEST PUSH2 0x298B DUP2 DUP6 PUSH2 0x1E4B JUMP JUMPDEST SWAP4 POP PUSH2 0x299B DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1973 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29B3 DUP3 DUP5 PUSH2 0x2976 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29F4 PUSH1 0x1D DUP4 PUSH2 0x1962 JUMP JUMPDEST SWAP2 POP PUSH2 0x29FF DUP3 PUSH2 0x29BE JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A23 DUP2 PUSH2 0x29E7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2A44 DUP2 DUP5 PUSH2 0x19AE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0x28 0xEF GAS PUSH5 0x499B0F2726 0xB2 PUSH11 0x689AF14A2D9A04D1133A08 DUP2 PUSH30 0xD9E83B85223BF864736F6C634300081C0033000000000000000000000000 ",
          "sourceMap": "1023:10491:36:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1405:209:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;9346:188:36;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;11126:386;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2908:54;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;10172:592;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3022:50;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2783:59;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1026:316:5;;;;;;;;;;;;;:::i;:::-;;4276:703:36;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1660:130:0;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1382:81:5;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3587:206:36;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3112:22;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2205:98:0;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3877:186:36;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4141:129;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;847:98:5;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1405:209:0;1490:4;1524:41;1509:56;;;:11;:56;;;;:100;;;;1584:25;1569:40;;;:11;:40;;;;1509:100;1502:107;;1405:209;;;:::o;9346:188:36:-;9422:17;9441:18;9483:23;;9508:18;9475:52;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9346:188;;:::o;11126:386::-;2075:20:5;:18;:20::i;:::-;11285:14:36::1;11309:6;11302:24;;;11335:4;11302:39;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11285:56;;11416:1;11406:6;:11:::0;11402:43:::1;;11426:19;;;;;;;;;;;;;;11402:43;11456:49;11484:12;11498:6;11463;11456:27;;;;:49;;;;;:::i;:::-;11226:286;11126:386:::0;;:::o;2908:54::-;;;;;;;;;;;;;;;;;;;;;;:::o;10172:592::-;2075:20:5;:18;:20::i;:::-;10288:14:36::1;10305:21;10288:38;;10401:1;10391:6;:11:::0;10387:43:::1;;10411:19;;;;;;;;;;;;;;10387:43;10540:9;10555:12;:17;;10580:6;10555:36;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10539:52;;;10691:4;10686:71;;10724:10;10736:12;10750:6;10704:53;;;;;;;;;;;;;:::i;:::-;;;;;;;;10686:71;10229:535;;10172:592:::0;:::o;3022:50::-;;;;;;;;;;;;;;;;;;;;;;:::o;2783:59::-;;;;;;;;;;;;;;;;;;;;;;:::o;1026:316:5:-;1150:14;;;;;;;;;;;1136:28;;:10;:28;;;1128:63;;;;;;;;;;;;:::i;:::-;;;;;;;;;1198:16;1217:7;;;;;;;;;;;1198:26;;1240:10;1230:7;;:20;;;;;;;;;;;;;;;;;;1281:1;1256:14;;:27;;;;;;;;;;;;;;;;;;1326:10;1295:42;;1316:8;1295:42;;;;;;;;;;;;1071:271;1026:316::o;4276:703:36:-;4683:4;;;;;;;;;;;:17;;;4701:10;4721:4;4728:8;4683:54;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4771:4;;;;;;;;;;;:9;;;4781:8;4771:19;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4853:20;4887:8;4897;4876:30;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4853:53;;4916:56;4935:17;4954:8;4964:7;4916:18;:56::i;:::-;;4417:562;4276:703;;;;:::o;1660:130:0:-;2449:11;:9;:11::i;:::-;2435:25;;:10;:25;;;2431:63;;2483:10;2469:25;;;;;;;;;;;:::i;:::-;;;;;;;;2431:63;1764:21:::1;1777:7;1764:21;;;:::i;:::-;:12;:21::i;:::-;1660:130:::0;:::o;1382:81:5:-;1429:7;1451;;;;;;;;;;;1444:14;;1382:81;:::o;3587:206:36:-;2075:20:5;:18;:20::i;:::-;3779:7:36::1;3721:28;:55;3750:25;3721:55;;;;;;;;;;;;;;;;:65;;;;;;;;;;;;;;;;;;3587:206:::0;;:::o;3112:22::-;;;;;;;;;;;;;:::o;2205:98:0:-;2255:7;2285:12;2270:28;;2205:98;:::o;3877:186:36:-;2075:20:5;:18;:20::i;:::-;4049:7:36::1;4001:23;:45;4025:20;4001:45;;;;;;;;;;;;;;;;:55;;;;;;;;;;;;;;;;;;3877:186:::0;;:::o;4141:129::-;2075:20:5;:18;:20::i;:::-;4256:7:36::1;4226:18;:27;4245:7;4226:27;;;;;;;;;;;;;;;;:37;;;;;;;;;;;;;;;;;;4141:129:::0;;:::o;847:98:5:-;2075:20;:18;:20::i;:::-;918:22:::1;937:2;918:18;:22::i;:::-;847:98:::0;:::o;1809:162::-;1932:7;;;;;;;;;;1918:21;;:10;:21;;;1910:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;1809:162::o;759:169:10:-;837:86;857:5;887:23;;;912:2;916:5;864:58;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;837:19;:86::i;:::-;759:169;;;:::o;5446:1552:36:-;5620:17;2075:20:5;:18;:20::i;:::-;5767:43:36::1;5813:106;5844:9;5867:8;5897:11;;;;;;;;;;;5813:17;:106::i;:::-;5767:152;;6013:20;6050:4;:14;;;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6013:54;;6135:12;6150:6;:13;;;6164:25;6191:14;6150:56;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6135:71;;6228:11;;;;;;;;;;;:21;;;6258:4;6228:36;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6221:4;:43;6217:128;;;6302:11;;;;;;;;;;;:21;;;6332:4;6302:36;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6340:4;6285:60;;;;;;;;;;;;:::i;:::-;;;;;;;;6217:128;6463:11;;;;;;;;;;;:19;;;6491:6;6500:4;6463:42;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6619:6;:15;;;6635:25;6662:14;6619:58;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6607:70;;6794:25;6739:187;;6771:9;6739:187;6833:9;6856:8;6886:11;;;;;;;;;;;6912:4;6739:187;;;;;;;;;:::i;:::-;;;;;;;;6975:16;;;5446:1552:::0;;;;;:::o;7038:729::-;7159:26;7199:14;:19;;;7188:46;;;;;;;;;;;;:::i;:::-;7159:75;;7244:16;7263:7;:16;;;7244:35;;7289:15;7307:7;:15;;;7289:33;;7364:4;;;;;;;;;;;:28;;;7393:8;7403:7;7364:47;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7149:618;;;7038:729;:::o;1536:239:5:-;1655:10;1649:16;;:2;:16;;;1641:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;1717:2;1700:14;;:19;;;;;;;;;;;;;;;;;;1767:2;1731:39;;1758:7;;;;;;;;;;1731:39;;;;;;;;;;;;1536:239;:::o;3401:668:10:-;3804:23;3830:69;3858:4;3830:69;;;;;;;;;;;;;;;;;3838:5;3830:27;;;;:69;;;;;:::i;:::-;3804:95;;3929:1;3909:10;:17;:21;3905:160;;;3992:10;3981:30;;;;;;;;;;;;:::i;:::-;3973:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;3905:160;3471:598;3401:668;;:::o;8269:897:36:-;8416:28;;:::i;:::-;8589:570;;;;;;;;8646:9;8635:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;8589:570;;;;8708:8;8589:570;;;;8794:1;8766:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;8589:570;;;;9132:16;8589:570;;;;;;8866:144;8954:42;;;;;;;;8987:7;8954:42;;;8866:19;:144::i;:::-;8589:570;;;8570:589;;8269:897;;;;;:::o;3695:187:11:-;3798:12;3825:52;3847:6;3855:4;3861:1;3864:12;3825:21;:52::i;:::-;3818:59;;3695:187;;;;;:::o;1286:170:3:-;1364:16;1218:10;1418:21;;1441:9;1395:56;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1388:63;;1286:170;;;:::o;4672:414:11:-;4819:12;4872:5;4847:21;:30;;4839:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;4927:12;4941:23;4968:6;:11;;4987:5;4994:4;4968:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4926:73;;;;5012:69;5039:6;5047:7;5056:10;5068:12;5012:26;:69::i;:::-;5005:76;;;;4672:414;;;;;;:::o;7016:548::-;7178:12;7202:7;7198:362;;;7244:1;7223:10;:17;:22;7219:256;;7414:18;7425:6;7414:10;:18::i;:::-;7406:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;7219:256;7489:10;7482:17;;;;7198:362;7520:33;7528:10;7540:12;7520:7;:33::i;:::-;7016:548;;;;;;;:::o;1121:302::-;1181:4;1417:1;1395:7;:19;;;:23;1388:30;;1121:302;;;:::o;8030:476::-;8201:1;8181:10;:17;:21;8177:325;;;8383:10;8377:17;8431:15;8418:10;8414:2;8410:19;8403:44;8177:325;8482:12;8475:20;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:75:38:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:77::-;1555:7;1584:5;1573:16;;1518:77;;;:::o;1601:118::-;1688:24;1706:5;1688:24;:::i;:::-;1683:3;1676:37;1601:118;;:::o;1725:99::-;1777:6;1811:5;1805:12;1795:22;;1725:99;;;:::o;1830:169::-;1914:11;1948:6;1943:3;1936:19;1988:4;1983:3;1979:14;1964:29;;1830:169;;;;:::o;2005:248::-;2087:1;2097:113;2111:6;2108:1;2105:13;2097:113;;;2196:1;2191:3;2187:11;2181:18;2177:1;2172:3;2168:11;2161:39;2133:2;2130:1;2126:10;2121:15;;2097:113;;;2244:1;2235:6;2230:3;2226:16;2219:27;2067:186;2005:248;;;:::o;2259:102::-;2300:6;2351:2;2347:7;2342:2;2335:5;2331:14;2327:28;2317:38;;2259:102;;;:::o;2367:377::-;2455:3;2483:39;2516:5;2483:39;:::i;:::-;2538:71;2602:6;2597:3;2538:71;:::i;:::-;2531:78;;2618:65;2676:6;2671:3;2664:4;2657:5;2653:16;2618:65;:::i;:::-;2708:29;2730:6;2708:29;:::i;:::-;2703:3;2699:39;2692:46;;2459:285;2367:377;;;;:::o;2750:423::-;2891:4;2929:2;2918:9;2914:18;2906:26;;2942:71;3010:1;2999:9;2995:17;2986:6;2942:71;:::i;:::-;3060:9;3054:4;3050:20;3045:2;3034:9;3030:18;3023:48;3088:78;3161:4;3152:6;3088:78;:::i;:::-;3080:86;;2750:423;;;;;:::o;3179:126::-;3216:7;3256:42;3249:5;3245:54;3234:65;;3179:126;;;:::o;3311:96::-;3348:7;3377:24;3395:5;3377:24;:::i;:::-;3366:35;;3311:96;;;:::o;3413:122::-;3486:24;3504:5;3486:24;:::i;:::-;3479:5;3476:35;3466:63;;3525:1;3522;3515:12;3466:63;3413:122;:::o;3541:139::-;3587:5;3625:6;3612:20;3603:29;;3641:33;3668:5;3641:33;:::i;:::-;3541:139;;;;:::o;3686:474::-;3754:6;3762;3811:2;3799:9;3790:7;3786:23;3782:32;3779:119;;;3817:79;;:::i;:::-;3779:119;3937:1;3962:53;4007:7;3998:6;3987:9;3983:22;3962:53;:::i;:::-;3952:63;;3908:117;4064:2;4090:53;4135:7;4126:6;4115:9;4111:22;4090:53;:::i;:::-;4080:63;;4035:118;3686:474;;;;;:::o;4166:101::-;4202:7;4242:18;4235:5;4231:30;4220:41;;4166:101;;;:::o;4273:120::-;4345:23;4362:5;4345:23;:::i;:::-;4338:5;4335:34;4325:62;;4383:1;4380;4373:12;4325:62;4273:120;:::o;4399:137::-;4444:5;4482:6;4469:20;4460:29;;4498:32;4524:5;4498:32;:::i;:::-;4399:137;;;;:::o;4542:327::-;4600:6;4649:2;4637:9;4628:7;4624:23;4620:32;4617:119;;;4655:79;;:::i;:::-;4617:119;4775:1;4800:52;4844:7;4835:6;4824:9;4820:22;4800:52;:::i;:::-;4790:62;;4746:116;4542:327;;;;:::o;4875:329::-;4934:6;4983:2;4971:9;4962:7;4958:23;4954:32;4951:119;;;4989:79;;:::i;:::-;4951:119;5109:1;5134:53;5179:7;5170:6;5159:9;5155:22;5134:53;:::i;:::-;5124:63;;5080:117;4875:329;;;;:::o;5210:77::-;5247:7;5276:5;5265:16;;5210:77;;;:::o;5293:122::-;5366:24;5384:5;5366:24;:::i;:::-;5359:5;5356:35;5346:63;;5405:1;5402;5395:12;5346:63;5293:122;:::o;5421:139::-;5467:5;5505:6;5492:20;5483:29;;5521:33;5548:5;5521:33;:::i;:::-;5421:139;;;;:::o;5566:763::-;5651:6;5659;5667;5675;5724:3;5712:9;5703:7;5699:23;5695:33;5692:120;;;5731:79;;:::i;:::-;5692:120;5851:1;5876:53;5921:7;5912:6;5901:9;5897:22;5876:53;:::i;:::-;5866:63;;5822:117;5978:2;6004:53;6049:7;6040:6;6029:9;6025:22;6004:53;:::i;:::-;5994:63;;5949:118;6106:2;6132:52;6176:7;6167:6;6156:9;6152:22;6132:52;:::i;:::-;6122:62;;6077:117;6233:2;6259:53;6304:7;6295:6;6284:9;6280:22;6259:53;:::i;:::-;6249:63;;6204:118;5566:763;;;;;;;:::o;6335:117::-;6444:1;6441;6434:12;6494:238;6573:5;6614:3;6605:6;6600:3;6596:16;6592:26;6589:113;;;6621:79;;:::i;:::-;6589:113;6720:6;6711:15;;6494:238;;;;:::o;6738:555::-;6830:6;6879:2;6867:9;6858:7;6854:23;6850:32;6847:119;;;6885:79;;:::i;:::-;6847:119;7033:1;7022:9;7018:17;7005:31;7063:18;7055:6;7052:30;7049:117;;;7085:79;;:::i;:::-;7049:117;7190:86;7268:7;7259:6;7248:9;7244:22;7190:86;:::i;:::-;7180:96;;6976:310;6738:555;;;;:::o;7299:118::-;7386:24;7404:5;7386:24;:::i;:::-;7381:3;7374:37;7299:118;;:::o;7423:222::-;7516:4;7554:2;7543:9;7539:18;7531:26;;7567:71;7635:1;7624:9;7620:17;7611:6;7567:71;:::i;:::-;7423:222;;;;:::o;7651:116::-;7721:21;7736:5;7721:21;:::i;:::-;7714:5;7711:32;7701:60;;7757:1;7754;7747:12;7701:60;7651:116;:::o;7773:133::-;7816:5;7854:6;7841:20;7832:29;;7870:30;7894:5;7870:30;:::i;:::-;7773:133;;;;:::o;7912:466::-;7976:6;7984;8033:2;8021:9;8012:7;8008:23;8004:32;8001:119;;;8039:79;;:::i;:::-;8001:119;8159:1;8184:52;8228:7;8219:6;8208:9;8204:22;8184:52;:::i;:::-;8174:62;;8130:116;8285:2;8311:50;8353:7;8344:6;8333:9;8329:22;8311:50;:::i;:::-;8301:60;;8256:115;7912:466;;;;;:::o;8384:60::-;8412:3;8433:5;8426:12;;8384:60;;;:::o;8450:142::-;8500:9;8533:53;8551:34;8560:24;8578:5;8560:24;:::i;:::-;8551:34;:::i;:::-;8533:53;:::i;:::-;8520:66;;8450:142;;;:::o;8598:126::-;8648:9;8681:37;8712:5;8681:37;:::i;:::-;8668:50;;8598:126;;;:::o;8730:145::-;8799:9;8832:37;8863:5;8832:37;:::i;:::-;8819:50;;8730:145;;;:::o;8881:169::-;8987:56;9037:5;8987:56;:::i;:::-;8982:3;8975:69;8881:169;;:::o;9056:260::-;9168:4;9206:2;9195:9;9191:18;9183:26;;9219:90;9306:1;9295:9;9291:17;9282:6;9219:90;:::i;:::-;9056:260;;;;:::o;9322:468::-;9387:6;9395;9444:2;9432:9;9423:7;9419:23;9415:32;9412:119;;;9450:79;;:::i;:::-;9412:119;9570:1;9595:53;9640:7;9631:6;9620:9;9616:22;9595:53;:::i;:::-;9585:63;;9541:117;9697:2;9723:50;9765:7;9756:6;9745:9;9741:22;9723:50;:::i;:::-;9713:60;;9668:115;9322:468;;;;;:::o;9796:180::-;9844:77;9841:1;9834:88;9941:4;9938:1;9931:15;9965:4;9962:1;9955:15;9982:320;10026:6;10063:1;10057:4;10053:12;10043:22;;10110:1;10104:4;10100:12;10131:18;10121:81;;10187:4;10179:6;10175:17;10165:27;;10121:81;10249:2;10241:6;10238:14;10218:18;10215:38;10212:84;;10268:18;;:::i;:::-;10212:84;10033:269;9982:320;;;:::o;10308:143::-;10365:5;10396:6;10390:13;10381:22;;10412:33;10439:5;10412:33;:::i;:::-;10308:143;;;;:::o;10457:351::-;10527:6;10576:2;10564:9;10555:7;10551:23;10547:32;10544:119;;;10582:79;;:::i;:::-;10544:119;10702:1;10727:64;10783:7;10774:6;10763:9;10759:22;10727:64;:::i;:::-;10717:74;;10673:128;10457:351;;;;:::o;10814:147::-;10915:11;10952:3;10937:18;;10814:147;;;;:::o;10967:114::-;;:::o;11087:398::-;11246:3;11267:83;11348:1;11343:3;11267:83;:::i;:::-;11260:90;;11359:93;11448:3;11359:93;:::i;:::-;11477:1;11472:3;11468:11;11461:18;;11087:398;;;:::o;11491:379::-;11675:3;11697:147;11840:3;11697:147;:::i;:::-;11690:154;;11861:3;11854:10;;11491:379;;;:::o;11876:118::-;11963:24;11981:5;11963:24;:::i;:::-;11958:3;11951:37;11876:118;;:::o;12000:442::-;12149:4;12187:2;12176:9;12172:18;12164:26;;12200:71;12268:1;12257:9;12253:17;12244:6;12200:71;:::i;:::-;12281:72;12349:2;12338:9;12334:18;12325:6;12281:72;:::i;:::-;12363;12431:2;12420:9;12416:18;12407:6;12363:72;:::i;:::-;12000:442;;;;;;:::o;12448:172::-;12588:24;12584:1;12576:6;12572:14;12565:48;12448:172;:::o;12626:366::-;12768:3;12789:67;12853:2;12848:3;12789:67;:::i;:::-;12782:74;;12865:93;12954:3;12865:93;:::i;:::-;12983:2;12978:3;12974:12;12967:19;;12626:366;;;:::o;12998:419::-;13164:4;13202:2;13191:9;13187:18;13179:26;;13251:9;13245:4;13241:20;13237:1;13226:9;13222:17;13215:47;13279:131;13405:4;13279:131;:::i;:::-;13271:139;;12998:419;;;:::o;13423:222::-;13516:4;13554:2;13543:9;13539:18;13531:26;;13567:71;13635:1;13624:9;13620:17;13611:6;13567:71;:::i;:::-;13423:222;;;;:::o;13651:332::-;13772:4;13810:2;13799:9;13795:18;13787:26;;13823:71;13891:1;13880:9;13876:17;13867:6;13823:71;:::i;:::-;13904:72;13972:2;13961:9;13957:18;13948:6;13904:72;:::i;:::-;13651:332;;;;;:::o;13989:117::-;14098:1;14095;14088:12;14112:180;14160:77;14157:1;14150:88;14257:4;14254:1;14247:15;14281:4;14278:1;14271:15;14298:281;14381:27;14403:4;14381:27;:::i;:::-;14373:6;14369:40;14511:6;14499:10;14496:22;14475:18;14463:10;14460:34;14457:62;14454:88;;;14522:18;;:::i;:::-;14454:88;14562:10;14558:2;14551:22;14341:238;14298:281;;:::o;14585:129::-;14619:6;14646:20;;:::i;:::-;14636:30;;14675:33;14703:4;14695:6;14675:33;:::i;:::-;14585:129;;;:::o;14720:117::-;14829:1;14826;14819:12;14843:122;14916:24;14934:5;14916:24;:::i;:::-;14909:5;14906:35;14896:63;;14955:1;14952;14945:12;14896:63;14843:122;:::o;14971:139::-;15017:5;15055:6;15042:20;15033:29;;15071:33;15098:5;15071:33;:::i;:::-;14971:139;;;;:::o;15116:117::-;15225:1;15222;15215:12;15239:117;15348:1;15345;15338:12;15362:307;15423:4;15513:18;15505:6;15502:30;15499:56;;;15535:18;;:::i;:::-;15499:56;15573:29;15595:6;15573:29;:::i;:::-;15565:37;;15657:4;15651;15647:15;15639:23;;15362:307;;;:::o;15675:148::-;15773:6;15768:3;15763;15750:30;15814:1;15805:6;15800:3;15796:16;15789:27;15675:148;;;:::o;15829:423::-;15906:5;15931:65;15947:48;15988:6;15947:48;:::i;:::-;15931:65;:::i;:::-;15922:74;;16019:6;16012:5;16005:21;16057:4;16050:5;16046:16;16095:3;16086:6;16081:3;16077:16;16074:25;16071:112;;;16102:79;;:::i;:::-;16071:112;16192:54;16239:6;16234:3;16229;16192:54;:::i;:::-;15912:340;15829:423;;;;;:::o;16271:338::-;16326:5;16375:3;16368:4;16360:6;16356:17;16352:27;16342:122;;16383:79;;:::i;:::-;16342:122;16500:6;16487:20;16525:78;16599:3;16591:6;16584:4;16576:6;16572:17;16525:78;:::i;:::-;16516:87;;16332:277;16271:338;;;;:::o;16615:342::-;16723:4;16813:18;16805:6;16802:30;16799:56;;;16835:18;;:::i;:::-;16799:56;16885:4;16877:6;16873:17;16865:25;;16945:4;16939;16935:15;16927:23;;16615:342;;;:::o;16963:117::-;17072:1;17069;17062:12;17122:583;17202:5;17246:4;17234:9;17229:3;17225:19;17221:30;17218:117;;;17254:79;;:::i;:::-;17218:117;17353:21;17369:4;17353:21;:::i;:::-;17344:30;;17434:1;17474:49;17519:3;17510:6;17499:9;17495:22;17474:49;:::i;:::-;17467:4;17460:5;17456:16;17449:75;17384:151;17596:2;17637:49;17682:3;17673:6;17662:9;17658:22;17637:49;:::i;:::-;17630:4;17623:5;17619:16;17612:75;17545:153;17122:583;;;;:::o;17749:803::-;17876:5;17901:112;17917:95;18005:6;17917:95;:::i;:::-;17901:112;:::i;:::-;17892:121;;18033:5;18062:6;18055:5;18048:21;18096:4;18089:5;18085:16;18078:23;;18149:4;18141:6;18137:17;18129:6;18125:30;18178:3;18170:6;18167:15;18164:122;;;18197:79;;:::i;:::-;18164:122;18312:6;18295:251;18329:6;18324:3;18321:15;18295:251;;;18404:3;18433:68;18497:3;18485:10;18433:68;:::i;:::-;18428:3;18421:81;18531:4;18526:3;18522:14;18515:21;;18371:175;18355:4;18350:3;18346:14;18339:21;;18295:251;;;18299:21;17882:670;;17749:803;;;;;:::o;18596:432::-;18698:5;18747:3;18740:4;18732:6;18728:17;18724:27;18714:122;;18755:79;;:::i;:::-;18714:122;18872:6;18859:20;18897:125;19018:3;19010:6;19003:4;18995:6;18991:17;18897:125;:::i;:::-;18888:134;;18704:324;18596:432;;;;:::o;19070:1651::-;19150:5;19194:4;19182:9;19177:3;19173:19;19169:30;19166:117;;;19202:79;;:::i;:::-;19166:117;19301:21;19317:4;19301:21;:::i;:::-;19292:30;;19386:1;19426:49;19471:3;19462:6;19451:9;19447:22;19426:49;:::i;:::-;19419:4;19412:5;19408:16;19401:75;19332:155;19561:2;19602:48;19646:3;19637:6;19626:9;19622:22;19602:48;:::i;:::-;19595:4;19588:5;19584:16;19577:74;19497:165;19751:2;19740:9;19736:18;19723:32;19782:18;19774:6;19771:30;19768:117;;;19804:79;;:::i;:::-;19768:117;19924:58;19978:3;19969:6;19958:9;19954:22;19924:58;:::i;:::-;19917:4;19910:5;19906:16;19899:84;19672:322;20081:2;20070:9;20066:18;20053:32;20112:18;20104:6;20101:30;20098:117;;;20134:79;;:::i;:::-;20098:117;20254:58;20308:3;20299:6;20288:9;20284:22;20254:58;:::i;:::-;20247:4;20240:5;20236:16;20229:84;20004:320;20423:3;20412:9;20408:19;20395:33;20455:18;20447:6;20444:30;20441:117;;;20477:79;;:::i;:::-;20441:117;20597:105;20698:3;20689:6;20678:9;20674:22;20597:105;:::i;:::-;20590:4;20583:5;20579:16;20572:131;20334:380;19070:1651;;;;:::o;20727:229::-;20841:9;20875:74;20934:14;20927:5;20875:74;:::i;:::-;20862:87;;20727:229;;;:::o;20962:172::-;21102:24;21098:1;21090:6;21086:14;21079:48;20962:172;:::o;21140:366::-;21282:3;21303:67;21367:2;21362:3;21303:67;:::i;:::-;21296:74;;21379:93;21468:3;21379:93;:::i;:::-;21497:2;21492:3;21488:12;21481:19;;21140:366;;;:::o;21512:419::-;21678:4;21716:2;21705:9;21701:18;21693:26;;21765:9;21759:4;21755:20;21751:1;21740:9;21736:17;21729:47;21793:131;21919:4;21793:131;:::i;:::-;21785:139;;21512:419;;;:::o;21937:332::-;22058:4;22096:2;22085:9;22081:18;22073:26;;22109:71;22177:1;22166:9;22162:17;22153:6;22109:71;:::i;:::-;22190:72;22258:2;22247:9;22243:18;22234:6;22190:72;:::i;:::-;21937:332;;;;;:::o;22275:143::-;22332:5;22363:6;22357:13;22348:22;;22379:33;22406:5;22379:33;:::i;:::-;22275:143;;;;:::o;22424:351::-;22494:6;22543:2;22531:9;22522:7;22518:23;22514:32;22511:119;;;22549:79;;:::i;:::-;22511:119;22669:1;22694:64;22750:7;22741:6;22730:9;22726:22;22694:64;:::i;:::-;22684:74;;22640:128;22424:351;;;;:::o;22781:115::-;22866:23;22883:5;22866:23;:::i;:::-;22861:3;22854:36;22781:115;;:::o;22902:98::-;22953:6;22987:5;22981:12;22971:22;;22902:98;;;:::o;23006:158::-;23079:11;23113:6;23108:3;23101:19;23153:4;23148:3;23144:14;23129:29;;23006:158;;;;:::o;23170:353::-;23246:3;23274:38;23306:5;23274:38;:::i;:::-;23328:60;23381:6;23376:3;23328:60;:::i;:::-;23321:67;;23397:65;23455:6;23450:3;23443:4;23436:5;23432:16;23397:65;:::i;:::-;23487:29;23509:6;23487:29;:::i;:::-;23482:3;23478:39;23471:46;;23250:273;23170:353;;;;:::o;23529:145::-;23627:6;23661:5;23655:12;23645:22;;23529:145;;;:::o;23680:205::-;23800:11;23834:6;23829:3;23822:19;23874:4;23869:3;23865:14;23850:29;;23680:205;;;;:::o;23891:163::-;23989:4;24012:3;24004:11;;24042:4;24037:3;24033:14;24025:22;;23891:163;;;:::o;24060:108::-;24137:24;24155:5;24137:24;:::i;:::-;24132:3;24125:37;24060:108;;:::o;24174:::-;24251:24;24269:5;24251:24;:::i;:::-;24246:3;24239:37;24174:108;;:::o;24356:512::-;24505:4;24500:3;24496:14;24593:4;24586:5;24582:16;24576:23;24612:63;24669:4;24664:3;24660:14;24646:12;24612:63;:::i;:::-;24520:165;24769:4;24762:5;24758:16;24752:23;24788:63;24845:4;24840:3;24836:14;24822:12;24788:63;:::i;:::-;24695:166;24474:394;24356:512;;:::o;24874:303::-;25005:10;25026:108;25130:3;25122:6;25026:108;:::i;:::-;25166:4;25161:3;25157:14;25143:28;;24874:303;;;;:::o;25183:144::-;25284:4;25316;25311:3;25307:14;25299:22;;25183:144;;;:::o;25405:960::-;25576:3;25605:85;25684:5;25605:85;:::i;:::-;25706:107;25806:6;25801:3;25706:107;:::i;:::-;25699:114;;25837:87;25918:5;25837:87;:::i;:::-;25947:7;25978:1;25963:377;25988:6;25985:1;25982:13;25963:377;;;26064:6;26058:13;26091:125;26212:3;26197:13;26091:125;:::i;:::-;26084:132;;26239:91;26323:6;26239:91;:::i;:::-;26229:101;;26023:317;26010:1;26007;26003:9;25998:14;;25963:377;;;25967:14;26356:3;26349:10;;25581:784;;;25405:960;;;;:::o;26439:1460::-;26570:3;26606:4;26601:3;26597:14;26697:4;26690:5;26686:16;26680:23;26750:3;26744:4;26740:14;26733:4;26728:3;26724:14;26717:38;26776:71;26842:4;26828:12;26776:71;:::i;:::-;26768:79;;26621:237;26940:4;26933:5;26929:16;26923:23;26993:3;26987:4;26983:14;26976:4;26971:3;26967:14;26960:38;27019:71;27085:4;27071:12;27019:71;:::i;:::-;27011:79;;26868:233;27191:4;27184:5;27180:16;27174:23;27244:3;27238:4;27234:14;27227:4;27222:3;27218:14;27211:38;27270:165;27430:4;27416:12;27270:165;:::i;:::-;27262:173;;27111:335;27532:4;27525:5;27521:16;27515:23;27551:63;27608:4;27603:3;27599:14;27585:12;27551:63;:::i;:::-;27456:168;27711:4;27704:5;27700:16;27694:23;27764:3;27758:4;27754:14;27747:4;27742:3;27738:14;27731:38;27790:71;27856:4;27842:12;27790:71;:::i;:::-;27782:79;;27634:238;27889:4;27882:11;;26575:1324;26439:1460;;;;:::o;27905:503::-;28086:4;28124:2;28113:9;28109:18;28101:26;;28137:69;28203:1;28192:9;28188:17;28179:6;28137:69;:::i;:::-;28253:9;28247:4;28243:20;28238:2;28227:9;28223:18;28216:48;28281:120;28396:4;28387:6;28281:120;:::i;:::-;28273:128;;27905:503;;;;;:::o;28414:332::-;28535:4;28573:2;28562:9;28558:18;28550:26;;28586:71;28654:1;28643:9;28639:17;28630:6;28586:71;:::i;:::-;28667:72;28735:2;28724:9;28720:18;28711:6;28667:72;:::i;:::-;28414:332;;;;;:::o;28752:137::-;28806:5;28837:6;28831:13;28822:22;;28853:30;28877:5;28853:30;:::i;:::-;28752:137;;;;:::o;28895:345::-;28962:6;29011:2;28999:9;28990:7;28986:23;28982:32;28979:119;;;29017:79;;:::i;:::-;28979:119;29137:1;29162:61;29215:7;29206:6;29195:9;29191:22;29162:61;:::i;:::-;29152:71;;29108:125;28895:345;;;;:::o;29246:143::-;29303:5;29334:6;29328:13;29319:22;;29350:33;29377:5;29350:33;:::i;:::-;29246:143;;;;:::o;29395:351::-;29465:6;29514:2;29502:9;29493:7;29489:23;29485:32;29482:119;;;29520:79;;:::i;:::-;29482:119;29640:1;29665:64;29721:7;29712:6;29701:9;29697:22;29665:64;:::i;:::-;29655:74;;29611:128;29395:351;;;;:::o;29752:168::-;29835:11;29869:6;29864:3;29857:19;29909:4;29904:3;29900:14;29885:29;;29752:168;;;;:::o;29926:373::-;30012:3;30040:38;30072:5;30040:38;:::i;:::-;30094:70;30157:6;30152:3;30094:70;:::i;:::-;30087:77;;30173:65;30231:6;30226:3;30219:4;30212:5;30208:16;30173:65;:::i;:::-;30263:29;30285:6;30263:29;:::i;:::-;30258:3;30254:39;30247:46;;30016:283;29926:373;;;;:::o;30305:640::-;30500:4;30538:3;30527:9;30523:19;30515:27;;30552:71;30620:1;30609:9;30605:17;30596:6;30552:71;:::i;:::-;30670:9;30664:4;30660:20;30655:2;30644:9;30640:18;30633:48;30698:76;30769:4;30760:6;30698:76;:::i;:::-;30690:84;;30784:72;30852:2;30841:9;30837:18;30828:6;30784:72;:::i;:::-;30866;30934:2;30923:9;30919:18;30910:6;30866:72;:::i;:::-;30305:640;;;;;;;:::o;30996:618::-;31085:5;31129:4;31117:9;31112:3;31108:19;31104:30;31101:117;;;31137:79;;:::i;:::-;31101:117;31236:21;31252:4;31236:21;:::i;:::-;31227:30;;31319:1;31359:60;31415:3;31406:6;31395:9;31391:22;31359:60;:::i;:::-;31352:4;31345:5;31341:16;31334:86;31267:164;31494:2;31535:60;31591:3;31582:6;31571:9;31567:22;31535:60;:::i;:::-;31528:4;31521:5;31517:16;31510:86;31441:166;30996:618;;;;:::o;31620:409::-;31719:6;31768:2;31756:9;31747:7;31743:23;31739:32;31736:119;;;31774:79;;:::i;:::-;31736:119;31894:1;31919:93;32004:7;31995:6;31984:9;31980:22;31919:93;:::i;:::-;31909:103;;31865:157;31620:409;;;;:::o;32035:173::-;32175:25;32171:1;32163:6;32159:14;32152:49;32035:173;:::o;32214:366::-;32356:3;32377:67;32441:2;32436:3;32377:67;:::i;:::-;32370:74;;32453:93;32542:3;32453:93;:::i;:::-;32571:2;32566:3;32562:12;32555:19;;32214:366;;;:::o;32586:419::-;32752:4;32790:2;32779:9;32775:18;32767:26;;32839:9;32833:4;32829:20;32825:1;32814:9;32810:17;32803:47;32867:131;32993:4;32867:131;:::i;:::-;32859:139;;32586:419;;;:::o;33011:229::-;33151:34;33147:1;33139:6;33135:14;33128:58;33220:12;33215:2;33207:6;33203:15;33196:37;33011:229;:::o;33246:366::-;33388:3;33409:67;33473:2;33468:3;33409:67;:::i;:::-;33402:74;;33485:93;33574:3;33485:93;:::i;:::-;33603:2;33598:3;33594:12;33587:19;;33246:366;;;:::o;33618:419::-;33784:4;33822:2;33811:9;33807:18;33799:26;;33871:9;33865:4;33861:20;33857:1;33846:9;33842:17;33835:47;33899:131;34025:4;33899:131;:::i;:::-;33891:139;;33618:419;;;:::o;34111:349::-;34270:4;34265:3;34261:14;34361:4;34354:5;34350:16;34344:23;34380:63;34437:4;34432:3;34428:14;34414:12;34380:63;:::i;:::-;34285:168;34239:221;34111:349;;:::o;34466:346::-;34621:4;34659:2;34648:9;34644:18;34636:26;;34672:133;34802:1;34791:9;34787:17;34778:6;34672:133;:::i;:::-;34466:346;;;;:::o;34818:225::-;34958:34;34954:1;34946:6;34942:14;34935:58;35027:8;35022:2;35014:6;35010:15;35003:33;34818:225;:::o;35049:366::-;35191:3;35212:67;35276:2;35271:3;35212:67;:::i;:::-;35205:74;;35288:93;35377:3;35288:93;:::i;:::-;35406:2;35401:3;35397:12;35390:19;;35049:366;;;:::o;35421:419::-;35587:4;35625:2;35614:9;35610:18;35602:26;;35674:9;35668:4;35664:20;35660:1;35649:9;35645:17;35638:47;35702:131;35828:4;35702:131;:::i;:::-;35694:139;;35421:419;;;:::o;35846:386::-;35950:3;35978:38;36010:5;35978:38;:::i;:::-;36032:88;36113:6;36108:3;36032:88;:::i;:::-;36025:95;;36129:65;36187:6;36182:3;36175:4;36168:5;36164:16;36129:65;:::i;:::-;36219:6;36214:3;36210:16;36203:23;;35954:278;35846:386;;;;:::o;36238:271::-;36368:3;36390:93;36479:3;36470:6;36390:93;:::i;:::-;36383:100;;36500:3;36493:10;;36238:271;;;;:::o;36515:179::-;36655:31;36651:1;36643:6;36639:14;36632:55;36515:179;:::o;36700:366::-;36842:3;36863:67;36927:2;36922:3;36863:67;:::i;:::-;36856:74;;36939:93;37028:3;36939:93;:::i;:::-;37057:2;37052:3;37048:12;37041:19;;36700:366;;;:::o;37072:419::-;37238:4;37276:2;37265:9;37261:18;37253:26;;37325:9;37319:4;37315:20;37311:1;37300:9;37296:17;37289:47;37353:131;37479:4;37353:131;:::i;:::-;37345:139;;37072:419;;;:::o;37497:313::-;37610:4;37648:2;37637:9;37633:18;37625:26;;37697:9;37691:4;37687:20;37683:1;37672:9;37668:17;37661:47;37725:78;37798:4;37789:6;37725:78;:::i;:::-;37717:86;;37497:313;;;;:::o"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "2176400",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "acceptOwnership()": "54629",
            "allowlistDestinationChain(uint64,bool)": "27228",
            "allowlistSender(address,bool)": "27270",
            "allowlistSourceChain(uint64,bool)": "27205",
            "allowlistedDestinationChains(uint64)": "2869",
            "allowlistedSenders(address)": "2890",
            "allowlistedSourceChains(uint64)": "2892",
            "burnAndMint(uint256,address,uint64,address)": "infinite",
            "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": "infinite",
            "getLastReceivedMessageDetails()": "infinite",
            "getRouter()": "infinite",
            "owner()": "2589",
            "supportsInterface(bytes4)": "708",
            "transferOwnership(address)": "30764",
            "withdraw(address)": "infinite",
            "withdrawToken(address,address)": "infinite",
            "wnft()": "infinite"
          },
          "internal": {
            "_buildCCIPMessage(address,bytes memory,address)": "infinite",
            "_ccipReceive(struct Client.Any2EVMMessage memory)": "infinite",
            "sendMessagePayLINK(uint64,address,bytes memory)": "infinite"
          }
        },
        "methodIdentifiers": {
          "acceptOwnership()": "79ba5097",
          "allowlistDestinationChain(uint64,bool)": "96d3b83d",
          "allowlistSender(address,bool)": "eab5b02c",
          "allowlistSourceChain(uint64,bool)": "db04fa49",
          "allowlistedDestinationChains(uint64)": "75c67c66",
          "allowlistedSenders(address)": "6159ada1",
          "allowlistedSourceChains(uint64)": "4030d521",
          "burnAndMint(uint256,address,uint64,address)": "7a6ee0cd",
          "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": "85572ffb",
          "getLastReceivedMessageDetails()": "263596a5",
          "getRouter()": "b0f479a1",
          "owner()": "8da5cb5b",
          "supportsInterface(bytes4)": "01ffc9a7",
          "transferOwnership(address)": "f2fde38b",
          "withdraw(address)": "51cff8d9",
          "withdrawToken(address,address)": "3aeac4e1",
          "wnft()": "9c046b1b"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wnftAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FailedToWithdrawEth\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calculatedFees\",\"type\":\"uint256\"}],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToWithdraw\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"text\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"name\":\"TokenBurnedAndSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowlistDestinationChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowlistSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"allowlistSourceChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"allowlistedDestinationChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowlistedSenders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"allowlistedSourceChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"burnAndMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastReceivedMessageDetails\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"text\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wnft\",\"outputs\":[{\"internalType\":\"contract WrappedNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowlistDestinationChain(uint64,bool)\":{\"details\":\"Updates the allowlist status of a destination chain for transactions.\"},\"allowlistSender(address,bool)\":{\"details\":\"Updates the allowlist status of a sender for transactions.\"},\"allowlistSourceChain(uint64,bool)\":{\"details\":\"Updates the allowlist status of a source chain for transactions.\"},\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"details\":\"Note ensure you check the msg.sender is the OffRampRouter\",\"params\":{\"message\":\"CCIP Message\"}},\"constructor\":{\"params\":{\"_link\":\"The address of the link contract.\",\"_router\":\"The address of the router contract.\"}},\"getLastReceivedMessageDetails()\":{\"returns\":{\"messageId\":\"The ID of the last received message.\",\"text\":\"The last received text.\"}},\"getRouter()\":{\"returns\":{\"_0\":\"CCIP router address\"}},\"supportsInterface(bytes4)\":{\"details\":\"Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\",\"params\":{\"interfaceId\":\"The interfaceId to check\"},\"returns\":{\"_0\":\"true if the interfaceId is supported\"}},\"withdraw(address)\":{\"details\":\"This function reverts if there are no funds to withdraw or if the transfer fails. It should only be callable by the owner of the contract.\",\"params\":{\"_beneficiary\":\"The address to which the Ether should be sent.\"}},\"withdrawToken(address,address)\":{\"details\":\"This function reverts with a 'NothingToWithdraw' error if there are no tokens to withdraw.\",\"params\":{\"_beneficiary\":\"The address to which the tokens will be sent.\",\"_token\":\"The contract address of the ERC20 token to be withdrawn.\"}}},\"title\":\"- A simple messenger contract for sending/receiving string data across chains.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"notice\":\"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution.\"},\"constructor\":{\"notice\":\"Constructor initializes the contract with the router address.\"},\"getLastReceivedMessageDetails()\":{\"notice\":\"Fetches the details of the last received message.\"},\"getRouter()\":{\"notice\":\"Return the current router\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165 supports an interfaceId\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"},\"withdraw(address)\":{\"notice\":\"Allows the contract owner to withdraw the entire balance of Ether from the contract.\"},\"withdrawToken(address,address)\":{\"notice\":\"Allows the owner of the contract to withdraw all tokens of a specific ERC20 token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFTPoolBurnAndMint.sol\":\"NFTPoolBurnAndMint\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_ccipRouter;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_ccipRouter = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\\n  /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\\n  /// This allows CCIP to check if ccipReceive is available before calling it.\\n  /// If this returns false or reverts, only tokens are transferred to the receiver.\\n  /// If this returns true, tokens are transferred and ccipReceive is called atomically.\\n  /// Additionally, if the receiver address does not have code associated with\\n  /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return CCIP router address\\n  function getRouter() public view virtual returns (address) {\\n    return address(i_ccipRouter);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != getRouter()) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x846fbf21ac7bc86c8e4aa0b3dc126126536cc414d3bb99c1fed747ce99f9f40c\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\",\"keccak256\":\"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param destChainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 destChainSelector) external view returns (bool supported);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x176bc6a1bec19d76464566d4becb68946e4c53b779e2019b34f95be4fee571f6\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV2)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV2\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V2_TAG = 0x181dcf10;\\n\\n  /// @param gasLimit: gas limit for the callback on the destination chain.\\n  /// @param allowOutOfOrderExecution: if true, it indicates that the message can be executed in any order relative to other messages from the same sender.\\n  /// This value's default varies by chain. On some chains, a particular value is enforced, meaning if the expected value\\n  /// is not set, the message request will revert.\\n  struct EVMExtraArgsV2 {\\n    uint256 gasLimit;\\n    bool allowOutOfOrderExecution;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV2 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V2_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0xa1ce70adec733c80b230084b425a50caa852a99f17a7e43e38a96a975f11ce88\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwner} from \\\"./ConfirmedOwner.sol\\\";\\n\\n/// @title The OwnerIsCreator contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract OwnerIsCreator is ConfirmedOwner {\\n  constructor() ConfirmedOwner(msg.sender) {}\\n}\\n\",\"keccak256\":\"0x895af02d6a3df2930bbb6ec1f2d68118b492ca6e710ba0c34fcb6b574a0906aa\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x527e858729af8197f6c8f99554d32bfc4f5a72b15975489c94809363d7ae522f\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n   * given ``owner``'s signed approval.\\n   *\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n   * ordering also apply here.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `deadline` must be a timestamp in the future.\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n   * over the EIP712-formatted function arguments.\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\n   *\\n   * For more information on the signature format, see the\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n   * section].\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n   * included whenever a signature is generated for {permit}.\\n   *\\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n   * prevents a signature from being used multiple times.\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x28d267ba89cbaca4a86577add59f1a18842ca6e7d80a05f3dbf52127928a5e2c\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IERC20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    unchecked {\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\n      require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n      uint256 newAllowance = oldAllowance - value;\\n      _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n  }\\n\\n  function safePermit(\\n    IERC20Permit token,\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    uint256 nonceBefore = token.nonces(owner);\\n    token.permit(owner, spender, value, deadline, v, r, s);\\n    uint256 nonceAfter = token.nonces(owner);\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x19d64e8f5fa895ab2625917111fd9f316d4f9314239f0712fd6dc2f5bff9d0c9\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n   * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n   *\\n   * _Available since v4.8._\\n   */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason or using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x172a09a55d730f20a9bb309086a4ad06b17c612151f58bab2b44efe78d583d4e\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title ERC-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x1b8691e244f6e11d987459993671db0af33e6a29f7805eac6a9925cc6b601957\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {ERC721Utils} from \\\"./utils/ERC721Utils.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if:\\n     * - `spender` does not have approval from `owner` for `tokenId`.\\n     * - `spender` does not have approval to manage all of `owner`'s assets.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n}\\n\",\"keccak256\":\"0x39ed367e54765186281efcfe83e47cf0ad62cc879f10e191360712507125f29a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC-721 Burnable Token\\n * @dev ERC-721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        _update(address(0), tokenId, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdee1ff07172e443c6600581fc4f11e7830a6d33e4e551752935b835d52a09404\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"./IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the ERC that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: {ERC721} extensions that implement custom `balanceOf` logic, such as {ERC721Consecutive},\\n * interfere with enumerability and should not be used together with {ERC721Enumerable}.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\\n\\n    uint256[] private _allTokens;\\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = balanceOf(to) - 1;\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        mapping(uint256 index => uint256) storage _ownedTokensByOwner = _ownedTokens[from];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokensByOwner[lastTokenIndex];\\n\\n            _ownedTokensByOwner[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokensByOwner[lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5191f783af281c75b7de0f1e3e36cdc6ac5cb2358d929584c4953fd02fa2b5eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC-721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xe52813067c6d5838eeb34e1da8beb2514371a7d778266013b04ca3be1dda7100\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/utils/ERC721Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\nimport {IERC721Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-721 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC721Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721-onERC721Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    // Token rejected\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC721Receiver implementer\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40399695922383778f9f540a620bec475a2f8e0f08d41f0005682842e28a9855\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x725209b582291bb83058e3078624b53d15a133f7401c30295e7f3704181d2aed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/MyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.28;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {ERC721Burnable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport {ERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport {ERC721URIStorage} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MyToken is\\n    ERC721,\\n    ERC721Enumerable,\\n    ERC721URIStorage,\\n    ERC721Burnable,\\n    Ownable\\n{\\n    uint256 private _nextTokenId;\\n\\n    string constant META_DATA =\\n        \\\"ipfs://QmZta2Du9hWY5Ek6Vty1hi6V7bevvrP3k61yYoEqkrMgbM\\\";\\n\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) ERC721(tokenName, tokenSymbol) Ownable(msg.sender) {}\\n\\n    function safeMint(address to) public {\\n        uint256 tokenId = _nextTokenId++;\\n        _safeMint(to, tokenId);\\n        _setTokenURI(tokenId, META_DATA);\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function _update(\\n        address to,\\n        uint256 tokenId,\\n        address auth\\n    ) internal override(ERC721, ERC721Enumerable) returns (address) {\\n        return super._update(to, tokenId, auth);\\n    }\\n\\n    function _increaseBalance(\\n        address account,\\n        uint128 value\\n    ) internal override(ERC721, ERC721Enumerable) {\\n        super._increaseBalance(account, value);\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable, ERC721URIStorage)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x9d7633883558652a8c9cebf7b14418000f030a945b3fa5f8320565ed91802da2\",\"license\":\"MIT\"},\"contracts/NFTPoolBurnAndMint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport {OwnerIsCreator} from \\\"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol\\\";\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport {CCIPReceiver} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\nimport {IERC20} from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {WrappedNFT} from \\\"./WrappedNFT.sol\\\";\\n\\n/**\\n * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.\\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\\n * DO NOT USE THIS CODE IN PRODUCTION.\\n */\\n\\n/// @title - A simple messenger contract for sending/receiving string data across chains.\\ncontract NFTPoolBurnAndMint is CCIPReceiver, OwnerIsCreator {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom errors to provide more descriptive revert messages.\\n    error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees); // Used to make sure contract has enough balance.\\n    error NothingToWithdraw(); // Used when trying to withdraw Ether but there's nothing to withdraw.\\n    error FailedToWithdrawEth(address owner, address target, uint256 value); // Used when the withdrawal of Ether fails.\\n\\n    // Event emitted when a message is sent to another chain.\\n    event TokenBurnedAndSent(\\n        bytes32 indexed messageId, // The unique ID of the CCIP message.\\n        uint64 indexed destinationChainSelector, // The chain selector of the destination chain.\\n        address receiver, // The address of the receiver on the destination chain.\\n        bytes text, // The text being sent.\\n        address feeToken, // the token address used to pay CCIP fees.\\n        uint256 fees // The fees paid for sending the CCIP message.\\n    );\\n\\n    // Event emitted when a message is received from another chain.\\n    // event MessageReceived(\\n    //     bytes32 indexed messageId, // The unique ID of the CCIP message.\\n    //     uint64 indexed sourceChainSelector, // The chain selector of the source chain.\\n    //     address sender, // The address of the sender from the source chain.\\n    //     string text // The text that was received.\\n    // );\\n\\n    struct RequestData{\\n        uint256 tokenId;\\n        address newOwner;\\n    }\\n\\n    bytes32 private s_lastReceivedMessageId; // Store the last received messageId.\\n    string private s_lastReceivedText; // Store the last received text.\\n\\n    // Mapping to keep track of allowlisted destination chains.\\n    mapping(uint64 => bool) public allowlistedDestinationChains;\\n\\n    // Mapping to keep track of allowlisted source chains.\\n    mapping(uint64 => bool) public allowlistedSourceChains;\\n\\n    // Mapping to keep track of allowlisted senders.\\n    mapping(address => bool) public allowlistedSenders;\\n\\n    IERC20 private s_linkToken;\\n\\n    WrappedNFT public wnft;\\n\\n    /// @notice Constructor initializes the contract with the router address.\\n    /// @param _router The address of the router contract.\\n    /// @param _link The address of the link contract.\\n    constructor(address _router, address _link, address wnftAddr) CCIPReceiver(_router) {\\n        wnft = WrappedNFT(wnftAddr);\\n        s_linkToken = IERC20(_link);\\n    }\\n\\n    /// @dev Updates the allowlist status of a destination chain for transactions.\\n    function allowlistDestinationChain(\\n        uint64 _destinationChainSelector,\\n        bool allowed\\n    ) external onlyOwner {\\n        allowlistedDestinationChains[_destinationChainSelector] = allowed;\\n    }\\n\\n    /// @dev Updates the allowlist status of a source chain for transactions.\\n    function allowlistSourceChain(\\n        uint64 _sourceChainSelector,\\n        bool allowed\\n    ) external onlyOwner {\\n        allowlistedSourceChains[_sourceChainSelector] = allowed;\\n    }\\n\\n    /// @dev Updates the allowlist status of a sender for transactions.\\n    function allowlistSender(address _sender, bool allowed) external onlyOwner {\\n        allowlistedSenders[_sender] = allowed;\\n    }\\n\\n    function burnAndMint(\\n        uint256 _tokenId,\\n        address newOwner,\\n        uint64 destChainSelector,\\n        address receiver) public {\\n        // verify if the sender is the owner of NFT\\n        // comment this because the check is already performed by ERC721\\n        // require(wnft.ownerOf(_tokenId) == msg.sender, \\\"you are not the owner of the NFT\\\");\\n\\n        // transfer NFT to the pool\\n        wnft.transferFrom(msg.sender, address(this), _tokenId);\\n        // burn the NFT\\n        wnft.burn(_tokenId);\\n        // send transaction to the destination chain\\n        bytes memory payload = abi.encode(_tokenId, newOwner);\\n        sendMessagePayLINK(destChainSelector, receiver, payload);\\n    }\\n\\n\\n    /// @notice Sends data to receiver on the destination chain.\\n    /// @notice Pay for fees in LINK.\\n    /// @dev Assumes your contract has sufficient LINK.\\n    /// @param _destinationChainSelector The identifier (aka selector) for the destination blockchain.\\n    /// @param _receiver The address of the recipient on the destination blockchain.\\n    /// @param _payload The data to be sent.\\n    /// @return messageId The ID of the CCIP message that was sent.\\n    function sendMessagePayLINK(\\n        uint64 _destinationChainSelector,\\n        address _receiver,\\n        bytes memory _payload\\n    )\\n    internal\\n    onlyOwner\\n    returns (bytes32 messageId)\\n    {\\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\n        Client.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(\\n            _receiver,\\n            _payload,\\n            address(s_linkToken)\\n        );\\n\\n        // Initialize a router client instance to interact with cross-chain router\\n        IRouterClient router = IRouterClient(this.getRouter());\\n\\n        // Get the fee required to send the CCIP message\\n        uint256 fees = router.getFee(_destinationChainSelector, evm2AnyMessage);\\n\\n        if (fees > s_linkToken.balanceOf(address(this)))\\n            revert NotEnoughBalance(s_linkToken.balanceOf(address(this)), fees);\\n\\n        // approve the Router to transfer LINK tokens on contract's behalf. It will spend the fees in LINK\\n        s_linkToken.approve(address(router), fees);\\n\\n        // Send the CCIP message through the router and store the returned CCIP message ID\\n        messageId = router.ccipSend(_destinationChainSelector, evm2AnyMessage);\\n\\n        // Emit an event with message details\\n        emit TokenBurnedAndSent(\\n            messageId,\\n            _destinationChainSelector,\\n            _receiver,\\n            _payload,\\n            address(s_linkToken),\\n            fees\\n        );\\n\\n        // Return the CCIP message ID\\n        return messageId;\\n    }\\n\\n    /// handle a received message\\n    function _ccipReceive(\\n        Client.Any2EVMMessage memory any2EvmMessage\\n    )\\n    internal\\n    override\\n    {\\n        RequestData memory reqData = abi.decode(any2EvmMessage.data, (RequestData));\\n        address newOwner = reqData.newOwner;\\n        uint256 tokenId = reqData.tokenId;\\n\\n        // mint a wrappedToken\\n        wnft.mintWithSpecificTokenId(newOwner, tokenId);\\n\\n        // emit MessageReceived(\\n        //     any2EvmMessage.messageId,\\n        //     any2EvmMessage.sourceChainSelector, // fetch the source chain identifier (aka selector)\\n        //     abi.decode(any2EvmMessage.sender, (address)), // abi-decoding of the sender address,\\n        //     abi.decode(any2EvmMessage.data, (string))\\n        // );\\n    }\\n\\n    /// @notice Construct a CCIP message.\\n    /// @dev This function will create an EVM2AnyMessage struct with all the necessary information for sending a text.\\n    /// @param _receiver The address of the receiver.\\n    /// @param _payload The string data to be sent.\\n    /// @param _feeTokenAddress The address of the token used for fees. Set address(0) for native gas.\\n    /// @return Client.EVM2AnyMessage Returns an EVM2AnyMessage struct which contains information for sending a CCIP message.\\n    function _buildCCIPMessage(\\n        address _receiver,\\n        bytes memory _payload,\\n        address _feeTokenAddress\\n    ) private pure returns (Client.EVM2AnyMessage memory) {\\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\n        return\\n            Client.EVM2AnyMessage({\\n            receiver: abi.encode(_receiver), // ABI-encoded receiver address\\n            data: _payload, // ABI-encoded string\\n            tokenAmounts: new Client.EVMTokenAmount[](0), // Empty array aas no tokens are transferred\\n            extraArgs: Client._argsToBytes(\\n        // Additional arguments, setting gas limit\\n                Client.EVMExtraArgsV1({gasLimit: 200_000})\\n            ),\\n        // Set the feeToken to a feeTokenAddress, indicating specific asset will be used for fees\\n            feeToken: _feeTokenAddress\\n        });\\n    }\\n\\n    /// @notice Fetches the details of the last received message.\\n    /// @return messageId The ID of the last received message.\\n    /// @return text The last received text.\\n    function getLastReceivedMessageDetails()\\n    external\\n    view\\n    returns (bytes32 messageId, string memory text)\\n    {\\n        return (s_lastReceivedMessageId, s_lastReceivedText);\\n    }\\n\\n    /// @notice Fallback function to allow the contract to receive Ether.\\n    /// @dev This function has no function body, making it a default function for receiving Ether.\\n    /// It is automatically called when Ether is sent to the contract without any data.\\n    receive() external payable {}\\n\\n    /// @notice Allows the contract owner to withdraw the entire balance of Ether from the contract.\\n    /// @dev This function reverts if there are no funds to withdraw or if the transfer fails.\\n    /// It should only be callable by the owner of the contract.\\n    /// @param _beneficiary The address to which the Ether should be sent.\\n    function withdraw(address _beneficiary) public onlyOwner {\\n        // Retrieve the balance of this contract\\n        uint256 amount = address(this).balance;\\n\\n        // Revert if there is nothing to withdraw\\n        if (amount == 0) revert NothingToWithdraw();\\n\\n        // Attempt to send the funds, capturing the success status and discarding any return data\\n        (bool sent, ) = _beneficiary.call{value: amount}(\\\"\\\");\\n\\n        // Revert if the send failed, with information about the attempted transfer\\n        if (!sent) revert FailedToWithdrawEth(msg.sender, _beneficiary, amount);\\n    }\\n\\n    /// @notice Allows the owner of the contract to withdraw all tokens of a specific ERC20 token.\\n    /// @dev This function reverts with a 'NothingToWithdraw' error if there are no tokens to withdraw.\\n    /// @param _beneficiary The address to which the tokens will be sent.\\n    /// @param _token The contract address of the ERC20 token to be withdrawn.\\n    function withdrawToken(\\n        address _beneficiary,\\n        address _token\\n    ) public onlyOwner {\\n        // Retrieve the balance of this contract\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n\\n        // Revert if there is nothing to withdraw\\n        if (amount == 0) revert NothingToWithdraw();\\n\\n        IERC20(_token).safeTransfer(_beneficiary, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5b967238ed99eb43c5a887f7e0479078e8c3101848fa7ca48bcd5f33dd94c6d0\",\"license\":\"MIT\"},\"contracts/WrappedNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.28;\\n\\nimport {MyToken} from \\\"./MyToken.sol\\\";\\n\\ncontract WrappedNFT is MyToken {\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) MyToken(tokenName, tokenSymbol) {}\\n\\n    function mintWithSpecificTokenId(address to, uint256 tokenId) public {\\n        _safeMint(to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xd5389cfe99083e250973e04537da33c79917bf115adcbc0cc302f56586edfc14\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 283,
            "contract": "contracts/NFTPoolBurnAndMint.sol:NFTPoolBurnAndMint",
            "label": "s_owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 285,
            "contract": "contracts/NFTPoolBurnAndMint.sol:NFTPoolBurnAndMint",
            "label": "s_pendingOwner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7446,
            "contract": "contracts/NFTPoolBurnAndMint.sol:NFTPoolBurnAndMint",
            "label": "s_lastReceivedMessageId",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 7448,
            "contract": "contracts/NFTPoolBurnAndMint.sol:NFTPoolBurnAndMint",
            "label": "s_lastReceivedText",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 7452,
            "contract": "contracts/NFTPoolBurnAndMint.sol:NFTPoolBurnAndMint",
            "label": "allowlistedDestinationChains",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint64,t_bool)"
          },
          {
            "astId": 7456,
            "contract": "contracts/NFTPoolBurnAndMint.sol:NFTPoolBurnAndMint",
            "label": "allowlistedSourceChains",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint64,t_bool)"
          },
          {
            "astId": 7460,
            "contract": "contracts/NFTPoolBurnAndMint.sol:NFTPoolBurnAndMint",
            "label": "allowlistedSenders",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 7463,
            "contract": "contracts/NFTPoolBurnAndMint.sol:NFTPoolBurnAndMint",
            "label": "s_linkToken",
            "offset": 0,
            "slot": "7",
            "type": "t_contract(IERC20)547"
          },
          {
            "astId": 7466,
            "contract": "contracts/NFTPoolBurnAndMint.sol:NFTPoolBurnAndMint",
            "label": "wnft",
            "offset": 0,
            "slot": "8",
            "type": "t_contract(WrappedNFT)7892"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(IERC20)547": {
            "encoding": "inplace",
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_contract(WrappedNFT)7892": {
            "encoding": "inplace",
            "label": "contract WrappedNFT",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_uint64,t_bool)": {
            "encoding": "mapping",
            "key": "t_uint64",
            "label": "mapping(uint64 => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint64": {
            "encoding": "inplace",
            "label": "uint64",
            "numberOfBytes": "8"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "acceptOwnership()": {
            "notice": "Allows an ownership transfer to be completed by the recipient."
          },
          "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
            "notice": "Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution."
          },
          "constructor": {
            "notice": "Constructor initializes the contract with the router address."
          },
          "getLastReceivedMessageDetails()": {
            "notice": "Fetches the details of the last received message."
          },
          "getRouter()": {
            "notice": "Return the current router"
          },
          "owner()": {
            "notice": "Get the current owner"
          },
          "supportsInterface(bytes4)": {
            "notice": "IERC165 supports an interfaceId"
          },
          "transferOwnership(address)": {
            "notice": "Allows an owner to begin transferring ownership to a new address."
          },
          "withdraw(address)": {
            "notice": "Allows the contract owner to withdraw the entire balance of Ether from the contract."
          },
          "withdrawToken(address,address)": {
            "notice": "Allows the owner of the contract to withdraw all tokens of a specific ERC20 token."
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_ccipRouter;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_ccipRouter = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\\n  /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\\n  /// This allows CCIP to check if ccipReceive is available before calling it.\\n  /// If this returns false or reverts, only tokens are transferred to the receiver.\\n  /// If this returns true, tokens are transferred and ccipReceive is called atomically.\\n  /// Additionally, if the receiver address does not have code associated with\\n  /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return CCIP router address\\n  function getRouter() public view virtual returns (address) {\\n    return address(i_ccipRouter);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != getRouter()) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param destChainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 destChainSelector) external view returns (bool supported);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV2)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV2\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V2_TAG = 0x181dcf10;\\n\\n  /// @param gasLimit: gas limit for the callback on the destination chain.\\n  /// @param allowOutOfOrderExecution: if true, it indicates that the message can be executed in any order relative to other messages from the same sender.\\n  /// This value's default varies by chain. On some chains, a particular value is enforced, meaning if the expected value\\n  /// is not set, the message request will revert.\\n  struct EVMExtraArgsV2 {\\n    uint256 gasLimit;\\n    bool allowOutOfOrderExecution;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV2 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V2_TAG, extraArgs);\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/shared/access/ConfirmedOwner.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwner} from \\\"./ConfirmedOwner.sol\\\";\\n\\n/// @title The OwnerIsCreator contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract OwnerIsCreator is ConfirmedOwner {\\n  constructor() ConfirmedOwner(msg.sender) {}\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/shared/interfaces/IOwnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n   * given ``owner``'s signed approval.\\n   *\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n   * ordering also apply here.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `deadline` must be a timestamp in the future.\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n   * over the EIP712-formatted function arguments.\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\n   *\\n   * For more information on the signature format, see the\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n   * section].\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n   * included whenever a signature is generated for {permit}.\\n   *\\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n   * prevents a signature from being used multiple times.\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IERC20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    unchecked {\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\n      require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n      uint256 newAllowance = oldAllowance - value;\\n      _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n  }\\n\\n  function safePermit(\\n    IERC20Permit token,\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    uint256 nonceBefore = token.nonces(owner);\\n    token.permit(owner, spender, value, deadline, v, r, s);\\n    uint256 nonceAfter = token.nonces(owner);\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n   * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n   *\\n   * _Available since v4.8._\\n   */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason or using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC4906.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title ERC-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {ERC721Utils} from \\\"./utils/ERC721Utils.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if:\\n     * - `spender` does not have approval from `owner` for `tokenId`.\\n     * - `spender` does not have approval to manage all of `owner`'s assets.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC-721 Burnable Token\\n * @dev ERC-721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        _update(address(0), tokenId, _msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"./IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the ERC that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: {ERC721} extensions that implement custom `balanceOf` logic, such as {ERC721Consecutive},\\n * interfere with enumerability and should not be used together with {ERC721Enumerable}.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\\n\\n    uint256[] private _allTokens;\\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = balanceOf(to) - 1;\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        mapping(uint256 index => uint256) storage _ownedTokensByOwner = _ownedTokens[from];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokensByOwner[lastTokenIndex];\\n\\n            _ownedTokensByOwner[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokensByOwner[lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC-721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/utils/ERC721Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\nimport {IERC721Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-721 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC721Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721-onERC721Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    // Token rejected\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC721Receiver implementer\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2²⁵⁶ + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\\n            // This is going to be our x_0 (and ε_0)\\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\\n            //              = ((x_n² + a) / (2 * x_n))² - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\\n            //              = (x_n² - a)² / (2 * x_n)²\\n            //              = ((x_n² - a) / (2 * x_n))²\\n            //              ≥ 0\\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\\n            //         = | ε_n² / (2 * x_n) |\\n            //         = ε_n² / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // ε_1 = ε_0² / | (2 * x_0) |\\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\\n            //     ≤ 2**(e-3) / 3\\n            //     ≤ 2**(e-3-log2(3))\\n            //     ≤ 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\\n            //         ≤ 2**(2*e-2*k) / 2**e\\n            //         ≤ 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\\n\\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Panic.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\n    },\n    \"contracts/MyToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.28;\\n\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport {ERC721Burnable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport {ERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport {ERC721URIStorage} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MyToken is\\n    ERC721,\\n    ERC721Enumerable,\\n    ERC721URIStorage,\\n    ERC721Burnable,\\n    Ownable\\n{\\n    uint256 private _nextTokenId;\\n\\n    string constant META_DATA =\\n        \\\"ipfs://QmZta2Du9hWY5Ek6Vty1hi6V7bevvrP3k61yYoEqkrMgbM\\\";\\n\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) ERC721(tokenName, tokenSymbol) Ownable(msg.sender) {}\\n\\n    function safeMint(address to) public {\\n        uint256 tokenId = _nextTokenId++;\\n        _safeMint(to, tokenId);\\n        _setTokenURI(tokenId, META_DATA);\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function _update(\\n        address to,\\n        uint256 tokenId,\\n        address auth\\n    ) internal override(ERC721, ERC721Enumerable) returns (address) {\\n        return super._update(to, tokenId, auth);\\n    }\\n\\n    function _increaseBalance(\\n        address account,\\n        uint128 value\\n    ) internal override(ERC721, ERC721Enumerable) {\\n        super._increaseBalance(account, value);\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override(ERC721, ERC721URIStorage) returns (string memory) {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable, ERC721URIStorage)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\n    },\n    \"contracts/NFTPoolBurnAndMint.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport {OwnerIsCreator} from \\\"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol\\\";\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport {CCIPReceiver} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\nimport {IERC20} from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {WrappedNFT} from \\\"./WrappedNFT.sol\\\";\\n\\n/**\\n * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.\\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\\n * DO NOT USE THIS CODE IN PRODUCTION.\\n */\\n\\n/// @title - A simple messenger contract for sending/receiving string data across chains.\\ncontract NFTPoolBurnAndMint is CCIPReceiver, OwnerIsCreator {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom errors to provide more descriptive revert messages.\\n    error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees); // Used to make sure contract has enough balance.\\n    error NothingToWithdraw(); // Used when trying to withdraw Ether but there's nothing to withdraw.\\n    error FailedToWithdrawEth(address owner, address target, uint256 value); // Used when the withdrawal of Ether fails.\\n\\n    // Event emitted when a message is sent to another chain.\\n    event TokenBurnedAndSent(\\n        bytes32 indexed messageId, // The unique ID of the CCIP message.\\n        uint64 indexed destinationChainSelector, // The chain selector of the destination chain.\\n        address receiver, // The address of the receiver on the destination chain.\\n        bytes text, // The text being sent.\\n        address feeToken, // the token address used to pay CCIP fees.\\n        uint256 fees // The fees paid for sending the CCIP message.\\n    );\\n\\n    // Event emitted when a message is received from another chain.\\n    // event MessageReceived(\\n    //     bytes32 indexed messageId, // The unique ID of the CCIP message.\\n    //     uint64 indexed sourceChainSelector, // The chain selector of the source chain.\\n    //     address sender, // The address of the sender from the source chain.\\n    //     string text // The text that was received.\\n    // );\\n\\n    struct RequestData{\\n        uint256 tokenId;\\n        address newOwner;\\n    }\\n\\n    bytes32 private s_lastReceivedMessageId; // Store the last received messageId.\\n    string private s_lastReceivedText; // Store the last received text.\\n\\n    // Mapping to keep track of allowlisted destination chains.\\n    mapping(uint64 => bool) public allowlistedDestinationChains;\\n\\n    // Mapping to keep track of allowlisted source chains.\\n    mapping(uint64 => bool) public allowlistedSourceChains;\\n\\n    // Mapping to keep track of allowlisted senders.\\n    mapping(address => bool) public allowlistedSenders;\\n\\n    IERC20 private s_linkToken;\\n\\n    WrappedNFT public wnft;\\n\\n    /// @notice Constructor initializes the contract with the router address.\\n    /// @param _router The address of the router contract.\\n    /// @param _link The address of the link contract.\\n    constructor(address _router, address _link, address wnftAddr) CCIPReceiver(_router) {\\n        wnft = WrappedNFT(wnftAddr);\\n        s_linkToken = IERC20(_link);\\n    }\\n\\n    /// @dev Updates the allowlist status of a destination chain for transactions.\\n    function allowlistDestinationChain(\\n        uint64 _destinationChainSelector,\\n        bool allowed\\n    ) external onlyOwner {\\n        allowlistedDestinationChains[_destinationChainSelector] = allowed;\\n    }\\n\\n    /// @dev Updates the allowlist status of a source chain for transactions.\\n    function allowlistSourceChain(\\n        uint64 _sourceChainSelector,\\n        bool allowed\\n    ) external onlyOwner {\\n        allowlistedSourceChains[_sourceChainSelector] = allowed;\\n    }\\n\\n    /// @dev Updates the allowlist status of a sender for transactions.\\n    function allowlistSender(address _sender, bool allowed) external onlyOwner {\\n        allowlistedSenders[_sender] = allowed;\\n    }\\n\\n    function burnAndMint(\\n        uint256 _tokenId,\\n        address newOwner,\\n        uint64 destChainSelector,\\n        address receiver) public {\\n        // verify if the sender is the owner of NFT\\n        // comment this because the check is already performed by ERC721\\n        // require(wnft.ownerOf(_tokenId) == msg.sender, \\\"you are not the owner of the NFT\\\");\\n\\n        // transfer NFT to the pool\\n        wnft.transferFrom(msg.sender, address(this), _tokenId);\\n        // burn the NFT\\n        wnft.burn(_tokenId);\\n        // send transaction to the destination chain\\n        bytes memory payload = abi.encode(_tokenId, newOwner);\\n        sendMessagePayLINK(destChainSelector, receiver, payload);\\n    }\\n\\n\\n    /// @notice Sends data to receiver on the destination chain.\\n    /// @notice Pay for fees in LINK.\\n    /// @dev Assumes your contract has sufficient LINK.\\n    /// @param _destinationChainSelector The identifier (aka selector) for the destination blockchain.\\n    /// @param _receiver The address of the recipient on the destination blockchain.\\n    /// @param _payload The data to be sent.\\n    /// @return messageId The ID of the CCIP message that was sent.\\n    function sendMessagePayLINK(\\n        uint64 _destinationChainSelector,\\n        address _receiver,\\n        bytes memory _payload\\n    )\\n    internal\\n    onlyOwner\\n    returns (bytes32 messageId)\\n    {\\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\n        Client.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(\\n            _receiver,\\n            _payload,\\n            address(s_linkToken)\\n        );\\n\\n        // Initialize a router client instance to interact with cross-chain router\\n        IRouterClient router = IRouterClient(this.getRouter());\\n\\n        // Get the fee required to send the CCIP message\\n        uint256 fees = router.getFee(_destinationChainSelector, evm2AnyMessage);\\n\\n        if (fees > s_linkToken.balanceOf(address(this)))\\n            revert NotEnoughBalance(s_linkToken.balanceOf(address(this)), fees);\\n\\n        // approve the Router to transfer LINK tokens on contract's behalf. It will spend the fees in LINK\\n        s_linkToken.approve(address(router), fees);\\n\\n        // Send the CCIP message through the router and store the returned CCIP message ID\\n        messageId = router.ccipSend(_destinationChainSelector, evm2AnyMessage);\\n\\n        // Emit an event with message details\\n        emit TokenBurnedAndSent(\\n            messageId,\\n            _destinationChainSelector,\\n            _receiver,\\n            _payload,\\n            address(s_linkToken),\\n            fees\\n        );\\n\\n        // Return the CCIP message ID\\n        return messageId;\\n    }\\n\\n    /// handle a received message\\n    function _ccipReceive(\\n        Client.Any2EVMMessage memory any2EvmMessage\\n    )\\n    internal\\n    override\\n    {\\n        RequestData memory reqData = abi.decode(any2EvmMessage.data, (RequestData));\\n        address newOwner = reqData.newOwner;\\n        uint256 tokenId = reqData.tokenId;\\n\\n        // mint a wrappedToken\\n        wnft.mintWithSpecificTokenId(newOwner, tokenId);\\n\\n        // emit MessageReceived(\\n        //     any2EvmMessage.messageId,\\n        //     any2EvmMessage.sourceChainSelector, // fetch the source chain identifier (aka selector)\\n        //     abi.decode(any2EvmMessage.sender, (address)), // abi-decoding of the sender address,\\n        //     abi.decode(any2EvmMessage.data, (string))\\n        // );\\n    }\\n\\n    /// @notice Construct a CCIP message.\\n    /// @dev This function will create an EVM2AnyMessage struct with all the necessary information for sending a text.\\n    /// @param _receiver The address of the receiver.\\n    /// @param _payload The string data to be sent.\\n    /// @param _feeTokenAddress The address of the token used for fees. Set address(0) for native gas.\\n    /// @return Client.EVM2AnyMessage Returns an EVM2AnyMessage struct which contains information for sending a CCIP message.\\n    function _buildCCIPMessage(\\n        address _receiver,\\n        bytes memory _payload,\\n        address _feeTokenAddress\\n    ) private pure returns (Client.EVM2AnyMessage memory) {\\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\n        return\\n            Client.EVM2AnyMessage({\\n            receiver: abi.encode(_receiver), // ABI-encoded receiver address\\n            data: _payload, // ABI-encoded string\\n            tokenAmounts: new Client.EVMTokenAmount[](0), // Empty array aas no tokens are transferred\\n            extraArgs: Client._argsToBytes(\\n        // Additional arguments, setting gas limit\\n                Client.EVMExtraArgsV1({gasLimit: 200_000})\\n            ),\\n        // Set the feeToken to a feeTokenAddress, indicating specific asset will be used for fees\\n            feeToken: _feeTokenAddress\\n        });\\n    }\\n\\n    /// @notice Fetches the details of the last received message.\\n    /// @return messageId The ID of the last received message.\\n    /// @return text The last received text.\\n    function getLastReceivedMessageDetails()\\n    external\\n    view\\n    returns (bytes32 messageId, string memory text)\\n    {\\n        return (s_lastReceivedMessageId, s_lastReceivedText);\\n    }\\n\\n    /// @notice Fallback function to allow the contract to receive Ether.\\n    /// @dev This function has no function body, making it a default function for receiving Ether.\\n    /// It is automatically called when Ether is sent to the contract without any data.\\n    receive() external payable {}\\n\\n    /// @notice Allows the contract owner to withdraw the entire balance of Ether from the contract.\\n    /// @dev This function reverts if there are no funds to withdraw or if the transfer fails.\\n    /// It should only be callable by the owner of the contract.\\n    /// @param _beneficiary The address to which the Ether should be sent.\\n    function withdraw(address _beneficiary) public onlyOwner {\\n        // Retrieve the balance of this contract\\n        uint256 amount = address(this).balance;\\n\\n        // Revert if there is nothing to withdraw\\n        if (amount == 0) revert NothingToWithdraw();\\n\\n        // Attempt to send the funds, capturing the success status and discarding any return data\\n        (bool sent, ) = _beneficiary.call{value: amount}(\\\"\\\");\\n\\n        // Revert if the send failed, with information about the attempted transfer\\n        if (!sent) revert FailedToWithdrawEth(msg.sender, _beneficiary, amount);\\n    }\\n\\n    /// @notice Allows the owner of the contract to withdraw all tokens of a specific ERC20 token.\\n    /// @dev This function reverts with a 'NothingToWithdraw' error if there are no tokens to withdraw.\\n    /// @param _beneficiary The address to which the tokens will be sent.\\n    /// @param _token The contract address of the ERC20 token to be withdrawn.\\n    function withdrawToken(\\n        address _beneficiary,\\n        address _token\\n    ) public onlyOwner {\\n        // Retrieve the balance of this contract\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n\\n        // Revert if there is nothing to withdraw\\n        if (amount == 0) revert NothingToWithdraw();\\n\\n        IERC20(_token).safeTransfer(_beneficiary, amount);\\n    }\\n}\\n\"\n    },\n    \"contracts/WrappedNFT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.28;\\n\\nimport {MyToken} from \\\"./MyToken.sol\\\";\\n\\ncontract WrappedNFT is MyToken {\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol\\n    ) MyToken(tokenName, tokenSymbol) {}\\n\\n    function mintWithSpecificTokenId(address to, uint256 tokenId) public {\\n        _safeMint(to, tokenId);\\n    }\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"evmVersion\": \"paris\",\n    \"optimizer\": {\n      \"enabled\": false,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "f159f41f1148a61037602184df8252b8",
      "transactionHash": "0x454d152b479e170dd113ecf6ea98a354bb4e550b906a779ef3fb5fedfd944210",
      "args": [
        "0x0BF3dE8c5D3e8A2B34D2BEeB17ABfCeBaf363A59",
        "0x779877A7B0D9E8603169DdbD7836e478b4624789",
        "0xFA231FBfc7573EF2fdb8669cccb4f2B01C462439"
      ]
    },
    "decoded": {
      "from": "0x9fb3A3A24173C7784d1dC11989a666b9a995Bab1",
      "gasPrice": "7597169827",
      "maxFeePerGas": "7597169827",
      "maxPriorityFeePerGas": "960569913",
      "gasLimit": "2505538",
      "to": null,
      "value": "0",
      "nonce": 96,
      "data": "",
      "r": "0xa9bdc76d06c32e4bcee5a72e24beb3483e73c3270c45c25db08b2dff9a1f4384",
      "s": "0x57479baf59870d2dd83115f2bac07942d0ccf4460903f382fd1fce4fb6994e7a",
      "v": 1,
      "chainId": 11155111
    }
  }
}